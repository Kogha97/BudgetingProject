{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/axios/index.js","node_modules/axios/lib/adapters/xhr.js","node_modules/axios/lib/axios.js","node_modules/axios/lib/cancel/Cancel.js","node_modules/axios/lib/cancel/CancelToken.js","node_modules/axios/lib/cancel/isCancel.js","node_modules/axios/lib/core/Axios.js","node_modules/axios/lib/core/InterceptorManager.js","node_modules/axios/lib/core/buildFullPath.js","node_modules/axios/lib/core/createError.js","node_modules/axios/lib/core/dispatchRequest.js","node_modules/axios/lib/core/enhanceError.js","node_modules/axios/lib/core/mergeConfig.js","node_modules/axios/lib/core/settle.js","node_modules/axios/lib/core/transformData.js","node_modules/axios/lib/defaults.js","node_modules/axios/lib/helpers/bind.js","node_modules/axios/lib/helpers/buildURL.js","node_modules/axios/lib/helpers/combineURLs.js","node_modules/axios/lib/helpers/cookies.js","node_modules/axios/lib/helpers/isAbsoluteURL.js","node_modules/axios/lib/helpers/isURLSameOrigin.js","node_modules/axios/lib/helpers/normalizeHeaderName.js","node_modules/axios/lib/helpers/parseHeaders.js","node_modules/axios/lib/helpers/spread.js","node_modules/axios/lib/utils.js","node_modules/debug/node_modules/ms/index.js","node_modules/debug/src/browser.js","node_modules/debug/src/common.js","node_modules/process/browser.js","node_modules/superstruct/lib/index.cjs","src/entities/account.js","src/entities/accountHolder.js","src/entities/address.js","src/entities/card.js","src/entities/feedItem.js","src/entities/identity.js","src/entities/mandate.js","src/entities/oauth.js","src/entities/payee.js","src/entities/payment.js","src/entities/savingsGoal.js","src/starling.js","src/utils/http.js","src/utils/validator.js"],"names":[],"mappingsrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AClGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrlKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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","file":"starling.bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","module.exports = require('./lib/axios');","'use strict';\n\nvar utils = require('./../utils');\nvar settle = require('./../core/settle');\nvar cookies = require('./../helpers/cookies');\nvar buildURL = require('./../helpers/buildURL');\nvar buildFullPath = require('../core/buildFullPath');\nvar parseHeaders = require('./../helpers/parseHeaders');\nvar isURLSameOrigin = require('./../helpers/isURLSameOrigin');\nvar createError = require('../core/createError');\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    if (\n      (utils.isBlob(requestData) || utils.isFile(requestData)) &&\n      requestData.type\n    ) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = unescape(encodeURIComponent(config.auth.password)) || '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    var fullPath = buildFullPath(config.baseURL, config.url);\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    // Listen for ready state\n    request.onreadystatechange = function handleLoad() {\n      if (!request || request.readyState !== 4) {\n        return;\n      }\n\n      // The request errored out and we didn't get a response, this will be\n      // handled by onerror instead\n      // With one exception: request that using file: protocol, most browsers\n      // will return status as 0 even though it's a successful request\n      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n        return;\n      }\n\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;\n      var response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n\n      settle(resolve, reject, response);\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(createError('Request aborted', config, 'ECONNABORTED', request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(createError(timeoutErrorMessage, config, 'ECONNABORTED',\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?\n        cookies.read(config.xsrfCookieName) :\n        undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (config.responseType) {\n      try {\n        request.responseType = config.responseType;\n      } catch (e) {\n        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.\n        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.\n        if (config.responseType !== 'json') {\n          throw e;\n        }\n      }\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken) {\n      // Handle cancellation\n      config.cancelToken.promise.then(function onCanceled(cancel) {\n        if (!request) {\n          return;\n        }\n\n        request.abort();\n        reject(cancel);\n        // Clean up request\n        request = null;\n      });\n    }\n\n    if (!requestData) {\n      requestData = null;\n    }\n\n    // Send the request\n    request.send(requestData);\n  });\n};\n","'use strict';\n\nvar utils = require('./utils');\nvar bind = require('./helpers/bind');\nvar Axios = require('./core/Axios');\nvar mergeConfig = require('./core/mergeConfig');\nvar defaults = require('./defaults');\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n * @return {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  var context = new Axios(defaultConfig);\n  var instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context);\n\n  // Copy context to instance\n  utils.extend(instance, context);\n\n  return instance;\n}\n\n// Create the default instance to be exported\nvar axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Factory for creating new instances\naxios.create = function create(instanceConfig) {\n  return createInstance(mergeConfig(axios.defaults, instanceConfig));\n};\n\n// Expose Cancel & CancelToken\naxios.Cancel = require('./cancel/Cancel');\naxios.CancelToken = require('./cancel/CancelToken');\naxios.isCancel = require('./cancel/isCancel');\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = require('./helpers/spread');\n\nmodule.exports = axios;\n\n// Allow use of default import syntax in TypeScript\nmodule.exports.default = axios;\n","'use strict';\n\n/**\n * A `Cancel` is an object that is thrown when an operation is canceled.\n *\n * @class\n * @param {string=} message The message.\n */\nfunction Cancel(message) {\n  this.message = message;\n}\n\nCancel.prototype.toString = function toString() {\n  return 'Cancel' + (this.message ? ': ' + this.message : '');\n};\n\nCancel.prototype.__CANCEL__ = true;\n\nmodule.exports = Cancel;\n","'use strict';\n\nvar Cancel = require('./Cancel');\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @class\n * @param {Function} executor The executor function.\n */\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n\n  var token = this;\n  executor(function cancel(message) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new Cancel(message);\n    resolvePromise(token.reason);\n  });\n}\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n */\nCancelToken.source = function source() {\n  var cancel;\n  var token = new CancelToken(function executor(c) {\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel\n  };\n};\n\nmodule.exports = CancelToken;\n","'use strict';\n\nmodule.exports = function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n};\n","'use strict';\n\nvar utils = require('./../utils');\nvar buildURL = require('../helpers/buildURL');\nvar InterceptorManager = require('./InterceptorManager');\nvar dispatchRequest = require('./dispatchRequest');\nvar mergeConfig = require('./mergeConfig');\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */\nfunction Axios(instanceConfig) {\n  this.defaults = instanceConfig;\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager()\n  };\n}\n\n/**\n * Dispatch a request\n *\n * @param {Object} config The config specific for this request (merged with this.defaults)\n */\nAxios.prototype.request = function request(config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof config === 'string') {\n    config = arguments[1] || {};\n    config.url = arguments[0];\n  } else {\n    config = config || {};\n  }\n\n  config = mergeConfig(this.defaults, config);\n\n  // Set config.method\n  if (config.method) {\n    config.method = config.method.toLowerCase();\n  } else if (this.defaults.method) {\n    config.method = this.defaults.method.toLowerCase();\n  } else {\n    config.method = 'get';\n  }\n\n  // Hook up interceptors middleware\n  var chain = [dispatchRequest, undefined];\n  var promise = Promise.resolve(config);\n\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    chain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    chain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  while (chain.length) {\n    promise = promise.then(chain.shift(), chain.shift());\n  }\n\n  return promise;\n};\n\nAxios.prototype.getUri = function getUri(config) {\n  config = mergeConfig(this.defaults, config);\n  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\\?/, '');\n};\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, data, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url,\n      data: data\n    }));\n  };\n});\n\nmodule.exports = Axios;\n","'use strict';\n\nvar utils = require('./../utils');\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function use(fulfilled, rejected) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected\n  });\n  return this.handlers.length - 1;\n};\n\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;\n","'use strict';\n\nvar isAbsoluteURL = require('../helpers/isAbsoluteURL');\nvar combineURLs = require('../helpers/combineURLs');\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n * @returns {string} The combined full path\n */\nmodule.exports = function buildFullPath(baseURL, requestedURL) {\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n};\n","'use strict';\n\nvar enhanceError = require('./enhanceError');\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The created error.\n */\nmodule.exports = function createError(message, config, code, request, response) {\n  var error = new Error(message);\n  return enhanceError(error, config, code, request, response);\n};\n","'use strict';\n\nvar utils = require('./../utils');\nvar transformData = require('./transformData');\nvar isCancel = require('../cancel/isCancel');\nvar defaults = require('../defaults');\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData(\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData(\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData(\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n","'use strict';\n\n/**\n * Update an Error with the specified config, error code, and response.\n *\n * @param {Error} error The error to update.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The error.\n */\nmodule.exports = function enhanceError(error, config, code, request, response) {\n  error.config = config;\n  if (code) {\n    error.code = code;\n  }\n\n  error.request = request;\n  error.response = response;\n  error.isAxiosError = true;\n\n  error.toJSON = function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: this.config,\n      code: this.code\n    };\n  };\n  return error;\n};\n","'use strict';\n\nvar utils = require('../utils');\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n * @returns {Object} New object resulting from merging config2 to config1\n */\nmodule.exports = function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  var config = {};\n\n  var valueFromConfig2Keys = ['url', 'method', 'data'];\n  var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy', 'params'];\n  var defaultToConfig2Keys = [\n    'baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer',\n    'timeout', 'timeoutMessage', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',\n    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'decompress',\n    'maxContentLength', 'maxBodyLength', 'maxRedirects', 'transport', 'httpAgent',\n    'httpsAgent', 'cancelToken', 'socketPath', 'responseEncoding'\n  ];\n  var directMergeKeys = ['validateStatus'];\n\n  function getMergedValue(target, source) {\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n      return utils.merge(target, source);\n    } else if (utils.isPlainObject(source)) {\n      return utils.merge({}, source);\n    } else if (utils.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  function mergeDeepProperties(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      config[prop] = getMergedValue(config1[prop], config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      config[prop] = getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      config[prop] = getMergedValue(undefined, config2[prop]);\n    }\n  });\n\n  utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);\n\n  utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      config[prop] = getMergedValue(undefined, config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      config[prop] = getMergedValue(undefined, config1[prop]);\n    }\n  });\n\n  utils.forEach(directMergeKeys, function merge(prop) {\n    if (prop in config2) {\n      config[prop] = getMergedValue(config1[prop], config2[prop]);\n    } else if (prop in config1) {\n      config[prop] = getMergedValue(undefined, config1[prop]);\n    }\n  });\n\n  var axiosKeys = valueFromConfig2Keys\n    .concat(mergeDeepPropertiesKeys)\n    .concat(defaultToConfig2Keys)\n    .concat(directMergeKeys);\n\n  var otherKeys = Object\n    .keys(config1)\n    .concat(Object.keys(config2))\n    .filter(function filterAxiosKeys(key) {\n      return axiosKeys.indexOf(key) === -1;\n    });\n\n  utils.forEach(otherKeys, mergeDeepProperties);\n\n  return config;\n};\n","'use strict';\n\nvar createError = require('./createError');\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n */\nmodule.exports = function settle(resolve, reject, response) {\n  var validateStatus = response.config.validateStatus;\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(createError(\n      'Request failed with status code ' + response.status,\n      response.config,\n      null,\n      response.request,\n      response\n    ));\n  }\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Object|String} data The data to be transformed\n * @param {Array} headers The headers for the request or response\n * @param {Array|Function} fns A single function or Array of functions\n * @returns {*} The resulting transformed data\n */\nmodule.exports = function transformData(data, headers, fns) {\n  /*eslint no-param-reassign:0*/\n  utils.forEach(fns, function transform(fn) {\n    data = fn(data, headers);\n  });\n\n  return data;\n};\n","'use strict';\n\nvar utils = require('./utils');\nvar normalizeHeaderName = require('./helpers/normalizeHeaderName');\n\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nfunction setContentTypeIfUnset(headers, value) {\n  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n    headers['Content-Type'] = value;\n  }\n}\n\nfunction getDefaultAdapter() {\n  var adapter;\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = require('./adapters/xhr');\n  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {\n    // For node use HTTP adapter\n    adapter = require('./adapters/http');\n  }\n  return adapter;\n}\n\nvar defaults = {\n  adapter: getDefaultAdapter(),\n\n  transformRequest: [function transformRequest(data, headers) {\n    normalizeHeaderName(headers, 'Accept');\n    normalizeHeaderName(headers, 'Content-Type');\n    if (utils.isFormData(data) ||\n      utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n      return data.toString();\n    }\n    if (utils.isObject(data)) {\n      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');\n      return JSON.stringify(data);\n    }\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    /*eslint no-param-reassign:0*/\n    if (typeof data === 'string') {\n      try {\n        data = JSON.parse(data);\n      } catch (e) { /* Ignore */ }\n    }\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n  maxBodyLength: -1,\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  }\n};\n\ndefaults.headers = {\n  common: {\n    'Accept': 'application/json, text/plain, */*'\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nmodule.exports = defaults;\n","'use strict';\n\nmodule.exports = function bind(fn, thisArg) {\n  return function wrap() {\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n    return fn.apply(thisArg, args);\n  };\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @returns {string} The formatted url\n */\nmodule.exports = function buildURL(url, params, paramsSerializer) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n\n  var serializedParams;\n  if (paramsSerializer) {\n    serializedParams = paramsSerializer(params);\n  } else if (utils.isURLSearchParams(params)) {\n    serializedParams = params.toString();\n  } else {\n    var parts = [];\n\n    utils.forEach(params, function serialize(val, key) {\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n\n      if (utils.isArray(val)) {\n        key = key + '[]';\n      } else {\n        val = [val];\n      }\n\n      utils.forEach(val, function parseValue(v) {\n        if (utils.isDate(v)) {\n          v = v.toISOString();\n        } else if (utils.isObject(v)) {\n          v = JSON.stringify(v);\n        }\n        parts.push(encode(key) + '=' + encode(v));\n      });\n    });\n\n    serializedParams = parts.join('&');\n  }\n\n  if (serializedParams) {\n    var hashmarkIndex = url.indexOf('#');\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};\n","'use strict';\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n * @returns {string} The combined URL\n */\nmodule.exports = function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs support document.cookie\n    (function standardBrowserEnv() {\n      return {\n        write: function write(name, value, expires, path, domain, secure) {\n          var cookie = [];\n          cookie.push(name + '=' + encodeURIComponent(value));\n\n          if (utils.isNumber(expires)) {\n            cookie.push('expires=' + new Date(expires).toGMTString());\n          }\n\n          if (utils.isString(path)) {\n            cookie.push('path=' + path);\n          }\n\n          if (utils.isString(domain)) {\n            cookie.push('domain=' + domain);\n          }\n\n          if (secure === true) {\n            cookie.push('secure');\n          }\n\n          document.cookie = cookie.join('; ');\n        },\n\n        read: function read(name) {\n          var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n          return (match ? decodeURIComponent(match[3]) : null);\n        },\n\n        remove: function remove(name) {\n          this.write(name, '', Date.now() - 86400000);\n        }\n      };\n    })() :\n\n  // Non standard browser env (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return {\n        write: function write() {},\n        read: function read() { return null; },\n        remove: function remove() {}\n      };\n    })()\n);\n","'use strict';\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nmodule.exports = function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs have full support of the APIs needed to test\n  // whether the request URL is of the same origin as current location.\n    (function standardBrowserEnv() {\n      var msie = /(msie|trident)/i.test(navigator.userAgent);\n      var urlParsingNode = document.createElement('a');\n      var originURL;\n\n      /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n      function resolveURL(url) {\n        var href = url;\n\n        if (msie) {\n        // IE needs attribute set twice to normalize properties\n          urlParsingNode.setAttribute('href', href);\n          href = urlParsingNode.href;\n        }\n\n        urlParsingNode.setAttribute('href', href);\n\n        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n        return {\n          href: urlParsingNode.href,\n          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n          host: urlParsingNode.host,\n          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n          hostname: urlParsingNode.hostname,\n          port: urlParsingNode.port,\n          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n            urlParsingNode.pathname :\n            '/' + urlParsingNode.pathname\n        };\n      }\n\n      originURL = resolveURL(window.location.href);\n\n      /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n      return function isURLSameOrigin(requestURL) {\n        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n        return (parsed.protocol === originURL.protocol &&\n            parsed.host === originURL.host);\n      };\n    })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return function isURLSameOrigin() {\n        return true;\n      };\n    })()\n);\n","'use strict';\n\nvar utils = require('../utils');\n\nmodule.exports = function normalizeHeaderName(headers, normalizedName) {\n  utils.forEach(headers, function processHeader(value, name) {\n    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n      headers[normalizedName] = value;\n      delete headers[name];\n    }\n  });\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\n// Headers whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nvar ignoreDuplicateOf = [\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n];\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} headers Headers needing to be parsed\n * @returns {Object} Headers parsed into an object\n */\nmodule.exports = function parseHeaders(headers) {\n  var parsed = {};\n  var key;\n  var val;\n  var i;\n\n  if (!headers) { return parsed; }\n\n  utils.forEach(headers.split('\\n'), function parser(line) {\n    i = line.indexOf(':');\n    key = utils.trim(line.substr(0, i)).toLowerCase();\n    val = utils.trim(line.substr(i + 1));\n\n    if (key) {\n      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n        return;\n      }\n      if (key === 'set-cookie') {\n        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);\n      } else {\n        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n      }\n    }\n  });\n\n  return parsed;\n};\n","'use strict';\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};\n","'use strict';\n\nvar bind = require('./helpers/bind');\n\n/*global toString:true*/\n\n// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\nfunction isArray(val) {\n  return toString.call(val) === '[object Array]';\n}\n\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nfunction isFormData(val) {\n  return (typeof FormData !== 'undefined') && (val instanceof FormData);\n}\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  var result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {Object} val The value to test\n * @return {boolean} True if value is a plain Object, otherwise false\n */\nfunction isPlainObject(val) {\n  if (toString.call(val) !== '[object Object]') {\n    return false;\n  }\n\n  var prototype = Object.getPrototypeOf(val);\n  return prototype === null || prototype === Object.prototype;\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n\n/**\n * Determine if a value is a Function\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n\n/**\n * Determine if a value is a Stream\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nfunction isStream(val) {\n  return isObject(val) && isFunction(val.pipe);\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nfunction isURLSearchParams(val) {\n  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;\n}\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\nfunction trim(str) {\n  return str.replace(/^\\s*/, '').replace(/\\s*$/, '');\n}\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n */\nfunction isStandardBrowserEnv() {\n  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||\n                                           navigator.product === 'NativeScript' ||\n                                           navigator.product === 'NS')) {\n    return false;\n  }\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined'\n  );\n}\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (isPlainObject(result[key]) && isPlainObject(val)) {\n      result[key] = merge(result[key], val);\n    } else if (isPlainObject(val)) {\n      result[key] = merge({}, val);\n    } else if (isArray(val)) {\n      result[key] = val.slice();\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n * @return {Object} The resulting value of object a\n */\nfunction extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n * @return {string} content value without BOM\n */\nfunction stripBOM(content) {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n}\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isBuffer: isBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isPlainObject: isPlainObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isFunction: isFunction,\n  isStream: isStream,\n  isURLSearchParams: isURLSearchParams,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  extend: extend,\n  trim: trim,\n  stripBOM: stripBOM\n};\n","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n","\"use strict\";\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\n/**\n * Colors.\n */\n\nexports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n// eslint-disable-next-line complexity\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n    return true;\n  } // Internet Explorer and Edge do not support colors.\n\n\n  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n    return false;\n  } // Is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\n\n  return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773\n  typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?\n  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker\n  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/);\n}\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\n\nfunction formatArgs(args) {\n  args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);\n\n  if (!this.useColors) {\n    return;\n  }\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit'); // The final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function (match) {\n    if (match === '%%') {\n      return;\n    }\n\n    index++;\n\n    if (match === '%c') {\n      // We only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n  args.splice(lastC, 0, c);\n}\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\n\nfunction log() {\n  var _console;\n\n  // This hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return (typeof console === \"undefined\" ? \"undefined\" : _typeof(console)) === 'object' && console.log && (_console = console).log.apply(_console, arguments);\n}\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\n\nfunction save(namespaces) {\n  try {\n    if (namespaces) {\n      exports.storage.setItem('debug', namespaces);\n    } else {\n      exports.storage.removeItem('debug');\n    }\n  } catch (error) {// Swallow\n    // XXX (@Qix-) should we be logging these?\n  }\n}\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\n\nfunction load() {\n  var r;\n\n  try {\n    r = exports.storage.getItem('debug');\n  } catch (error) {} // Swallow\n  // XXX (@Qix-) should we be logging these?\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\n\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\n\nfunction localstorage() {\n  try {\n    // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n    // The Browser also has localStorage in the global context.\n    return localStorage;\n  } catch (error) {// Swallow\n    // XXX (@Qix-) should we be logging these?\n  }\n}\n\nmodule.exports = require('./common')(exports);\nvar formatters = module.exports.formatters;\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n  try {\n    return JSON.stringify(v);\n  } catch (error) {\n    return '[UnexpectedJSONParseError]: ' + error.message;\n  }\n};\n\n","\"use strict\";\n\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\nfunction setup(env) {\n  createDebug.debug = createDebug;\n  createDebug.default = createDebug;\n  createDebug.coerce = coerce;\n  createDebug.disable = disable;\n  createDebug.enable = enable;\n  createDebug.enabled = enabled;\n  createDebug.humanize = require('ms');\n  Object.keys(env).forEach(function (key) {\n    createDebug[key] = env[key];\n  });\n  /**\n  * Active `debug` instances.\n  */\n\n  createDebug.instances = [];\n  /**\n  * The currently active debug mode names, and names to skip.\n  */\n\n  createDebug.names = [];\n  createDebug.skips = [];\n  /**\n  * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n  *\n  * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n  */\n\n  createDebug.formatters = {};\n  /**\n  * Selects a color for a debug namespace\n  * @param {String} namespace The namespace string for the for the debug instance to be colored\n  * @return {Number|String} An ANSI color code for the given namespace\n  * @api private\n  */\n\n  function selectColor(namespace) {\n    var hash = 0;\n\n    for (var i = 0; i < namespace.length; i++) {\n      hash = (hash << 5) - hash + namespace.charCodeAt(i);\n      hash |= 0; // Convert to 32bit integer\n    }\n\n    return createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n  }\n\n  createDebug.selectColor = selectColor;\n  /**\n  * Create a debugger with the given `namespace`.\n  *\n  * @param {String} namespace\n  * @return {Function}\n  * @api public\n  */\n\n  function createDebug(namespace) {\n    var prevTime;\n\n    function debug() {\n      // Disabled?\n      if (!debug.enabled) {\n        return;\n      }\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var self = debug; // Set `diff` timestamp\n\n      var curr = Number(new Date());\n      var ms = curr - (prevTime || curr);\n      self.diff = ms;\n      self.prev = prevTime;\n      self.curr = curr;\n      prevTime = curr;\n      args[0] = createDebug.coerce(args[0]);\n\n      if (typeof args[0] !== 'string') {\n        // Anything else let's inspect with %O\n        args.unshift('%O');\n      } // Apply any `formatters` transformations\n\n\n      var index = 0;\n      args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {\n        // If we encounter an escaped % then don't increase the array index\n        if (match === '%%') {\n          return match;\n        }\n\n        index++;\n        var formatter = createDebug.formatters[format];\n\n        if (typeof formatter === 'function') {\n          var val = args[index];\n          match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`\n\n          args.splice(index, 1);\n          index--;\n        }\n\n        return match;\n      }); // Apply env-specific formatting (colors, etc.)\n\n      createDebug.formatArgs.call(self, args);\n      var logFn = self.log || createDebug.log;\n      logFn.apply(self, args);\n    }\n\n    debug.namespace = namespace;\n    debug.enabled = createDebug.enabled(namespace);\n    debug.useColors = createDebug.useColors();\n    debug.color = selectColor(namespace);\n    debug.destroy = destroy;\n    debug.extend = extend; // Debug.formatArgs = formatArgs;\n    // debug.rawLog = rawLog;\n    // env-specific initialization logic for debug instances\n\n    if (typeof createDebug.init === 'function') {\n      createDebug.init(debug);\n    }\n\n    createDebug.instances.push(debug);\n    return debug;\n  }\n\n  function destroy() {\n    var index = createDebug.instances.indexOf(this);\n\n    if (index !== -1) {\n      createDebug.instances.splice(index, 1);\n      return true;\n    }\n\n    return false;\n  }\n\n  function extend(namespace, delimiter) {\n    return createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n  }\n  /**\n  * Enables a debug mode by namespaces. This can include modes\n  * separated by a colon and wildcards.\n  *\n  * @param {String} namespaces\n  * @api public\n  */\n\n\n  function enable(namespaces) {\n    createDebug.save(namespaces);\n    createDebug.names = [];\n    createDebug.skips = [];\n    var i;\n    var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n    var len = split.length;\n\n    for (i = 0; i < len; i++) {\n      if (!split[i]) {\n        // ignore empty strings\n        continue;\n      }\n\n      namespaces = split[i].replace(/\\*/g, '.*?');\n\n      if (namespaces[0] === '-') {\n        createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n      } else {\n        createDebug.names.push(new RegExp('^' + namespaces + '$'));\n      }\n    }\n\n    for (i = 0; i < createDebug.instances.length; i++) {\n      var instance = createDebug.instances[i];\n      instance.enabled = createDebug.enabled(instance.namespace);\n    }\n  }\n  /**\n  * Disable debug output.\n  *\n  * @api public\n  */\n\n\n  function disable() {\n    createDebug.enable('');\n  }\n  /**\n  * Returns true if the given mode name is enabled, false otherwise.\n  *\n  * @param {String} name\n  * @return {Boolean}\n  * @api public\n  */\n\n\n  function enabled(name) {\n    if (name[name.length - 1] === '*') {\n      return true;\n    }\n\n    var i;\n    var len;\n\n    for (i = 0, len = createDebug.skips.length; i < len; i++) {\n      if (createDebug.skips[i].test(name)) {\n        return false;\n      }\n    }\n\n    for (i = 0, len = createDebug.names.length; i < len; i++) {\n      if (createDebug.names[i].test(name)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\n  * Coerce `val`.\n  *\n  * @param {Mixed} val\n  * @return {Mixed}\n  * @api private\n  */\n\n\n  function coerce(val) {\n    if (val instanceof Error) {\n      return val.stack || val.message;\n    }\n\n    return val;\n  }\n\n  createDebug.enable(createDebug.load());\n  return createDebug;\n}\n\nmodule.exports = setup;\n\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      return function () {\n        if (i >= o.length) return {\n          done: true\n        };\n        return {\n          done: false,\n          value: o[i++]\n        };\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  it = o[Symbol.iterator]();\n  return it.next.bind(it);\n}\n\nvar toString = Object.prototype.toString;\n\nvar kindOf = function kindOf(val) {\n  if (val === void 0) return 'undefined';\n  if (val === null) return 'null';\n\n  var type = typeof val;\n  if (type === 'boolean') return 'boolean';\n  if (type === 'string') return 'string';\n  if (type === 'number') return 'number';\n  if (type === 'symbol') return 'symbol';\n  if (type === 'function') {\n    return isGeneratorFn(val) ? 'generatorfunction' : 'function';\n  }\n\n  if (isArray(val)) return 'array';\n  if (isBuffer(val)) return 'buffer';\n  if (isArguments(val)) return 'arguments';\n  if (isDate(val)) return 'date';\n  if (isError(val)) return 'error';\n  if (isRegexp(val)) return 'regexp';\n\n  switch (ctorName(val)) {\n    case 'Symbol': return 'symbol';\n    case 'Promise': return 'promise';\n\n    // Set, Map, WeakSet, WeakMap\n    case 'WeakMap': return 'weakmap';\n    case 'WeakSet': return 'weakset';\n    case 'Map': return 'map';\n    case 'Set': return 'set';\n\n    // 8-bit typed arrays\n    case 'Int8Array': return 'int8array';\n    case 'Uint8Array': return 'uint8array';\n    case 'Uint8ClampedArray': return 'uint8clampedarray';\n\n    // 16-bit typed arrays\n    case 'Int16Array': return 'int16array';\n    case 'Uint16Array': return 'uint16array';\n\n    // 32-bit typed arrays\n    case 'Int32Array': return 'int32array';\n    case 'Uint32Array': return 'uint32array';\n    case 'Float32Array': return 'float32array';\n    case 'Float64Array': return 'float64array';\n  }\n\n  if (isGeneratorObj(val)) {\n    return 'generator';\n  }\n\n  // Non-plain objects\n  type = toString.call(val);\n  switch (type) {\n    case '[object Object]': return 'object';\n    // iterators\n    case '[object Map Iterator]': return 'mapiterator';\n    case '[object Set Iterator]': return 'setiterator';\n    case '[object String Iterator]': return 'stringiterator';\n    case '[object Array Iterator]': return 'arrayiterator';\n  }\n\n  // other\n  return type.slice(8, -1).toLowerCase().replace(/\\s/g, '');\n};\n\nfunction ctorName(val) {\n  return typeof val.constructor === 'function' ? val.constructor.name : null;\n}\n\nfunction isArray(val) {\n  if (Array.isArray) return Array.isArray(val);\n  return val instanceof Array;\n}\n\nfunction isError(val) {\n  return val instanceof Error || (typeof val.message === 'string' && val.constructor && typeof val.constructor.stackTraceLimit === 'number');\n}\n\nfunction isDate(val) {\n  if (val instanceof Date) return true;\n  return typeof val.toDateString === 'function'\n    && typeof val.getDate === 'function'\n    && typeof val.setDate === 'function';\n}\n\nfunction isRegexp(val) {\n  if (val instanceof RegExp) return true;\n  return typeof val.flags === 'string'\n    && typeof val.ignoreCase === 'boolean'\n    && typeof val.multiline === 'boolean'\n    && typeof val.global === 'boolean';\n}\n\nfunction isGeneratorFn(name, val) {\n  return ctorName(name) === 'GeneratorFunction';\n}\n\nfunction isGeneratorObj(val) {\n  return typeof val.throw === 'function'\n    && typeof val.return === 'function'\n    && typeof val.next === 'function';\n}\n\nfunction isArguments(val) {\n  try {\n    if (typeof val.length === 'number' && typeof val.callee === 'function') {\n      return true;\n    }\n  } catch (err) {\n    if (err.message.indexOf('callee') !== -1) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * If you need to support Safari 5-7 (8-10 yr-old browser),\n * take a look at https://github.com/feross/is-buffer\n */\n\nfunction isBuffer(val) {\n  if (val.constructor && typeof val.constructor.isBuffer === 'function') {\n    return val.constructor.isBuffer(val);\n  }\n  return false;\n}\n\n/**\r\n * Superstruct ships by default with an unopinionated set of scalar types that\r\n * express all of the data types that are built-in to JavaScript.\r\n */\n\nvar Types = {\n  /**\r\n   * Matches any value other than `undefined`.\r\n   *\r\n   * ```js\r\n   * 'anything'\r\n   * true\r\n   * ```\r\n   */\n  any: function any(value) {\n    return value !== undefined;\n  },\n\n  /**\r\n   * Matches an `arguments` object.\r\n   *\r\n   * ```js\r\n   * arguments\r\n   * ```\r\n   */\n  arguments: function _arguments(value) {\n    return kindOf(value) === 'arguments';\n  },\n\n  /**\r\n   * Matches an `Array`.\r\n   *\r\n   * ```js\r\n   * [1, 2, 3]\r\n   * ```\r\n   */\n  array: function array(value) {\n    return kindOf(value) === 'array';\n  },\n\n  /**\r\n   * Matches a boolean.\r\n   *\r\n   * ```js\r\n   * true\r\n   * false\r\n   * ```\r\n   */\n  boolean: function boolean(value) {\n    return kindOf(value) === 'boolean';\n  },\n\n  /**\r\n   * Matches a Node.js `Buffer`.\r\n   *\r\n   * ```js\r\n   * Buffer.from('string')\r\n   * ```\r\n   */\n  buffer: function buffer(value) {\n    return kindOf(value) === 'buffer';\n  },\n\n  /**\r\n   * Matches a **valid** `Date` object.\r\n   *\r\n   * ```js\r\n   * new Date()\r\n   * ```\r\n   *\r\n   * Note: Invalid `Date` objects that equal `NaN` are not matched.\r\n   */\n  date: function date(value) {\n    return kindOf(value) === 'date' && !isNaN(value);\n  },\n\n  /**\r\n   * Matches an error object.\r\n   *\r\n   * ```js\r\n   * new Error()\r\n   * ```\r\n   */\n  error: function error(value) {\n    return kindOf(value) === 'error';\n  },\n\n  /**\r\n   * Matches a `Float32Array` object.\r\n   */\n  float32array: function float32array(value) {\n    return kindOf(value) === 'float32array';\n  },\n\n  /**\r\n   * Matches a `Float64Array` object.\r\n   */\n  float64array: function float64array(value) {\n    return kindOf(value) === 'float64array';\n  },\n\n  /**\r\n   * Matches a function.\r\n   *\r\n   * ```js\r\n   * () => {}\r\n   * function () {}\r\n   * ```\r\n   */\n  function: function _function(value) {\n    return kindOf(value) === 'function';\n  },\n\n  /**\r\n   * Matches a generator function.\r\n   *\r\n   * ```js\r\n   * function* () {}\r\n   * ```\r\n   */\n  generatorfunction: function generatorfunction(value) {\n    return kindOf(value) === 'generatorfunction';\n  },\n\n  /**\r\n   * Matches a `Int16Array` object.\r\n   */\n  int16array: function int16array(value) {\n    return kindOf(value) === 'int16array';\n  },\n\n  /**\r\n   * Matches a `Int32Array` object.\r\n   */\n  int32array: function int32array(value) {\n    return kindOf(value) === 'int32array';\n  },\n\n  /**\r\n   * Matches a `Int8Array` object.\r\n   */\n  int8array: function int8array(value) {\n    return kindOf(value) === 'int8array';\n  },\n\n  /**\r\n   * Matches a `Map` object.\r\n   *\r\n   * ```js\r\n   * new Map()\r\n   * ```\r\n   */\n  map: function map(value) {\n    return kindOf(value) === 'map';\n  },\n\n  /**\r\n   * Matches the `null` literal value.\r\n   *\r\n   * ```js\r\n   * null\r\n   * ```\r\n   */\n  null: function _null(value) {\n    return kindOf(value) === 'null';\n  },\n\n  /**\r\n   * Matches a number.\r\n   *\r\n   * ```js\r\n   * 42\r\n   * ```\r\n   */\n  number: function number(value) {\n    return kindOf(value) === 'number';\n  },\n\n  /**\r\n   * Matches a plain object.\r\n   *\r\n   * ```js\r\n   * { key: 'value' }\r\n   * { something: true }\r\n   * ```\r\n   */\n  object: function object(value) {\n    return kindOf(value) === 'object';\n  },\n\n  /**\r\n   * Matches a `Promise` object.\r\n   *\r\n   * ```js\r\n   * Promise.resolve()\r\n   * ```\r\n   */\n  promise: function promise(value) {\n    return kindOf(value) === 'promise';\n  },\n\n  /**\r\n   * Matches a regular expression object.\r\n   *\r\n   * ```js\r\n   * /a-z/g\r\n   * ```\r\n   */\n  regexp: function regexp(value) {\n    return kindOf(value) === 'regexp';\n  },\n\n  /**\r\n   * Matches a `Set` object.\r\n   *\r\n   * ```js\r\n   * new Set()\r\n   * ```\r\n   */\n  set: function set(value) {\n    return kindOf(value) === 'set';\n  },\n\n  /**\r\n   * Matches a string.\r\n   *\r\n   * ```js\r\n   * 'text'\r\n   * ```\r\n   */\n  string: function string(value) {\n    return kindOf(value) === 'string';\n  },\n\n  /**\r\n   * Matches a `Symbol`.\r\n   *\r\n   * ```js\r\n   * Symbol()\r\n   * ```\r\n   */\n  symbol: function symbol(value) {\n    return kindOf(value) === 'symbol';\n  },\n\n  /**\r\n   * Matches a `Uint16Array` object.\r\n   */\n  uint16array: function uint16array(value) {\n    return kindOf(value) === 'uint16array';\n  },\n\n  /**\r\n   * Matches a `Uint32Array` object.\r\n   */\n  uint32array: function uint32array(value) {\n    return kindOf(value) === 'uint32array';\n  },\n\n  /**\r\n   * Matches a `Uint8Array` object.\r\n   */\n  uint8array: function uint8array(value) {\n    return kindOf(value) === 'uint8array';\n  },\n\n  /**\r\n   * Matches a `Uint8ClampedArray` object.\r\n   */\n  uint8clampedarray: function uint8clampedarray(value) {\n    return kindOf(value) === 'uint8clampedarray';\n  },\n\n  /**\r\n   * Matches the `undefined` literal value.\r\n   *\r\n   * ```js\r\n   * undefined\r\n   * ```\r\n   */\n  undefined: function undefined$1(value) {\n    return kindOf(value) === 'undefined';\n  },\n\n  /**\r\n   * Matches a `WeakMap` object.\r\n   *\r\n   * ```js\r\n   * new WeakMap()\r\n   * ```\r\n   */\n  weakmap: function weakmap(value) {\n    return kindOf(value) === 'weakmap';\n  },\n\n  /**\r\n   * Matches a `WeakSet` object.\r\n   *\r\n   * ```js\r\n   * new WeakSet()\r\n   * ```\r\n   */\n  weakset: function weakset(value) {\n    return kindOf(value) === 'weakset';\n  }\n};\n\nvar isProduction = process.env.NODE_ENV === 'production';\nvar prefix = 'Invariant failed';\nfunction invariant(condition, message) {\n  if (condition) {\n    return;\n  }\n\n  if (isProduction) {\n    throw new Error(prefix);\n  } else {\n    throw new Error(prefix + \": \" + (message || ''));\n  }\n}\n\n/**\r\n * `StructError` objects are thrown (or returned) by Superstruct when its\r\n * validation fails. The error represents the first error encountered during\r\n * validation. But they also have an `error.failures` property that holds\r\n * information for all of the failures encountered.\r\n */\n\nvar StructError = /*#__PURE__*/function (_TypeError) {\n  _inheritsLoose(StructError, _TypeError);\n\n  function StructError(failures) {\n    var _this;\n\n    invariant(failures.length > 0, \"StructError requires being passed a failure, but received: \" + failures);\n    var first = failures[0];\n\n    var path = first.path,\n        value = first.value,\n        type = first.type,\n        branch = first.branch,\n        rest = _objectWithoutPropertiesLoose(first, [\"path\", \"value\", \"type\", \"branch\"]);\n\n    var message = \"Expected a value of type `\" + type + \"`\" + (path.length ? \" for `\" + path.join('.') + \"`\" : '') + \" but received `\" + JSON.stringify(value) + \"`.\";\n    _this = _TypeError.call(this, message) || this;\n    _this.type = type;\n    _this.value = value;\n    Object.assign(_assertThisInitialized(_this), rest);\n    _this.path = path;\n    _this.branch = branch;\n    _this.failures = failures;\n    _this.stack = new Error().stack;\n    _this.__proto__ = StructError.prototype;\n    return _this;\n  }\n\n  return StructError;\n}( /*#__PURE__*/_wrapNativeSuper(TypeError));\n\n/**\r\n * A symbol to set on `Struct` objects to test them against later.\r\n */\nvar STRUCT = Symbol('STRUCT');\n/**\r\n * Check if a value is a `Struct` object.\r\n */\n\nvar isStruct = function isStruct(value) {\n  return typeof value === 'function' && value[STRUCT];\n};\n/**\r\n * This abstract `Struct` factory creates a generic struct that validates values\r\n * against a `Validator` function.\r\n */\n\nvar createStruct = function createStruct(props) {\n  var struct = props.struct;\n  var Error = struct.Error;\n\n  var Struct = function Struct(value) {\n    return Struct.assert(value);\n  }; // Set a hidden symbol property so that we can check it later to see if an\n  // object is a struct object.\n\n\n  Object.defineProperty(Struct, STRUCT, {\n    value: true\n  });\n  Struct.kind = props.kind;\n  Struct.type = props.type;\n\n  Struct.default = function () {\n    return typeof props.defaults === 'function' ? props.defaults() : props.defaults;\n  };\n\n  Struct.test = function (value) {\n    var _Struct$check = Struct.check(value, [value], []),\n        failures = _Struct$check[0];\n\n    return !failures;\n  };\n\n  Struct.assert = function (value) {\n    var _Struct$check2 = Struct.check(value, [value], []),\n        failures = _Struct$check2[0],\n        result = _Struct$check2[1];\n\n    if (failures) {\n      throw new Error(failures);\n    } else {\n      return result;\n    }\n  };\n\n  Struct.validate = function (value) {\n    var _Struct$check3 = Struct.check(value, [value], []),\n        failures = _Struct$check3[0],\n        result = _Struct$check3[1];\n\n    if (failures) {\n      return [new Error(failures)];\n    } else {\n      return [undefined, result];\n    }\n  };\n\n  Struct.check = function (value, branch, path) {\n    if (value === void 0) {\n      value = Struct.default();\n    }\n\n    var failures = [Struct.fail({\n      value: value,\n      branch: branch,\n      path: path\n    })];\n    return [failures];\n  };\n\n  Struct.fail = function (obj) {\n    return _objectSpread2(_objectSpread2({}, obj), {}, {\n      type: 'type' in obj ? obj.type : Struct.type\n    });\n  };\n\n  return Struct;\n};\n\nvar createArray = function createArray(schema, defaults, struct) {\n  invariant(Array.isArray(schema) && schema.length === 1, \"Array structs must be defined as an array with one element, but you passed: \" + schema);\n  var Element = struct(schema[0], undefined);\n  var Struct = createStruct({\n    kind: 'array',\n    type: Element.type + \"[]\",\n    defaults: defaults,\n    struct: struct\n  });\n\n  Struct.check = function (value, branch, path) {\n    if (value === void 0) {\n      value = Struct.default();\n    }\n\n    if (!Array.isArray(value)) {\n      return [[Struct.fail({\n        value: value,\n        branch: branch,\n        path: path\n      })]];\n    }\n\n    var result = [];\n    var failures = [];\n\n    for (var i = 0; i < value.length; i++) {\n      var v = value[i];\n\n      var _Element$check = Element.check(v, branch.concat(v), path.concat(i)),\n          efs = _Element$check[0],\n          er = _Element$check[1];\n\n      if (efs) {\n        failures.push.apply(failures, efs);\n        continue;\n      }\n\n      result[i] = er;\n    }\n\n    return failures.length ? [failures] : [undefined, result];\n  };\n\n  return Struct;\n};\n\nvar createDynamic = function createDynamic(schema, defaults, struct) {\n  invariant(typeof schema === 'function', \"Dynamic structs must be defined as a function, but you passed: \" + schema);\n  var Dynamic = createStruct({\n    kind: 'dynamic',\n    type: \"dynamic<\\u2026>\",\n    defaults: defaults,\n    struct: struct\n  });\n\n  Dynamic.check = function (value, branch, path) {\n    if (value === void 0) {\n      value = Dynamic.default();\n    }\n\n    var Struct = schema(value, branch, path);\n    return Struct.check(value, branch, path);\n  };\n\n  return Dynamic;\n};\n\nvar createEnum = function createEnum(schema, defaults, struct) {\n  invariant(Array.isArray(schema), \"Enum structs must be defined as an array, but you passed: \" + schema);\n\n  var validator = function validator(value) {\n    return schema.includes(value);\n  };\n\n  var Struct = struct(validator, defaults);\n  Struct.kind = 'enum';\n  Struct.type = schema.map(function (s) {\n    return typeof s === 'string' ? \"\\\"\" + s + \"\\\"\" : \"\" + s;\n  }).join(' | ');\n  return Struct;\n};\n\nvar createFunction = function createFunction(schema, defaults, struct) {\n  var Struct = createStruct({\n    kind: 'function',\n    type: \"function<\\u2026>\",\n    defaults: defaults,\n    struct: struct\n  });\n\n  Struct.check = function (value, branch, path) {\n    if (value === void 0) {\n      value = Struct.default();\n    }\n\n    var result = schema(value, branch, path);\n\n    if (result === true) {\n      return [undefined, value];\n    }\n\n    var failures = [];\n\n    if (result === false) {\n      failures.push(Struct.fail({\n        value: value,\n        branch: branch,\n        path: path\n      }));\n    } else if (Array.isArray(result) && result.length > 0) {\n      for (var _iterator = _createForOfIteratorHelperLoose(result), _step; !(_step = _iterator()).done;) {\n        var r = _step.value;\n        failures.push(Struct.fail(_objectSpread2({\n          value: value,\n          branch: branch,\n          path: path\n        }, r)));\n      }\n    } else if (typeof result === 'object') {\n      failures.push(Struct.fail(_objectSpread2({\n        value: value,\n        branch: branch,\n        path: path\n      }, result)));\n    } else {\n      invariant(false, \"Validator functions must return a boolean, a failure object, or an array of failure objects, but you passed: \" + result);\n    }\n\n    return [failures];\n  };\n\n  return Struct;\n};\n\nvar createInstance = function createInstance(schema, defaults, struct) {\n  invariant(typeof schema === 'function', \"Instance structs must be defined as a function, but you passed: \" + schema);\n\n  var validator = function validator(value) {\n    return value instanceof schema;\n  };\n\n  var Struct = struct(validator, defaults);\n  Struct.kind = 'instance';\n  Struct.type = \"instance<\" + schema.name + \">\";\n  return Struct;\n};\n\nvar createInterface = function createInterface(schema, defaults, struct) {\n  invariant(typeof schema === 'object', \"Interface structs must be defined as an object, but you passed: \" + schema);\n  var Props = {};\n\n  for (var key in schema) {\n    Props[key] = struct(schema[key]);\n  }\n\n  var Struct = createStruct({\n    kind: 'interface',\n    type: \"interface<{\" + Object.keys(schema).join() + \"}>\",\n    defaults: defaults,\n    struct: struct\n  });\n\n  Struct.check = function (value, branch, path) {\n    if (value === void 0) {\n      value = Struct.default();\n    }\n\n    if (typeof value !== 'object' && typeof value !== 'function') {\n      return [[Struct.fail({\n        value: value,\n        branch: branch,\n        path: path\n      })]];\n    }\n\n    var failures = [];\n\n    for (var k in Props) {\n      var Prop = Props[k];\n      var v = value[k];\n\n      var _Prop$check = Prop.check(v, branch.concat(v), path.concat(k)),\n          pfs = _Prop$check[0];\n\n      if (pfs) {\n        failures.push.apply(failures, pfs);\n      }\n    }\n\n    return failures.length ? [failures] : [undefined, value];\n  };\n\n  return Struct;\n};\n\nvar createIntersection = function createIntersection(schema, defaults, struct) {\n  invariant(Array.isArray(schema) && schema.length !== 0, \"Intersection structs must be defined as a non-empty array, but you passed: \" + schema);\n  var Structs = schema.map(function (sch) {\n    return struct(sch);\n  });\n  var type = Structs.map(function (s) {\n    return s.type;\n  }).join(' & ');\n  var Struct = createStruct({\n    kind: 'intersection',\n    type: type,\n    defaults: defaults,\n    struct: struct\n  });\n\n  Struct.check = function (value, branch, path) {\n    if (value === void 0) {\n      value = Struct.default();\n    }\n\n    var result = value;\n\n    for (var _iterator = _createForOfIteratorHelperLoose(Structs), _step; !(_step = _iterator()).done;) {\n      var _struct = _step.value;\n\n      var _struct$check = _struct.check(value, branch, path),\n          fs = _struct$check[0],\n          v = _struct$check[1];\n\n      if (fs) {\n        return [[Struct.fail({\n          value: value,\n          branch: branch,\n          path: path\n        })]];\n      } else {\n        result = v;\n      }\n    }\n\n    return [undefined, result];\n  };\n\n  return Struct;\n};\n\nvar createLazy = function createLazy(schema, defaults, struct) {\n  invariant(typeof schema === 'function', \"Lazy structs must be defined as a function, but you passed: \" + schema);\n  var Lazy = createStruct({\n    kind: 'lazy',\n    type: \"lazy<\\u2026>\",\n    defaults: defaults,\n    struct: struct\n  });\n\n  Lazy.check = function () {\n    Object.assign(Lazy, schema());\n    return Lazy.check.apply(Lazy, arguments);\n  };\n\n  return Lazy;\n};\n\nvar createSize = function createSize(schema, defaults, struct) {\n  invariant(Array.isArray(schema) && schema.length === 2 && schema.every(function (n) {\n    return typeof n === 'number';\n  }), \"Size structs must be defined as an array with two number elements, but you passed: \" + schema);\n  var min = schema[0],\n      max = schema[1];\n\n  var validator = function validator(value) {\n    return value != null && typeof value.length === 'number' && value.length >= min && value.length <= max;\n  };\n\n  var Struct = struct(validator, defaults);\n  Struct.kind = 'size';\n  Struct.type = \"size<\" + min + \",\" + max + \">\";\n  return Struct;\n};\n\nvar createLiteral = function createLiteral(schema, defaults, struct) {\n  var validator = function validator(value) {\n    return value === schema;\n  };\n\n  var Struct = struct(validator, defaults);\n  Struct.kind = 'literal';\n  Struct.type = typeof schema === 'string' ? \"\\\"\" + schema + \"\\\"\" : \"\" + schema;\n  return Struct;\n};\n\nvar createObject = function createObject(schema, defaults, struct) {\n  invariant(typeof schema === 'object', \"Object structs must be defined as an object, but you passed: \" + schema);\n  var Props = {};\n\n  for (var key in schema) {\n    Props[key] = struct(schema[key]);\n  }\n\n  var Struct = createStruct({\n    kind: 'object',\n    type: \"{\" + Object.keys(schema).join() + \"}\",\n    defaults: defaults,\n    struct: struct\n  });\n\n  Struct.check = function (value, branch, path) {\n    if (value === void 0) {\n      value = Struct.default();\n    }\n\n    var d = Struct.default();\n\n    if (value === undefined) {\n      value = d;\n    }\n\n    if (kindOf(value) !== 'object') {\n      return [[Struct.fail({\n        value: value,\n        branch: branch,\n        path: path\n      })]];\n    }\n\n    var result = {};\n    var failures = [];\n    var keys = new Set(Object.keys(Props).concat(Object.keys(value)));\n\n    for (var _iterator = _createForOfIteratorHelperLoose(keys), _step; !(_step = _iterator()).done;) {\n      var k = _step.value;\n      var v = value[k];\n      var p = path.concat(k);\n      var b = branch.concat(v);\n      var Prop = Props[k];\n\n      if (v === undefined && d != null && k in d) {\n        v = typeof d[k] === 'function' ? d[k](value, branch, path) : d[k];\n      }\n\n      if (!(k in Props)) {\n        failures.push(Struct.fail({\n          type: undefined,\n          value: v,\n          path: p,\n          branch: value\n        }));\n        continue;\n      }\n\n      var _Prop$check = Prop.check(v, b, p),\n          pfs = _Prop$check[0],\n          pr = _Prop$check[1];\n\n      if (pfs) {\n        failures.push.apply(failures, pfs);\n      } else if (pr !== undefined && k in Props) {\n        result[k] = pr;\n      }\n    }\n\n    return failures.length ? [failures] : [undefined, result];\n  };\n\n  return Struct;\n};\n\nvar createPartial = function createPartial(schema, defaults, struct) {\n  invariant(typeof schema === 'object', \"Partial structs must be defined as an object, but you passed: \" + schema);\n  var Props = {};\n\n  for (var key in schema) {\n    Props[key] = struct.union([schema[key], 'undefined']);\n  }\n\n  var Struct = createStruct({\n    kind: 'object',\n    type: \"{\" + Object.keys(schema).join() + \"}\",\n    defaults: defaults,\n    struct: struct\n  });\n\n  Struct.check = function (value, branch, path) {\n    if (value === void 0) {\n      value = Struct.default();\n    }\n\n    var d = Struct.default();\n\n    if (value === undefined) {\n      value = d;\n    }\n\n    if (kindOf(value) !== 'object') {\n      return [[Struct.fail({\n        value: value,\n        branch: branch,\n        path: path\n      })]];\n    }\n\n    var result = {};\n    var failures = [];\n\n    for (var _iterator = _createForOfIteratorHelperLoose(value), _step; !(_step = _iterator()).done;) {\n      var k = _step.value;\n      var v = value[k];\n      var p = path.concat(k);\n      var b = branch.concat(v);\n      var Prop = Props[k];\n\n      if (v === undefined && d != null && k in d) {\n        v = typeof d[k] === 'function' ? d[k](value, branch, path) : d[k];\n      }\n\n      if (!(k in Props)) {\n        failures.push(Struct.fail({\n          type: undefined,\n          value: v,\n          path: p,\n          branch: value\n        }));\n        continue;\n      }\n\n      var _Prop$check = Prop.check(v, b, p),\n          pfs = _Prop$check[0],\n          pr = _Prop$check[1];\n\n      if (pfs) {\n        failures.push.apply(failures, pfs);\n      } else if (pr !== undefined && k in Props) {\n        result[k] = pr;\n      }\n    }\n\n    return failures.length ? [failures] : [undefined, result];\n  };\n\n  return Struct;\n};\n\nvar createPick = function createPick(schema, defaults, struct) {\n  invariant(typeof schema === 'object', \"Pick structs must be defined as an object, but you passed: \" + schema);\n  var Props = {};\n\n  for (var key in schema) {\n    Props[key] = struct(schema[key]);\n  }\n\n  var Struct = createStruct({\n    kind: 'pick',\n    type: \"pick<{\" + Object.keys(schema).join() + \"}>\",\n    defaults: defaults,\n    struct: struct\n  });\n\n  Struct.check = function (value, branch, path) {\n    if (value === void 0) {\n      value = Struct.default();\n    }\n\n    var d = Struct.default();\n\n    if (value === undefined) {\n      value = d;\n    }\n\n    if (kindOf(value) !== 'object') {\n      return [[Struct.fail({\n        value: value,\n        branch: branch,\n        path: path\n      })]];\n    }\n\n    var result = {};\n    var failures = [];\n\n    for (var k in Props) {\n      var v = value[k];\n      var p = path.concat(k);\n      var b = branch.concat(v);\n      var Prop = Props[k];\n\n      if (v === undefined && d != null && k in d) {\n        v = typeof d[k] === 'function' ? d[k](value, branch, path) : d[k];\n      }\n\n      var _Prop$check = Prop.check(v, b, p),\n          pfs = _Prop$check[0],\n          pr = _Prop$check[1];\n\n      if (pfs) {\n        failures.push.apply(failures, pfs);\n      } else if (pr !== undefined && k in Props) {\n        result[k] = pr;\n      }\n    }\n\n    return failures.length ? [failures] : [undefined, result];\n  };\n\n  return Struct;\n};\n\nvar createRecord = function createRecord(schema, defaults, struct) {\n  invariant(Array.isArray(schema) && schema.length === 2, \"Record structs must be defined as an array with two elements, but you passed: \" + schema);\n  var Key = struct(schema[0]);\n  var Value = struct(schema[1]);\n  var Struct = createStruct({\n    kind: 'record',\n    type: \"record<\" + Key.type + \",\" + Value.type + \">\",\n    defaults: defaults,\n    struct: struct\n  });\n\n  Struct.check = function (value, branch, path) {\n    // Record structs have a special default handling behavior, where the defaults\n    // are for the entries themselves, not for the entire value. So we can't use\n    // JavaScript's built-in default handling here.\n    var defs = Struct.default();\n    value = defs ? _objectSpread2(_objectSpread2({}, defs), value) : value;\n\n    if (kindOf(value) !== 'object') {\n      return [[Struct.fail({\n        value: value,\n        branch: branch,\n        path: path\n      })]];\n    }\n\n    var result = {};\n    var failures = [];\n\n    for (var k in value) {\n      var v = value[k];\n      var p = path.concat(k);\n      var b = branch.concat(v);\n\n      var _Key$check = Key.check(k, b, p),\n          kfs = _Key$check[0],\n          kr = _Key$check[1];\n\n      if (kfs) {\n        failures.push.apply(failures, kfs);\n      } else {\n        var _Value$check = Value.check(v, b, p),\n            vfs = _Value$check[0],\n            vr = _Value$check[1];\n\n        if (vfs) {\n          failures.push.apply(failures, vfs);\n        } else {\n          result[kr] = vr;\n        }\n      }\n    }\n\n    return failures.length ? [failures] : [undefined, result];\n  };\n\n  return Struct;\n};\n\nvar createScalar = function createScalar(schema, defaults, struct) {\n  invariant(typeof schema === 'string', \"Scalar structs must be defined as a string, but you passed: \" + schema);\n  var Types = struct.Types;\n  invariant(schema in Types, \"No struct validator function found for type \\\"\" + schema + \"\\\".\");\n  var Struct = struct(Types[schema], defaults);\n  Struct.kind = 'scalar';\n  Struct.type = schema;\n  return Struct;\n};\n\nvar createShorthand = function createShorthand(schema, defaults, struct) {\n  if (isStruct(schema)) {\n    return schema;\n  }\n\n  if (Array.isArray(schema)) {\n    if (schema.length === 1) {\n      var _schema = schema,\n          first = _schema[0];\n      return struct.array([first], defaults);\n    } else if (schema.length > 1) {\n      return struct.tuple(schema, defaults);\n    }\n  }\n\n  if (typeof schema === 'function') {\n    return struct.function(schema, defaults);\n  }\n\n  if (typeof schema === 'object') {\n    return struct.object(schema, defaults);\n  }\n\n  if (typeof schema === 'string') {\n    var optional = false;\n    var Struct;\n\n    if (schema.endsWith('?')) {\n      optional = true;\n      schema = schema.slice(0, -1);\n    }\n\n    if (schema.includes('|')) {\n      var scalars = schema.split(/\\s*\\|\\s*/g);\n      Struct = struct.union(scalars, defaults);\n    } else if (schema.includes('&')) {\n      var _scalars = schema.split(/\\s*&\\s*/g);\n\n      Struct = struct.intersection(_scalars, defaults);\n    } else {\n      Struct = struct.scalar(schema, defaults);\n    }\n\n    if (optional) {\n      Struct = struct.union([Struct, 'undefined'], undefined);\n    }\n\n    return Struct;\n  }\n\n  throw new Error(\"A schema definition must be an object, array, string or function, but you passed: \" + schema);\n};\n\nvar createTuple = function createTuple(schema, defaults, struct) {\n  invariant(Array.isArray(schema), \"Tuple structs must be defined as an array, but you passed: \" + schema);\n  var Elements = schema.map(function (s) {\n    return struct(s);\n  });\n  var Struct = createStruct({\n    kind: 'tuple',\n    type: \"[\" + Elements.map(function (S) {\n      return S.type;\n    }).join() + \"]\",\n    defaults: defaults,\n    struct: struct\n  });\n\n  Struct.check = function (value, branch, path) {\n    if (value === void 0) {\n      value = Struct.default();\n    }\n\n    if (!Array.isArray(value)) {\n      return [[Struct.fail({\n        value: value,\n        branch: branch,\n        path: path\n      })]];\n    }\n\n    var result = [];\n    var failures = [];\n    var length = Math.max(value.length, Elements.length);\n\n    for (var i = 0; i < length; i++) {\n      var Element = Elements[i];\n      var v = value[i];\n      var p = path.concat(i);\n      var b = branch.concat(v);\n\n      if (!Element) {\n        failures.push(Struct.fail({\n          type: undefined,\n          value: v,\n          path: p,\n          branch: b\n        }));\n      } else {\n        var _Element$check = Element.check(v, b, p),\n            efs = _Element$check[0],\n            er = _Element$check[1];\n\n        if (efs) {\n          failures.push.apply(failures, efs);\n        } else {\n          result[i] = er;\n        }\n      }\n    }\n\n    return failures.length ? [failures] : [undefined, result];\n  };\n\n  return Struct;\n};\n\nvar createUnion = function createUnion(schema, defaults, struct) {\n  invariant(Array.isArray(schema) && schema.length !== 0, \"Union structs must be defined as a non-empty array, but you passed: \" + schema);\n  var Structs = schema.map(function (sch) {\n    return struct(sch);\n  });\n  var type = Structs.map(function (s) {\n    return s.type;\n  }).join(' | ');\n  var Struct = createStruct({\n    kind: 'union',\n    type: type,\n    defaults: defaults,\n    struct: struct\n  });\n\n  Struct.check = function (value, branch, path) {\n    if (value === void 0) {\n      value = Struct.default();\n    }\n\n    for (var _iterator = _createForOfIteratorHelperLoose(Structs), _step; !(_step = _iterator()).done;) {\n      var _struct = _step.value;\n\n      var _struct$check = _struct.check(value, branch, path),\n          fs = _struct$check[0],\n          v = _struct$check[1];\n\n      if (!fs) {\n        return [undefined, v];\n      }\n    }\n\n    return [[Struct.fail({\n      value: value,\n      branch: branch,\n      path: path\n    })]];\n  };\n\n  return Struct;\n};\n\n/**\r\n * Create a struct singleton with settings that include your own domain-specific\r\n * data `types`, and an optional custom `Error` class.\r\n */\n\nvar superstruct = function superstruct(settings) {\n  if (settings === void 0) {\n    settings = {};\n  }\n\n  var struct = function struct(schema, defaults) {\n    return createShorthand(schema, defaults, struct);\n  };\n\n  struct.array = function (schema, defaults) {\n    return createArray(schema, defaults, struct);\n  };\n\n  struct.dynamic = function (schema, defaults) {\n    return createDynamic(schema, defaults, struct);\n  };\n\n  struct.enum = function (schema, defaults) {\n    return createEnum(schema, defaults, struct);\n  };\n\n  struct.function = function (schema, defaults) {\n    return createFunction(schema, defaults, struct);\n  };\n\n  struct.instance = function (schema, defaults) {\n    return createInstance(schema, defaults, struct);\n  };\n\n  struct.interface = function (schema, defaults) {\n    return createInterface(schema, defaults, struct);\n  };\n\n  struct.intersection = function (schema, defaults) {\n    return createIntersection(schema, defaults, struct);\n  };\n\n  struct.lazy = function (schema, defaults) {\n    return createLazy(schema, defaults, struct);\n  };\n\n  struct.literal = function (schema, defaults) {\n    return createLiteral(schema, defaults, struct);\n  };\n\n  struct.object = function (schema, defaults) {\n    return createObject(schema, defaults, struct);\n  };\n\n  struct.optional = function (schema, defaults) {\n    return createUnion([schema, 'undefined'], defaults, struct);\n  };\n\n  struct.partial = function (schema, defaults) {\n    return createPartial(schema, defaults, struct);\n  };\n\n  struct.pick = function (schema, defaults) {\n    return createPick(schema, defaults, struct);\n  };\n\n  struct.record = function (schema, defaults) {\n    return createRecord(schema, defaults, struct);\n  };\n\n  struct.scalar = function (schema, defaults) {\n    return createScalar(schema, defaults, struct);\n  };\n\n  struct.size = function (schema, defaults) {\n    return createSize(schema, defaults, struct);\n  };\n\n  struct.tuple = function (schema, defaults) {\n    return createTuple(schema, defaults, struct);\n  };\n\n  struct.union = function (schema, defaults) {\n    return createUnion(schema, defaults, struct);\n  };\n\n  struct.Error = settings.error || StructError;\n  struct.Types = _objectSpread2(_objectSpread2({}, Types), settings.types);\n  return struct;\n};\n\n/**\r\n * The singleton instance of Superstruct that is exported by default, configured\r\n * with types for all of the JavaScript built-in data types.\r\n *\r\n * You can use it if you don't need any custom types. However, if you do want to\r\n * define custom types, use the [[superstruct]] factory to configure your own\r\n * [[Superstruct]] instance.\r\n */\n\nvar struct = superstruct();\n\nexports.StructError = StructError;\nexports.Types = Types;\nexports.isStruct = isStruct;\nexports.struct = struct;\nexports.superstruct = superstruct;\n//# sourceMappingURL=index.cjs.map\n","import axios from 'axios'\nimport debug from 'debug'\nimport { defaultHeaders } from '../utils/http'\nimport { struct, minAPIParameterDefintion, minAPIParameterValidator } from '../utils/validator'\n\nconst log = debug('starling:account-service')\n\n/**\n * Service to interact with a customer's account\n */\nclass Account {\n  /**\n   * Creates an instance of the account client\n   * @param {Object} options - application config\n   */\n  constructor (options) {\n    this.options = options\n  }\n\n  /**\n   * Get an account holder's bank accounts\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @return {Promise} - the http request promise\n   */\n  getAccounts (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/accounts`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get an account's bank identifiers\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @return {Promise} - the http request promise\n   */\n  getAccountIdentifiers (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getAccountIdentifiersParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid } = parameters\n\n    const url = `${apiUrl}/api/v2/accounts/${accountUid}/identifiers`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get an account's balance\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @return {Promise} - the http request promise\n   */\n  getAccountBalance (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getAccountBalanceParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid } = parameters\n\n    const url = `${apiUrl}/api/v2/accounts/${accountUid}/balance`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get whether there are available funds for a requested amount\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @param {number} parameters.targetAmountInMinorUnits - the target amount in minor units\n   * @return {Promise} - the http request promise\n   */\n  getConfirmationOfFunds (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getConfirmationOfFundsParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, targetAmountInMinorUnits } = parameters\n\n    const url = `${apiUrl}/api/v2/accounts/${accountUid}/confirmation-of-funds`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken),\n      params: {\n        targetAmountInMinorUnits\n      }\n    })\n  }\n\n  /**\n   * Get list of statement periods which are available for an account\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @return {Promise} - the http request promise\n   */\n  getStatementPeriods (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getStatementPeriodsParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid } = parameters\n\n    const url = `${apiUrl}/api/v2/accounts/${accountUid}/statement/available-periods`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Download a statement for a given statement period\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @param {string=} parameters.yearMonth - the statement period's year month (yyyy-MM)\n   * @param {string=} parameters.format - one of 'application/pdf' or 'text/csv'\n   * @param {string=} parameters.responseType - the axios responseType for the request\n   * @return {Promise} - the http request promise\n   */\n  getStatementForPeriod (parameters) {\n    parameters = Object.assign({}, { yearMonth: new Date().toISOString().slice(0, 7), format: 'text/csv', responseType: 'stream' }, this.options, parameters)\n    getStatementForPeriodParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, format, yearMonth, responseType } = parameters\n\n    const url = `${apiUrl}/api/v2/accounts/${accountUid}/statement/download`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: {\n        ...defaultHeaders(accessToken),\n        Accept: format\n      },\n      params: {\n        yearMonth\n      },\n      responseType\n    })\n  }\n\n  /**\n   * Download a statement for a given date range\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @param {string} parameters.start - the beginning of the statement date range (yyyy-MM-dd)\n   * @param {string=} parameters.end - the end of the statement date range (yyyy-MM-dd)\n   * @param {string=} parameters.format - one of 'application/pdf' or 'text/csv'\n   * @param {string=} parameters.responseType - the axios responseType for the request\n   * @return {Promise} - the http request promise\n   */\n  getStatementForRange (parameters) {\n    parameters = Object.assign({}, { format: 'text/csv', responseType: 'stream' }, this.options, parameters)\n    getStatementForRangeParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, start, end, format, responseType } = parameters\n\n    const url = `${apiUrl}/api/v2/accounts/${accountUid}/statement/downloadForDateRange`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: {\n        ...defaultHeaders(accessToken),\n        Accept: format\n      },\n      params: {\n        start,\n        end\n      },\n      responseType\n    })\n  }\n}\n\nconst getAccountIdentifiersParameterValidator = struct.interface({ ...minAPIParameterDefintion, accountUid: 'uuid' })\n\nconst getAccountBalanceParameterValidator = struct.interface({ ...minAPIParameterDefintion, accountUid: 'uuid' })\n\nconst getConfirmationOfFundsParameterValidator = struct.interface({ ...minAPIParameterDefintion, accountUid: 'uuid', targetAmountInMinorUnits: 'number' })\n\nconst getStatementPeriodsParameterValidator = struct.interface({ ...minAPIParameterDefintion, accountUid: 'uuid' })\n\nconst getStatementForPeriodParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  yearMonth: 'yearMonth',\n  format: struct.enum(['application/pdf', 'text/csv']),\n  responseType: 'string'\n})\n\nconst getStatementForRangeParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  start: 'date',\n  end: 'date?',\n  format: struct.enum(['application/pdf', 'text/csv']),\n  responseType: 'string'\n})\n\nmodule.exports = Account\n","import axios from 'axios'\nimport debug from 'debug'\nimport { defaultHeaders } from '../utils/http'\nimport { minAPIParameterValidator } from '../utils/validator'\n\nconst log = debug('starling:account-holder-service')\n\n/**\n * Service to interact with an account holder\n */\nclass AccountHolder {\n  /**\n   * Creates an instance of the account holder client\n   * @param {Object} options - application config\n   */\n  constructor (options) {\n    this.options = options\n  }\n\n  /**\n   * Get basic information about the account holder\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @return {Promise} - the http request promise\n   */\n  getAccountHolder (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/account-holder`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get the name of the account holder\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @return {Promise} - the http request promise\n   */\n  getAccountHolderName (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/account-holder/name`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get an individual account holder's details\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @return {Promise} - the http request promise\n   */\n  getAccountHolderIndividual (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/account-holder/individual`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get a joint account holder's details\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @return {Promise} - the http request promise\n   */\n  getAccountHolderJoint (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/account-holder/joint`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get a business account holder's details\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @return {Promise} - the http request promise\n   */\n  getAccountHolderBusiness (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/account-holder/business`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get a business account holder's registered address\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @return {Promise} - the http request promise\n   */\n  getAccountHolderBusinessRegisteredAddress (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/account-holder/business/registered-address`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get a business account holder's correspondence address\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @return {Promise} - the http request promise\n   */\n  getAccountHolderBusinessCorrespondenceAddress (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/account-holder/business/correspondence-address`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n}\n\nmodule.exports = AccountHolder\n","import axios from 'axios'\nimport debug from 'debug'\nimport { defaultHeaders } from '../utils/http'\nimport { minAPIParameterValidator } from '../utils/validator'\n\nconst log = debug('starling:address-service')\n\n/**\n * Service to interact with a customer address\n */\nclass Address {\n  /**\n   * Creates an instance of the address client\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options\n  }\n\n  /**\n   * Retrieves a customer's address\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token.\n   * @return {Promise} - the http request promise\n   */\n  getAddresses (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/addresses`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n}\n\nmodule.exports = Address\n","import axios from 'axios'\nimport debug from 'debug'\nimport { defaultHeaders, payloadHeaders } from '../utils/http'\nimport { struct, minAPIParameterDefintion, minAPIParameterValidator } from '../utils/validator'\n\nconst log = debug('starling:card-service')\n\n/**\n * Service to interact with a customer card\n */\nclass Card {\n  /**\n   * Creates an instance of the client's card\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options\n  }\n\n  /**\n   * Get all the cards for an account holder\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @return {Promise} - the http request promise\n   */\n  getCards (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/cards`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Update card lock\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.cardUid - the card uid\n   * @param {boolean} parameters.enabled - Whether the card should be locked. Set to false to lock, true to unlock.\n   * @return {Promise} - the http request promise\n   */\n  updateCardLock (parameters) {\n    return this.updateCardControl({ ...parameters, endpoint: 'enabled' })\n  }\n\n  /**\n   * Update ATM withdrawal control\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.cardUid - the card uid\n   * @param {boolean} parameters.enabled - Whether ATM withdrawals should be allowed. Set to false to block, true to allow.\n   * @return {Promise} - the http request promise\n   */\n  updateCardATMControl (parameters) {\n    return this.updateCardControl({ ...parameters, endpoint: 'atm-enabled' })\n  }\n\n  /**\n   * Update online payments control\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.cardUid - the card uid\n   * @param {boolean} parameters.enabled - Whether online payments should be allowed. Set to false to block, true to allow.\n   * @return {Promise} - the http request promise\n   */\n  updateCardOnlineControl (parameters) {\n    return this.updateCardControl({ ...parameters, endpoint: 'online-enabled' })\n  }\n\n  /**\n   * Update mobile wallet payments control\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.cardUid - the card uid\n   * @param {boolean} parameters.enabled - Whether mobile wallet payments should be allowed. Set to false to block, true to allow.\n   * @return {Promise} - the http request promise\n   */\n  updateCardMobileWalletControl (parameters) {\n    return this.updateCardControl({ ...parameters, endpoint: 'mobile-wallet-enabled' })\n  }\n\n  /**\n   * Update gambling payments control\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.cardUid - the card uid\n   * @param {boolean} parameters.enabled - Whether gambling payments should be allowed. Set to false to block, true to allow.\n   * @return {Promise} - the http request promise\n   */\n  updateCardGamblingControl (parameters) {\n    return this.updateCardControl({ ...parameters, endpoint: 'gambling-enabled' })\n  }\n\n  /**\n   * Update card present payments (contactless and chip and pin) control\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.cardUid - the card uid\n   * @param {boolean} parameters.enabled - Whether card present payments (contactless and chip and pin) should be allowed. Set to false to block, true to allow.\n   * @return {Promise} - the http request promise\n   */\n  updateCardPresentControl (parameters) {\n    return this.updateCardControl({ ...parameters, endpoint: 'pos-enabled' })\n  }\n\n  /**\n   * Update magstripe payments control\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.cardUid - the card uid\n   * @param {boolean} parameters.enabled - Whether magstripe payments should be allowed. Set to false to block, true to allow.\n   * @return {Promise} - the http request promise\n   */\n  updateCardMagstripeControl (parameters) {\n    return this.updateCardControl({ ...parameters, endpoint: 'mag-stripe-enabled' })\n  }\n\n  /**\n   * Update a card control\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.cardUid - the card uid\n   * @param {boolean} parameters.enabled - Whether the control should be should be locked. Set to false to lock, true to unlock.\n   * @param {string} parameters.endpoint - the last segment of the endpoint name\n   * @return {Promise} - the http request promise\n   */\n  updateCardControl (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    updateCardControlParameterValidator(parameters)\n    const { apiUrl, accessToken, cardUid, enabled, endpoint } = parameters\n\n    const url = `${apiUrl}/api/v2/cards/${cardUid}/controls/${endpoint}`\n    log(`PUT ${url}`)\n\n    return axios({\n      method: 'PUT',\n      url,\n      headers: payloadHeaders(accessToken),\n      data: JSON.stringify({ enabled })\n    })\n  }\n}\n\nconst updateCardControlParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  cardUid: 'uuid',\n  enabled: 'boolean'\n})\n\nmodule.exports = Card\n","import axios from 'axios'\nimport debug from 'debug'\nimport { defaultHeaders } from '../utils/http'\nimport { struct, minAPIParameterDefintion } from '../utils/validator'\n\nconst log = debug('starling:feed-item-service')\n\n/**\n * Service to interact with a customer's feed items\n */\nclass FeedItem {\n  /**\n   * Create a new feed item service\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options\n  }\n\n  /**\n   * Get feed items created between two timestamps\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @param {string} parameters.categoryUid - the category uid\n   * @param {string} parameters.minTransactionTimestamp - timestamp e.g. '2019-10-25T12:34:56.789Z'\n   * @param {string} parameters.maxTransactionTimestamp - timestamp e.g. '2019-10-26T12:34:56.789Z'\n   * @return {Promise} - the http request promise\n   */\n  getFeedItemsBetween (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getFeedItemsBetweenParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, categoryUid, minTransactionTimestamp, maxTransactionTimestamp } = parameters\n\n    const url = `${apiUrl}/api/v2/feed/account/${accountUid}/category/${categoryUid}/transactions-between`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      params: {\n        minTransactionTimestamp,\n        maxTransactionTimestamp\n      },\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get a feed item\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @param {string} parameters.categoryUid - the category uid\n   * @param {string} parameters.feedItemUid - the feed item uid\n   * @return {Promise} - the http request promise\n   */\n  getFeedItem (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getFeedItemParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, categoryUid, feedItemUid } = parameters\n\n    const url = `${apiUrl}/api/v2/feed/account/${accountUid}/category/${categoryUid}/${feedItemUid}`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get feed items created or updated since a given timestamp\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @param {string} parameters.categoryUid - the category uid\n   * @param {string} parameters.changesSince - timestamp e.g. '2019-10-25T12:34:56.789Z'\n   * @return {Promise} - the http request promise\n   */\n  getFeedItemsChangedSince (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getFeedItemsChangedSinceParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, categoryUid, changesSince } = parameters\n\n    const url = `${apiUrl}/api/v2/feed/account/${accountUid}/category/${categoryUid}`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      params: {\n        changesSince\n      },\n      headers: defaultHeaders(accessToken)\n    })\n  }\n}\n\nconst getFeedItemsBetweenParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  categoryUid: 'uuid',\n  minTransactionTimestamp: 'timestamp',\n  maxTransactionTimestamp: 'timestamp'\n})\n\nconst getFeedItemParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  categoryUid: 'uuid',\n  feedItemUid: 'uuid'\n})\n\nconst getFeedItemsChangedSinceParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  categoryUid: 'uuid',\n  changesSince: 'timestamp'\n})\n\nmodule.exports = FeedItem\n","import axios from 'axios'\nimport debug from 'debug'\nimport { defaultHeaders } from '../utils/http'\nimport { minAPIParameterValidator } from '../utils/validator'\n\nconst log = debug('starling:identity-service')\n\n/**\n * Service to interact with the API User identities endpoints\n */\nclass Identity {\n  /**\n   * Creates an instance of the identity client\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options\n  }\n\n  /**\n   * Get the current token identity\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token.\n   * @return {Promise} - the http request promise\n   */\n  getTokenIdentity (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/identity/token`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get the authorising individual's identity\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token.\n   * @return {Promise} - the http request promise\n   */\n  getAuthorisingIndividual (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/identity/individual`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n}\n\nmodule.exports = Identity\n","import axios from 'axios'\nimport debug from 'debug'\nimport { defaultHeaders } from '../utils/http'\nimport { struct, minAPIParameterDefintion, minAPIParameterValidator } from '../utils/validator'\n\nconst log = debug('starling:mandate-service')\n\n/**\n * Service to interact with a customer's mandates\n */\nclass Mandate {\n  /**\n   * Create a new mandate service\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options\n  }\n\n  /**\n   * Gets a list of the customer's current direct debit mandates\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @return {Promise} - the http request promise\n   */\n  listMandates (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/direct-debit/mandates`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Gets a specific direct debit mandate\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.mandateUid - unique identifier of the mandate\n   * @return {Promise} - the http request promise\n   */\n  getMandate (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getMandateParameterValidator(parameters)\n    const { apiUrl, accessToken, mandateUid } = parameters\n\n    const url = `${apiUrl}/api/v2/direct-debit/mandates/${mandateUid}`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Deletes specific direct debit mandate\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token.\n   * @param {string} parameters.mandateUid - the unique mandate ID\n   * @return {Promise} - the http request promise\n   */\n  deleteMandate (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    deleteMandateParameterValidator(parameters)\n    const { apiUrl, accessToken, mandateUid } = parameters\n\n    const url = `${apiUrl}/api/v2/direct-debit/mandates/${mandateUid}`\n    log(`DELETE ${url}`)\n\n    return axios({\n      method: 'DELETE',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n}\n\nconst getMandateParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  mandateUid: 'uuid'\n})\n\nconst deleteMandateParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  mandateUid: 'uuid'\n})\n\nmodule.exports = Mandate\n","import axios from 'axios'\nimport debug from 'debug'\nimport { struct } from '../utils/validator'\n\nconst ACCESS_TOKEN_GRANT_TYPE = 'authorization_code'\nconst REFRESH_TOKEN_GRANT_TYPE = 'refresh_token'\n\nconst log = debug('starling:oauth-service')\n\n/**\n * Service to interact with a the oauth endpoint\n */\nclass OAuth {\n  /**\n   * Create a new oauth service\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options\n  }\n\n  /**\n   * Exchanges the authorization code for an access token\n   * @param {string} authorizationCode - the authorization code, acquired from the user agent after the user authenticates with starling\n   * @return {Promise} - the http request promise\n   */\n  getAccessToken (authorizationCode) {\n    return this.getOAuthToken({\n      queryParams: {\n        code: authorizationCode,\n        grant_type: ACCESS_TOKEN_GRANT_TYPE,\n        client_id: this.options.clientId,\n        client_secret: this.options.clientSecret,\n        redirect_uri: this.options.redirectUri\n      }\n    })\n  }\n\n  /**\n   * Exchanges the authorization code for an access token\n   * @param {string} refreshToken - the oauth refresh token, used when the access token expires to claim a new access token.\n   * @return {Promise} - the http request promise\n   */\n  refreshAccessToken (refreshToken) {\n    return this.getOAuthToken({\n      queryParams: {\n        refresh_token: refreshToken,\n        grant_type: REFRESH_TOKEN_GRANT_TYPE,\n        client_id: this.options.clientId,\n        client_secret: this.options.clientSecret\n      }\n    })\n  }\n\n  /**\n   * Gets the access token from the starling OAuth endpoint\n   * @param {string} parameters.apiUrl - the OAuth url\n   * @param {object} parameters.queryParams - the query params passed to the OAuth endpoint as per the OAuth spec\n   * @return {Promise} - the http request promise\n   */\n  getOAuthToken (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getOAuthTokenParameterValidator(parameters)\n    const { apiUrl, queryParams } = parameters\n\n    const url = `${apiUrl}/oauth/access-token`\n    log(`POST ${url} queryParams:${JSON.stringify(queryParams)}`)\n\n    return axios({\n      url,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Accept: 'application/json'\n      },\n      params: queryParams\n    })\n  }\n}\n\nconst getOAuthTokenParameterValidator = struct.interface({\n  apiUrl: 'string',\n  queryParams: struct.union([\n    struct.object({\n      client_id: 'string',\n      client_secret: 'string',\n      grant_type: struct.literal(ACCESS_TOKEN_GRANT_TYPE),\n      code: 'string',\n      redirect_uri: 'string'\n    }),\n    struct.object({\n      client_id: 'string',\n      client_secret: 'string',\n      grant_type: struct.literal(REFRESH_TOKEN_GRANT_TYPE),\n      refresh_token: 'string'\n    })\n  ])\n})\n\nmodule.exports = OAuth\n","import axios from 'axios'\nimport debug from 'debug'\nimport { defaultHeaders, payloadHeaders } from '../utils/http'\nimport { struct, minAPIParameterDefintion, minAPIParameterValidator } from '../utils/validator'\n\nconst log = debug('starling:payee-service')\n\n/**\n * Service to interact with an account holder's payees\n */\nclass Payee {\n  /**\n   * Create a new payee service\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options\n  }\n\n  /**\n   * Get an account holder's payees\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token.\n   * @return {Promise} - the http request promise\n   */\n  getPayees (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/payees`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Create a new payee\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token.\n   * @param {Object} parameters.payeeCreationRequest - the payee creation request.\n   * @return {Promise} - the http request promise\n   */\n  createPayee (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    createPayeeParameterValidator(parameters)\n    const { apiUrl, accessToken, payeeCreationRequest } = parameters\n\n    const url = `${apiUrl}/api/v2/payees`\n    log(`PUT ${url}`)\n    return axios({\n      method: 'PUT',\n      url,\n      headers: payloadHeaders(accessToken),\n      data: JSON.stringify(payeeCreationRequest)\n    })\n  }\n\n  /**\n   * Delete an account holder's payee\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token.\n   * @param {string} parameters.payeeUid - the payeeUid of the payee to be deleted.\n   * @return {Promise} - the http request promise\n   */\n  deletePayee (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    deletePayeeParameterValidator(parameters)\n    const { apiUrl, accessToken, payeeUid } = parameters\n\n    const url = `${apiUrl}/api/v2/payees/${payeeUid}`\n    log(`DELETE ${url}`)\n    return axios({\n      method: 'DELETE',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n}\n\nconst createPayeeParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  payeeCreationRequest: struct.object({\n    payeeName: 'string',\n    phoneNumber: 'string?',\n    payeeType: struct.enum(['INDIVIDUAL', 'BUSINESS']),\n    firstName: 'string?',\n    middleName: 'string?',\n    lastName: 'string?',\n    businessName: 'string?',\n    dateOfBirth: 'date?',\n    accounts: struct.optional([struct.object({\n      description: 'string',\n      defaultAccount: 'boolean',\n      countryCode: 'string',\n      accountIdentifier: 'string',\n      bankIdentifier: 'string',\n      bankIdentifierType: struct.enum(['SORT_CODE', 'SWIFT', 'IBAN', 'ABA', 'ABA_WIRE', 'ABA_ACH'])\n    })])\n  })\n})\n\nconst deletePayeeParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  payeeUid: 'uuid'\n})\n\nmodule.exports = Payee\n","import axios from 'axios'\nimport debug from 'debug'\nimport { defaultHeaders } from '../utils/http'\nimport { struct, minAPIParameterDefintion } from '../utils/validator'\n\nconst log = debug('starling:payment-service')\n\n/**\n * Service to interact with a customer's payments\n */\nclass Payment {\n  /**\n   * Create a new payment service\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options\n  }\n\n  /**\n   * Get a payment order\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.paymentOrderUid - the payment order uid\n   * @return {Promise} - the http request promise\n   */\n  getPaymentOrder (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getPaymentOrderParameterValidator(parameters)\n    const { apiUrl, accessToken, paymentOrderUid } = parameters\n\n    const url = `${apiUrl}/api/v2/payments/local/payment-order/${paymentOrderUid}`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get a payment order's payments\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.paymentOrderUid - the payment order uid\n   * @return {Promise} - the http request promise\n   */\n  getPaymentOrderPayments (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getPaymentOrderPaymentsParameterValidator(parameters)\n    const { apiUrl, accessToken, paymentOrderUid } = parameters\n\n    const url = `${apiUrl}/api/v2/payments/local/payment-order/${paymentOrderUid}/payments`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * List standing orders\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid of the account to get standing orders of\n   * @param {string} parameters.categoryUid - the category uid of the category to get standing orders of\n   * @return {Promise} - the http request promise\n   */\n  listStandingOrders (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    listStandingOrdersParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, categoryUid } = parameters\n\n    const url = `${apiUrl}/api/v2/payments/local/account/${accountUid}/category/${categoryUid}/standing-orders`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get a standing order\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid of the standing order\n   * @param {string} parameters.categoryUid - the category uid of the standing order\n   * @param {string} parameters.paymentOrderUid - the payment order uid of the standing order\n   * @return {Promise} - the http request promise\n   */\n  getStandingOrder (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getStandingOrderParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, categoryUid, paymentOrderUid } = parameters\n\n    const url = `${apiUrl}/api/v2/payments/local/account/${accountUid}/category/${categoryUid}/standing-orders/${paymentOrderUid}`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n}\n\nconst getPaymentOrderParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  paymentOrderUid: 'uuid'\n})\n\nconst getPaymentOrderPaymentsParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  paymentOrderUid: 'uuid'\n})\n\nconst listStandingOrdersParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  categoryUid: 'uuid'\n})\n\nconst getStandingOrderParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  categoryUid: 'uuid',\n  paymentOrderUid: 'uuid'\n})\n\nmodule.exports = Payment\n","import axios from 'axios'\nimport debug from 'debug'\nimport { defaultHeaders, payloadHeaders } from '../utils/http'\nimport { struct, minAPIParameterDefintion } from '../utils/validator'\n\nconst log = debug('starling:savings-goal-service')\n\n/**\n * Service to interact with a customer's savings goals\n */\nclass SavingsGoal {\n  /**\n   * Create a new savings goal service\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options\n  }\n\n  /**\n   * Get all savings goals\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @return {Promise} - the http request promise\n   */\n  getSavingsGoals (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getSavingsGoalsParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid } = parameters\n\n    const url = `${apiUrl}/api/v2/account/${accountUid}/savings-goals`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get a savings goal\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @param {string} parameters.savingsGoalUid - the savings goal's uid\n   * @return {Promise} - the http request promise\n   */\n  getSavingsGoal (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getSavingsGoalParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, savingsGoalUid } = parameters\n\n    const url = `${apiUrl}/api/v2/account/${accountUid}/savings-goals/${savingsGoalUid}`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Create a savings goal\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid of the account to create the savings goal in\n   * @param {string} parameters.name - the name of the new savings goal\n   * @param {string=} parameters.currency - ISO-4217 3 character currency code\n   * @param {number=} parameters.targetAmount - the target amount in minor units (e.g. 1234 => £12.34)\n   * @param {string=} parameters.targetCurrency - ISO-4217 3 character currency code\n   * @param {string=} parameters.base64EncodedPhoto - base64 encoded image to associate with the goal\n   * @return {Promise} - the http request promise\n   */\n  createSavingsGoal (parameters) {\n    parameters = Object.assign({}, { currency: 'GBP', targetAmount: 0, targetCurrency: 'GBP' }, this.options, parameters)\n    createSavingsGoalParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, name, currency, targetAmount, targetCurrency, base64EncodedPhoto } = parameters\n\n    const url = `${apiUrl}/api/v2/account/${accountUid}/savings-goals`\n    log(`PUT ${url}`)\n\n    return axios({\n      method: 'PUT',\n      url,\n      headers: payloadHeaders(accessToken),\n      data: JSON.stringify({\n        name,\n        currency,\n        target: {\n          minorUnits: targetAmount,\n          currency: targetCurrency\n        },\n        base64EncodedPhoto\n      })\n    })\n  }\n\n  /**\n   * Delete a savings goal\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @param {string} parameters.savingsGoalUid - the savings goal's uid\n   * @return {Promise} - the http request promise\n   */\n  deleteSavingsGoal (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    deleteSavingsGoalParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, savingsGoalUid } = parameters\n\n    const url = `${apiUrl}/api/v2/account/${accountUid}/savings-goals/${savingsGoalUid}`\n    log(`DELETE ${url}`)\n\n    return axios({\n      method: 'DELETE',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Add money to a savings goal\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @param {string} parameters.savingsGoalUid - the savings goal's uid\n   * @param {string} parameters.transferUid - a transaction ID for this transaction\n   * @param {number} parameters.amount - amount in the minor units of the given currency; eg pence in GBP, cents in EUR\n   * @param {string=} parameters.currency - ISO-4217 3 character currency code\n   * @return {Promise} - the http request promise\n   */\n  addMoneyToSavingsGoal (parameters) {\n    parameters = Object.assign({}, { currency: 'GBP' }, this.options, parameters)\n    addMoneyToSavingsGoalParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, savingsGoalUid, transferUid, amount, currency } = parameters\n\n    const url = `${apiUrl}/api/v2/account/${accountUid}/savings-goals/${savingsGoalUid}/add-money/${transferUid}`\n    log(`PUT ${url}`)\n\n    return axios({\n      method: 'PUT',\n      url,\n      headers: payloadHeaders(accessToken),\n      data: JSON.stringify({\n        amount: {\n          currency,\n          minorUnits: amount\n        }\n      })\n    })\n  }\n\n  /**\n   * Withdraw money from a savings goal\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @param {string} parameters.savingsGoalUid - the savings goal's uid\n   * @param {string} parameters.transferUid - a transaction ID for this transaction\n   * @param {number} parameters.amount - amount in the minor units of the given currency; eg pence in GBP, cents in EUR\n   * @param {string=} parameters.currency - ISO-4217 3 character currency code\n   * @return {Promise} - the http request promise\n   */\n  withdrawMoneyFromSavingsGoal (parameters) {\n    parameters = Object.assign({}, { currency: 'GBP' }, this.options, parameters)\n    withdrawMoneyFromSavingsGoalParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, savingsGoalUid, transferUid, amount, currency } = parameters\n\n    const url = `${apiUrl}/api/v2/account/${accountUid}/savings-goals/${savingsGoalUid}/withdraw-money/${transferUid}`\n    log(`PUT ${url}`)\n\n    return axios({\n      method: 'PUT',\n      url,\n      headers: payloadHeaders(accessToken),\n      data: JSON.stringify({\n        amount: {\n          currency,\n          minorUnits: amount\n        }\n      })\n    })\n  }\n}\n\nconst getSavingsGoalsParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid'\n})\n\nconst getSavingsGoalParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  savingsGoalUid: 'uuid'\n})\n\nconst deleteSavingsGoalParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  savingsGoalUid: 'uuid'\n})\n\nconst createSavingsGoalParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  name: 'string',\n  currency: 'string',\n  targetAmount: 'number',\n  targetCurrency: 'string',\n  base64EncodedPhoto: 'string?'\n})\n\nconst addMoneyToSavingsGoalParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  savingsGoalUid: 'uuid',\n  transferUid: 'uuid',\n  amount: 'number',\n  currency: 'string'\n})\n\nconst withdrawMoneyFromSavingsGoalParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  savingsGoalUid: 'uuid',\n  transferUid: 'uuid',\n  amount: 'number',\n  currency: 'string'\n})\n\nmodule.exports = SavingsGoal\n","import Account from './entities/account'\nimport AccountHolder from './entities/accountHolder'\nimport Address from './entities/address'\nimport FeedItem from './entities/feedItem'\nimport Card from './entities/card'\nimport OAuth from './entities/oauth'\nimport Payee from './entities/payee'\nimport Payment from './entities/payment'\nimport Mandate from './entities/mandate'\nimport SavingsGoal from './entities/savingsGoal'\nimport Identity from './entities/identity'\n\n/**\n * @property {Identity} identity\n * @property {AccountHolder} accountHolder\n * @property {Account} account\n * @property {Address} address\n * @property {FeedItem} feedItem\n * @property {Payment} payment\n * @property {Mandate} mandate\n * @property {Payee} payee\n * @property {Card} card\n * @property {SavingsGoal} savingsGoal\n * @property {OAuth} oAuth\n */\nclass Starling {\n  /**\n   * Create an instance of the starling client\n   * @param {Object=} options - configuration parameters\n   */\n  constructor (options) {\n    const defaults = {\n      apiUrl: 'https://api.starlingbank.com',\n      clientId: '',\n      clientSecret: ''\n    }\n\n    this.config = Object.assign({}, defaults, options)\n\n    this.identity = new Identity(this.config)\n    this.accountHolder = new AccountHolder(this.config)\n    this.account = new Account(this.config)\n    this.address = new Address(this.config)\n    this.feedItem = new FeedItem(this.config)\n    this.payment = new Payment(this.config)\n    this.mandate = new Mandate(this.config)\n    this.payee = new Payee(this.config)\n    this.card = new Card(this.config)\n    this.savingsGoal = new SavingsGoal(this.config)\n    this.oAuth = new OAuth(this.config)\n  }\n}\n\nmodule.exports = Starling\n","export const defaultHeaders = (accessToken) => ({\n  Accept: 'application/json',\n  Authorization: `Bearer ${accessToken}`\n})\n\nexport const payloadHeaders = (accessToken) => ({\n  ...defaultHeaders(accessToken),\n  'Content-Type': 'application/json'\n})\n","const superstruct = require('superstruct').superstruct\nexport const struct = superstruct({\n  types: {\n    uuid: value => /^[0-9a-f]{8}-[0-9a-f]{4}-[4][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(value),\n    yearMonth: value => /^[0-9]{4}-(?:1[0-2]|0[1-9])$/.test(value),\n    date: value => /^[0-9]{4}-(?:1[0-2]|0[1-9])-(?:3[01]|[12]\\d|0[1-9])$/.test(value),\n    timestamp: value => /^((?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z)?$/.test(value)\n  }\n})\nexport const minAPIParameterDefintion = { accessToken: 'string', apiUrl: 'string' }\nexport const minAPIParameterValidator = struct.interface(minAPIParameterDefintion)\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}