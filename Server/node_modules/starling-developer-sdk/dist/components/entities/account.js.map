{"version":3,"sources":["entities/account.js"],"names":["log","Account","options","parameters","Object","assign","apiUrl","accessToken","url","method","headers","getAccountIdentifiersParameterValidator","accountUid","getAccountBalanceParameterValidator","getConfirmationOfFundsParameterValidator","targetAmountInMinorUnits","params","getStatementPeriodsParameterValidator","yearMonth","Date","toISOString","slice","format","responseType","getStatementForPeriodParameterValidator","Accept","getStatementForRangeParameterValidator","start","end","struct","minAPIParameterDefintion","module","exports"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport debug from 'debug'\nimport { defaultHeaders } from '../utils/http'\nimport { struct, minAPIParameterDefintion, minAPIParameterValidator } from '../utils/validator'\n\nconst log = debug('starling:account-service')\n\n/**\n * Service to interact with a customer's account\n */\nclass Account {\n  /**\n   * Creates an instance of the account client\n   * @param {Object} options - application config\n   */\n  constructor (options) {\n    this.options = options\n  }\n\n  /**\n   * Get an account holder's bank accounts\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @return {Promise} - the http request promise\n   */\n  getAccounts (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/accounts`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get an account's bank identifiers\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @return {Promise} - the http request promise\n   */\n  getAccountIdentifiers (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getAccountIdentifiersParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid } = parameters\n\n    const url = `${apiUrl}/api/v2/accounts/${accountUid}/identifiers`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get an account's balance\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @return {Promise} - the http request promise\n   */\n  getAccountBalance (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getAccountBalanceParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid } = parameters\n\n    const url = `${apiUrl}/api/v2/accounts/${accountUid}/balance`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get whether there are available funds for a requested amount\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @param {number} parameters.targetAmountInMinorUnits - the target amount in minor units\n   * @return {Promise} - the http request promise\n   */\n  getConfirmationOfFunds (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getConfirmationOfFundsParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, targetAmountInMinorUnits } = parameters\n\n    const url = `${apiUrl}/api/v2/accounts/${accountUid}/confirmation-of-funds`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken),\n      params: {\n        targetAmountInMinorUnits\n      }\n    })\n  }\n\n  /**\n   * Get list of statement periods which are available for an account\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @return {Promise} - the http request promise\n   */\n  getStatementPeriods (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getStatementPeriodsParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid } = parameters\n\n    const url = `${apiUrl}/api/v2/accounts/${accountUid}/statement/available-periods`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Download a statement for a given statement period\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @param {string=} parameters.yearMonth - the statement period's year month (yyyy-MM)\n   * @param {string=} parameters.format - one of 'application/pdf' or 'text/csv'\n   * @param {string=} parameters.responseType - the axios responseType for the request\n   * @return {Promise} - the http request promise\n   */\n  getStatementForPeriod (parameters) {\n    parameters = Object.assign({}, { yearMonth: new Date().toISOString().slice(0, 7), format: 'text/csv', responseType: 'stream' }, this.options, parameters)\n    getStatementForPeriodParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, format, yearMonth, responseType } = parameters\n\n    const url = `${apiUrl}/api/v2/accounts/${accountUid}/statement/download`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: {\n        ...defaultHeaders(accessToken),\n        Accept: format\n      },\n      params: {\n        yearMonth\n      },\n      responseType\n    })\n  }\n\n  /**\n   * Download a statement for a given date range\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @param {string} parameters.start - the beginning of the statement date range (yyyy-MM-dd)\n   * @param {string=} parameters.end - the end of the statement date range (yyyy-MM-dd)\n   * @param {string=} parameters.format - one of 'application/pdf' or 'text/csv'\n   * @param {string=} parameters.responseType - the axios responseType for the request\n   * @return {Promise} - the http request promise\n   */\n  getStatementForRange (parameters) {\n    parameters = Object.assign({}, { format: 'text/csv', responseType: 'stream' }, this.options, parameters)\n    getStatementForRangeParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, start, end, format, responseType } = parameters\n\n    const url = `${apiUrl}/api/v2/accounts/${accountUid}/statement/downloadForDateRange`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: {\n        ...defaultHeaders(accessToken),\n        Accept: format\n      },\n      params: {\n        start,\n        end\n      },\n      responseType\n    })\n  }\n}\n\nconst getAccountIdentifiersParameterValidator = struct.interface({ ...minAPIParameterDefintion, accountUid: 'uuid' })\n\nconst getAccountBalanceParameterValidator = struct.interface({ ...minAPIParameterDefintion, accountUid: 'uuid' })\n\nconst getConfirmationOfFundsParameterValidator = struct.interface({ ...minAPIParameterDefintion, accountUid: 'uuid', targetAmountInMinorUnits: 'number' })\n\nconst getStatementPeriodsParameterValidator = struct.interface({ ...minAPIParameterDefintion, accountUid: 'uuid' })\n\nconst getStatementForPeriodParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  yearMonth: 'yearMonth',\n  format: struct.enum(['application/pdf', 'text/csv']),\n  responseType: 'string'\n})\n\nconst getStatementForRangeParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  start: 'date',\n  end: 'date?',\n  format: struct.enum(['application/pdf', 'text/csv']),\n  responseType: 'string'\n})\n\nmodule.exports = Account\n"],"file":"account.js"}