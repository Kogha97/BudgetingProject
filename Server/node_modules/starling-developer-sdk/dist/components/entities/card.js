(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["axios", "debug", "../utils/http", "../utils/validator"], factory);
  } else if (typeof exports !== "undefined") {
    factory(require("axios"), require("debug"), require("../utils/http"), require("../utils/validator"));
  } else {
    var mod = {
      exports: {}
    };
    factory(global.axios, global.debug, global.http, global.validator);
    global.card = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_axios, _debug, _http, _validator) {
  "use strict";

  _axios = _interopRequireDefault(_axios);
  _debug = _interopRequireDefault(_debug);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var log = (0, _debug["default"])('starling:card-service');
  /**
   * Service to interact with a customer card
   */

  var Card = /*#__PURE__*/function () {
    /**
     * Creates an instance of the client's card
     * @param {Object} options - configuration parameters
     */
    function Card(options) {
      _classCallCheck(this, Card);

      this.options = options;
    }
    /**
     * Get all the cards for an account holder
     * @param {string} parameters.apiUrl - the API URL
     * @param {string} parameters.accessToken - the oauth bearer token
     * @return {Promise} - the http request promise
     */


    _createClass(Card, [{
      key: "getCards",
      value: function getCards(parameters) {
        parameters = Object.assign({}, this.options, parameters);
        (0, _validator.minAPIParameterValidator)(parameters);
        var _parameters = parameters,
            apiUrl = _parameters.apiUrl,
            accessToken = _parameters.accessToken;
        var url = "".concat(apiUrl, "/api/v2/cards");
        log("GET ".concat(url));
        return (0, _axios["default"])({
          method: 'GET',
          url: url,
          headers: (0, _http.defaultHeaders)(accessToken)
        });
      }
      /**
       * Update card lock
       * @param {string} parameters.apiUrl - the API URL
       * @param {string} parameters.accessToken - the oauth bearer token
       * @param {string} parameters.cardUid - the card uid
       * @param {boolean} parameters.enabled - Whether the card should be locked. Set to false to lock, true to unlock.
       * @return {Promise} - the http request promise
       */

    }, {
      key: "updateCardLock",
      value: function updateCardLock(parameters) {
        return this.updateCardControl(_objectSpread(_objectSpread({}, parameters), {}, {
          endpoint: 'enabled'
        }));
      }
      /**
       * Update ATM withdrawal control
       * @param {string} parameters.apiUrl - the API URL
       * @param {string} parameters.accessToken - the oauth bearer token
       * @param {string} parameters.cardUid - the card uid
       * @param {boolean} parameters.enabled - Whether ATM withdrawals should be allowed. Set to false to block, true to allow.
       * @return {Promise} - the http request promise
       */

    }, {
      key: "updateCardATMControl",
      value: function updateCardATMControl(parameters) {
        return this.updateCardControl(_objectSpread(_objectSpread({}, parameters), {}, {
          endpoint: 'atm-enabled'
        }));
      }
      /**
       * Update online payments control
       * @param {string} parameters.apiUrl - the API URL
       * @param {string} parameters.accessToken - the oauth bearer token
       * @param {string} parameters.cardUid - the card uid
       * @param {boolean} parameters.enabled - Whether online payments should be allowed. Set to false to block, true to allow.
       * @return {Promise} - the http request promise
       */

    }, {
      key: "updateCardOnlineControl",
      value: function updateCardOnlineControl(parameters) {
        return this.updateCardControl(_objectSpread(_objectSpread({}, parameters), {}, {
          endpoint: 'online-enabled'
        }));
      }
      /**
       * Update mobile wallet payments control
       * @param {string} parameters.apiUrl - the API URL
       * @param {string} parameters.accessToken - the oauth bearer token
       * @param {string} parameters.cardUid - the card uid
       * @param {boolean} parameters.enabled - Whether mobile wallet payments should be allowed. Set to false to block, true to allow.
       * @return {Promise} - the http request promise
       */

    }, {
      key: "updateCardMobileWalletControl",
      value: function updateCardMobileWalletControl(parameters) {
        return this.updateCardControl(_objectSpread(_objectSpread({}, parameters), {}, {
          endpoint: 'mobile-wallet-enabled'
        }));
      }
      /**
       * Update gambling payments control
       * @param {string} parameters.apiUrl - the API URL
       * @param {string} parameters.accessToken - the oauth bearer token
       * @param {string} parameters.cardUid - the card uid
       * @param {boolean} parameters.enabled - Whether gambling payments should be allowed. Set to false to block, true to allow.
       * @return {Promise} - the http request promise
       */

    }, {
      key: "updateCardGamblingControl",
      value: function updateCardGamblingControl(parameters) {
        return this.updateCardControl(_objectSpread(_objectSpread({}, parameters), {}, {
          endpoint: 'gambling-enabled'
        }));
      }
      /**
       * Update card present payments (contactless and chip and pin) control
       * @param {string} parameters.apiUrl - the API URL
       * @param {string} parameters.accessToken - the oauth bearer token
       * @param {string} parameters.cardUid - the card uid
       * @param {boolean} parameters.enabled - Whether card present payments (contactless and chip and pin) should be allowed. Set to false to block, true to allow.
       * @return {Promise} - the http request promise
       */

    }, {
      key: "updateCardPresentControl",
      value: function updateCardPresentControl(parameters) {
        return this.updateCardControl(_objectSpread(_objectSpread({}, parameters), {}, {
          endpoint: 'pos-enabled'
        }));
      }
      /**
       * Update magstripe payments control
       * @param {string} parameters.apiUrl - the API URL
       * @param {string} parameters.accessToken - the oauth bearer token
       * @param {string} parameters.cardUid - the card uid
       * @param {boolean} parameters.enabled - Whether magstripe payments should be allowed. Set to false to block, true to allow.
       * @return {Promise} - the http request promise
       */

    }, {
      key: "updateCardMagstripeControl",
      value: function updateCardMagstripeControl(parameters) {
        return this.updateCardControl(_objectSpread(_objectSpread({}, parameters), {}, {
          endpoint: 'mag-stripe-enabled'
        }));
      }
      /**
       * Update a card control
       * @param {string} parameters.apiUrl - the API URL
       * @param {string} parameters.accessToken - the oauth bearer token
       * @param {string} parameters.cardUid - the card uid
       * @param {boolean} parameters.enabled - Whether the control should be should be locked. Set to false to lock, true to unlock.
       * @param {string} parameters.endpoint - the last segment of the endpoint name
       * @return {Promise} - the http request promise
       */

    }, {
      key: "updateCardControl",
      value: function updateCardControl(parameters) {
        parameters = Object.assign({}, this.options, parameters);
        updateCardControlParameterValidator(parameters);
        var _parameters2 = parameters,
            apiUrl = _parameters2.apiUrl,
            accessToken = _parameters2.accessToken,
            cardUid = _parameters2.cardUid,
            enabled = _parameters2.enabled,
            endpoint = _parameters2.endpoint;
        var url = "".concat(apiUrl, "/api/v2/cards/").concat(cardUid, "/controls/").concat(endpoint);
        log("PUT ".concat(url));
        return (0, _axios["default"])({
          method: 'PUT',
          url: url,
          headers: (0, _http.payloadHeaders)(accessToken),
          data: JSON.stringify({
            enabled: enabled
          })
        });
      }
    }]);

    return Card;
  }();

  var updateCardControlParameterValidator = _validator.struct["interface"](_objectSpread(_objectSpread({}, _validator.minAPIParameterDefintion), {}, {
    cardUid: 'uuid',
    enabled: 'boolean'
  }));

  module.exports = Card;
});
//# sourceMappingURL=card.js.map
