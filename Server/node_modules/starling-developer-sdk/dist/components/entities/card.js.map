{"version":3,"sources":["entities/card.js"],"names":["log","Card","options","parameters","Object","assign","apiUrl","accessToken","url","method","headers","updateCardControl","endpoint","updateCardControlParameterValidator","cardUid","enabled","data","JSON","stringify","struct","minAPIParameterDefintion","module","exports"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport debug from 'debug'\nimport { defaultHeaders, payloadHeaders } from '../utils/http'\nimport { struct, minAPIParameterDefintion, minAPIParameterValidator } from '../utils/validator'\n\nconst log = debug('starling:card-service')\n\n/**\n * Service to interact with a customer card\n */\nclass Card {\n  /**\n   * Creates an instance of the client's card\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options\n  }\n\n  /**\n   * Get all the cards for an account holder\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @return {Promise} - the http request promise\n   */\n  getCards (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/cards`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Update card lock\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.cardUid - the card uid\n   * @param {boolean} parameters.enabled - Whether the card should be locked. Set to false to lock, true to unlock.\n   * @return {Promise} - the http request promise\n   */\n  updateCardLock (parameters) {\n    return this.updateCardControl({ ...parameters, endpoint: 'enabled' })\n  }\n\n  /**\n   * Update ATM withdrawal control\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.cardUid - the card uid\n   * @param {boolean} parameters.enabled - Whether ATM withdrawals should be allowed. Set to false to block, true to allow.\n   * @return {Promise} - the http request promise\n   */\n  updateCardATMControl (parameters) {\n    return this.updateCardControl({ ...parameters, endpoint: 'atm-enabled' })\n  }\n\n  /**\n   * Update online payments control\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.cardUid - the card uid\n   * @param {boolean} parameters.enabled - Whether online payments should be allowed. Set to false to block, true to allow.\n   * @return {Promise} - the http request promise\n   */\n  updateCardOnlineControl (parameters) {\n    return this.updateCardControl({ ...parameters, endpoint: 'online-enabled' })\n  }\n\n  /**\n   * Update mobile wallet payments control\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.cardUid - the card uid\n   * @param {boolean} parameters.enabled - Whether mobile wallet payments should be allowed. Set to false to block, true to allow.\n   * @return {Promise} - the http request promise\n   */\n  updateCardMobileWalletControl (parameters) {\n    return this.updateCardControl({ ...parameters, endpoint: 'mobile-wallet-enabled' })\n  }\n\n  /**\n   * Update gambling payments control\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.cardUid - the card uid\n   * @param {boolean} parameters.enabled - Whether gambling payments should be allowed. Set to false to block, true to allow.\n   * @return {Promise} - the http request promise\n   */\n  updateCardGamblingControl (parameters) {\n    return this.updateCardControl({ ...parameters, endpoint: 'gambling-enabled' })\n  }\n\n  /**\n   * Update card present payments (contactless and chip and pin) control\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.cardUid - the card uid\n   * @param {boolean} parameters.enabled - Whether card present payments (contactless and chip and pin) should be allowed. Set to false to block, true to allow.\n   * @return {Promise} - the http request promise\n   */\n  updateCardPresentControl (parameters) {\n    return this.updateCardControl({ ...parameters, endpoint: 'pos-enabled' })\n  }\n\n  /**\n   * Update magstripe payments control\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.cardUid - the card uid\n   * @param {boolean} parameters.enabled - Whether magstripe payments should be allowed. Set to false to block, true to allow.\n   * @return {Promise} - the http request promise\n   */\n  updateCardMagstripeControl (parameters) {\n    return this.updateCardControl({ ...parameters, endpoint: 'mag-stripe-enabled' })\n  }\n\n  /**\n   * Update a card control\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.cardUid - the card uid\n   * @param {boolean} parameters.enabled - Whether the control should be should be locked. Set to false to lock, true to unlock.\n   * @param {string} parameters.endpoint - the last segment of the endpoint name\n   * @return {Promise} - the http request promise\n   */\n  updateCardControl (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    updateCardControlParameterValidator(parameters)\n    const { apiUrl, accessToken, cardUid, enabled, endpoint } = parameters\n\n    const url = `${apiUrl}/api/v2/cards/${cardUid}/controls/${endpoint}`\n    log(`PUT ${url}`)\n\n    return axios({\n      method: 'PUT',\n      url,\n      headers: payloadHeaders(accessToken),\n      data: JSON.stringify({ enabled })\n    })\n  }\n}\n\nconst updateCardControlParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  cardUid: 'uuid',\n  enabled: 'boolean'\n})\n\nmodule.exports = Card\n"],"file":"card.js"}