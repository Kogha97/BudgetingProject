(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["axios", "debug", "../utils/http", "../utils/validator"], factory);
  } else if (typeof exports !== "undefined") {
    factory(require("axios"), require("debug"), require("../utils/http"), require("../utils/validator"));
  } else {
    var mod = {
      exports: {}
    };
    factory(global.axios, global.debug, global.http, global.validator);
    global.savingsGoal = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_axios, _debug, _http, _validator) {
  "use strict";

  _axios = _interopRequireDefault(_axios);
  _debug = _interopRequireDefault(_debug);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var log = (0, _debug["default"])('starling:savings-goal-service');
  /**
   * Service to interact with a customer's savings goals
   */

  var SavingsGoal = /*#__PURE__*/function () {
    /**
     * Create a new savings goal service
     * @param {Object} options - configuration parameters
     */
    function SavingsGoal(options) {
      _classCallCheck(this, SavingsGoal);

      this.options = options;
    }
    /**
     * Get all savings goals
     * @param {string} parameters.apiUrl - the API URL
     * @param {string} parameters.accessToken - the oauth bearer token
     * @param {string} parameters.accountUid - the account uid
     * @return {Promise} - the http request promise
     */


    _createClass(SavingsGoal, [{
      key: "getSavingsGoals",
      value: function getSavingsGoals(parameters) {
        parameters = Object.assign({}, this.options, parameters);
        getSavingsGoalsParameterValidator(parameters);
        var _parameters = parameters,
            apiUrl = _parameters.apiUrl,
            accessToken = _parameters.accessToken,
            accountUid = _parameters.accountUid;
        var url = "".concat(apiUrl, "/api/v2/account/").concat(accountUid, "/savings-goals");
        log("GET ".concat(url));
        return (0, _axios["default"])({
          method: 'GET',
          url: url,
          headers: (0, _http.defaultHeaders)(accessToken)
        });
      }
      /**
       * Get a savings goal
       * @param {string} parameters.apiUrl - the API URL
       * @param {string} parameters.accessToken - the oauth bearer token
       * @param {string} parameters.accountUid - the account uid
       * @param {string} parameters.savingsGoalUid - the savings goal's uid
       * @return {Promise} - the http request promise
       */

    }, {
      key: "getSavingsGoal",
      value: function getSavingsGoal(parameters) {
        parameters = Object.assign({}, this.options, parameters);
        getSavingsGoalParameterValidator(parameters);
        var _parameters2 = parameters,
            apiUrl = _parameters2.apiUrl,
            accessToken = _parameters2.accessToken,
            accountUid = _parameters2.accountUid,
            savingsGoalUid = _parameters2.savingsGoalUid;
        var url = "".concat(apiUrl, "/api/v2/account/").concat(accountUid, "/savings-goals/").concat(savingsGoalUid);
        log("GET ".concat(url));
        return (0, _axios["default"])({
          method: 'GET',
          url: url,
          headers: (0, _http.defaultHeaders)(accessToken)
        });
      }
      /**
       * Create a savings goal
       * @param {string} parameters.apiUrl - the API URL
       * @param {string} parameters.accessToken - the oauth bearer token
       * @param {string} parameters.accountUid - the account uid of the account to create the savings goal in
       * @param {string} parameters.name - the name of the new savings goal
       * @param {string=} parameters.currency - ISO-4217 3 character currency code
       * @param {number=} parameters.targetAmount - the target amount in minor units (e.g. 1234 => Â£12.34)
       * @param {string=} parameters.targetCurrency - ISO-4217 3 character currency code
       * @param {string=} parameters.base64EncodedPhoto - base64 encoded image to associate with the goal
       * @return {Promise} - the http request promise
       */

    }, {
      key: "createSavingsGoal",
      value: function createSavingsGoal(parameters) {
        parameters = Object.assign({}, {
          currency: 'GBP',
          targetAmount: 0,
          targetCurrency: 'GBP'
        }, this.options, parameters);
        createSavingsGoalParameterValidator(parameters);
        var _parameters3 = parameters,
            apiUrl = _parameters3.apiUrl,
            accessToken = _parameters3.accessToken,
            accountUid = _parameters3.accountUid,
            name = _parameters3.name,
            currency = _parameters3.currency,
            targetAmount = _parameters3.targetAmount,
            targetCurrency = _parameters3.targetCurrency,
            base64EncodedPhoto = _parameters3.base64EncodedPhoto;
        var url = "".concat(apiUrl, "/api/v2/account/").concat(accountUid, "/savings-goals");
        log("PUT ".concat(url));
        return (0, _axios["default"])({
          method: 'PUT',
          url: url,
          headers: (0, _http.payloadHeaders)(accessToken),
          data: JSON.stringify({
            name: name,
            currency: currency,
            target: {
              minorUnits: targetAmount,
              currency: targetCurrency
            },
            base64EncodedPhoto: base64EncodedPhoto
          })
        });
      }
      /**
       * Delete a savings goal
       * @param {string} parameters.apiUrl - the API URL
       * @param {string} parameters.accessToken - the oauth bearer token
       * @param {string} parameters.accountUid - the account uid
       * @param {string} parameters.savingsGoalUid - the savings goal's uid
       * @return {Promise} - the http request promise
       */

    }, {
      key: "deleteSavingsGoal",
      value: function deleteSavingsGoal(parameters) {
        parameters = Object.assign({}, this.options, parameters);
        deleteSavingsGoalParameterValidator(parameters);
        var _parameters4 = parameters,
            apiUrl = _parameters4.apiUrl,
            accessToken = _parameters4.accessToken,
            accountUid = _parameters4.accountUid,
            savingsGoalUid = _parameters4.savingsGoalUid;
        var url = "".concat(apiUrl, "/api/v2/account/").concat(accountUid, "/savings-goals/").concat(savingsGoalUid);
        log("DELETE ".concat(url));
        return (0, _axios["default"])({
          method: 'DELETE',
          url: url,
          headers: (0, _http.defaultHeaders)(accessToken)
        });
      }
      /**
       * Add money to a savings goal
       * @param {string} parameters.apiUrl - the API URL
       * @param {string} parameters.accessToken - the oauth bearer token
       * @param {string} parameters.accountUid - the account uid
       * @param {string} parameters.savingsGoalUid - the savings goal's uid
       * @param {string} parameters.transferUid - a transaction ID for this transaction
       * @param {number} parameters.amount - amount in the minor units of the given currency; eg pence in GBP, cents in EUR
       * @param {string=} parameters.currency - ISO-4217 3 character currency code
       * @return {Promise} - the http request promise
       */

    }, {
      key: "addMoneyToSavingsGoal",
      value: function addMoneyToSavingsGoal(parameters) {
        parameters = Object.assign({}, {
          currency: 'GBP'
        }, this.options, parameters);
        addMoneyToSavingsGoalParameterValidator(parameters);
        var _parameters5 = parameters,
            apiUrl = _parameters5.apiUrl,
            accessToken = _parameters5.accessToken,
            accountUid = _parameters5.accountUid,
            savingsGoalUid = _parameters5.savingsGoalUid,
            transferUid = _parameters5.transferUid,
            amount = _parameters5.amount,
            currency = _parameters5.currency;
        var url = "".concat(apiUrl, "/api/v2/account/").concat(accountUid, "/savings-goals/").concat(savingsGoalUid, "/add-money/").concat(transferUid);
        log("PUT ".concat(url));
        return (0, _axios["default"])({
          method: 'PUT',
          url: url,
          headers: (0, _http.payloadHeaders)(accessToken),
          data: JSON.stringify({
            amount: {
              currency: currency,
              minorUnits: amount
            }
          })
        });
      }
      /**
       * Withdraw money from a savings goal
       * @param {string} parameters.apiUrl - the API URL
       * @param {string} parameters.accessToken - the oauth bearer token
       * @param {string} parameters.accountUid - the account uid
       * @param {string} parameters.savingsGoalUid - the savings goal's uid
       * @param {string} parameters.transferUid - a transaction ID for this transaction
       * @param {number} parameters.amount - amount in the minor units of the given currency; eg pence in GBP, cents in EUR
       * @param {string=} parameters.currency - ISO-4217 3 character currency code
       * @return {Promise} - the http request promise
       */

    }, {
      key: "withdrawMoneyFromSavingsGoal",
      value: function withdrawMoneyFromSavingsGoal(parameters) {
        parameters = Object.assign({}, {
          currency: 'GBP'
        }, this.options, parameters);
        withdrawMoneyFromSavingsGoalParameterValidator(parameters);
        var _parameters6 = parameters,
            apiUrl = _parameters6.apiUrl,
            accessToken = _parameters6.accessToken,
            accountUid = _parameters6.accountUid,
            savingsGoalUid = _parameters6.savingsGoalUid,
            transferUid = _parameters6.transferUid,
            amount = _parameters6.amount,
            currency = _parameters6.currency;
        var url = "".concat(apiUrl, "/api/v2/account/").concat(accountUid, "/savings-goals/").concat(savingsGoalUid, "/withdraw-money/").concat(transferUid);
        log("PUT ".concat(url));
        return (0, _axios["default"])({
          method: 'PUT',
          url: url,
          headers: (0, _http.payloadHeaders)(accessToken),
          data: JSON.stringify({
            amount: {
              currency: currency,
              minorUnits: amount
            }
          })
        });
      }
    }]);

    return SavingsGoal;
  }();

  var getSavingsGoalsParameterValidator = _validator.struct["interface"](_objectSpread(_objectSpread({}, _validator.minAPIParameterDefintion), {}, {
    accountUid: 'uuid'
  }));

  var getSavingsGoalParameterValidator = _validator.struct["interface"](_objectSpread(_objectSpread({}, _validator.minAPIParameterDefintion), {}, {
    accountUid: 'uuid',
    savingsGoalUid: 'uuid'
  }));

  var deleteSavingsGoalParameterValidator = _validator.struct["interface"](_objectSpread(_objectSpread({}, _validator.minAPIParameterDefintion), {}, {
    accountUid: 'uuid',
    savingsGoalUid: 'uuid'
  }));

  var createSavingsGoalParameterValidator = _validator.struct["interface"](_objectSpread(_objectSpread({}, _validator.minAPIParameterDefintion), {}, {
    accountUid: 'uuid',
    name: 'string',
    currency: 'string',
    targetAmount: 'number',
    targetCurrency: 'string',
    base64EncodedPhoto: 'string?'
  }));

  var addMoneyToSavingsGoalParameterValidator = _validator.struct["interface"](_objectSpread(_objectSpread({}, _validator.minAPIParameterDefintion), {}, {
    accountUid: 'uuid',
    savingsGoalUid: 'uuid',
    transferUid: 'uuid',
    amount: 'number',
    currency: 'string'
  }));

  var withdrawMoneyFromSavingsGoalParameterValidator = _validator.struct["interface"](_objectSpread(_objectSpread({}, _validator.minAPIParameterDefintion), {}, {
    accountUid: 'uuid',
    savingsGoalUid: 'uuid',
    transferUid: 'uuid',
    amount: 'number',
    currency: 'string'
  }));

  module.exports = SavingsGoal;
});
//# sourceMappingURL=savingsGoal.js.map
