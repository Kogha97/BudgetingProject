{"version":3,"sources":["entities/savingsGoal.js"],"names":["log","SavingsGoal","options","parameters","Object","assign","getSavingsGoalsParameterValidator","apiUrl","accessToken","accountUid","url","method","headers","getSavingsGoalParameterValidator","savingsGoalUid","currency","targetAmount","targetCurrency","createSavingsGoalParameterValidator","name","base64EncodedPhoto","data","JSON","stringify","target","minorUnits","deleteSavingsGoalParameterValidator","addMoneyToSavingsGoalParameterValidator","transferUid","amount","withdrawMoneyFromSavingsGoalParameterValidator","struct","minAPIParameterDefintion","module","exports"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport debug from 'debug'\nimport { defaultHeaders, payloadHeaders } from '../utils/http'\nimport { struct, minAPIParameterDefintion } from '../utils/validator'\n\nconst log = debug('starling:savings-goal-service')\n\n/**\n * Service to interact with a customer's savings goals\n */\nclass SavingsGoal {\n  /**\n   * Create a new savings goal service\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options\n  }\n\n  /**\n   * Get all savings goals\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @return {Promise} - the http request promise\n   */\n  getSavingsGoals (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getSavingsGoalsParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid } = parameters\n\n    const url = `${apiUrl}/api/v2/account/${accountUid}/savings-goals`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get a savings goal\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @param {string} parameters.savingsGoalUid - the savings goal's uid\n   * @return {Promise} - the http request promise\n   */\n  getSavingsGoal (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getSavingsGoalParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, savingsGoalUid } = parameters\n\n    const url = `${apiUrl}/api/v2/account/${accountUid}/savings-goals/${savingsGoalUid}`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Create a savings goal\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid of the account to create the savings goal in\n   * @param {string} parameters.name - the name of the new savings goal\n   * @param {string=} parameters.currency - ISO-4217 3 character currency code\n   * @param {number=} parameters.targetAmount - the target amount in minor units (e.g. 1234 => Â£12.34)\n   * @param {string=} parameters.targetCurrency - ISO-4217 3 character currency code\n   * @param {string=} parameters.base64EncodedPhoto - base64 encoded image to associate with the goal\n   * @return {Promise} - the http request promise\n   */\n  createSavingsGoal (parameters) {\n    parameters = Object.assign({}, { currency: 'GBP', targetAmount: 0, targetCurrency: 'GBP' }, this.options, parameters)\n    createSavingsGoalParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, name, currency, targetAmount, targetCurrency, base64EncodedPhoto } = parameters\n\n    const url = `${apiUrl}/api/v2/account/${accountUid}/savings-goals`\n    log(`PUT ${url}`)\n\n    return axios({\n      method: 'PUT',\n      url,\n      headers: payloadHeaders(accessToken),\n      data: JSON.stringify({\n        name,\n        currency,\n        target: {\n          minorUnits: targetAmount,\n          currency: targetCurrency\n        },\n        base64EncodedPhoto\n      })\n    })\n  }\n\n  /**\n   * Delete a savings goal\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @param {string} parameters.savingsGoalUid - the savings goal's uid\n   * @return {Promise} - the http request promise\n   */\n  deleteSavingsGoal (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    deleteSavingsGoalParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, savingsGoalUid } = parameters\n\n    const url = `${apiUrl}/api/v2/account/${accountUid}/savings-goals/${savingsGoalUid}`\n    log(`DELETE ${url}`)\n\n    return axios({\n      method: 'DELETE',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Add money to a savings goal\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @param {string} parameters.savingsGoalUid - the savings goal's uid\n   * @param {string} parameters.transferUid - a transaction ID for this transaction\n   * @param {number} parameters.amount - amount in the minor units of the given currency; eg pence in GBP, cents in EUR\n   * @param {string=} parameters.currency - ISO-4217 3 character currency code\n   * @return {Promise} - the http request promise\n   */\n  addMoneyToSavingsGoal (parameters) {\n    parameters = Object.assign({}, { currency: 'GBP' }, this.options, parameters)\n    addMoneyToSavingsGoalParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, savingsGoalUid, transferUid, amount, currency } = parameters\n\n    const url = `${apiUrl}/api/v2/account/${accountUid}/savings-goals/${savingsGoalUid}/add-money/${transferUid}`\n    log(`PUT ${url}`)\n\n    return axios({\n      method: 'PUT',\n      url,\n      headers: payloadHeaders(accessToken),\n      data: JSON.stringify({\n        amount: {\n          currency,\n          minorUnits: amount\n        }\n      })\n    })\n  }\n\n  /**\n   * Withdraw money from a savings goal\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @param {string} parameters.savingsGoalUid - the savings goal's uid\n   * @param {string} parameters.transferUid - a transaction ID for this transaction\n   * @param {number} parameters.amount - amount in the minor units of the given currency; eg pence in GBP, cents in EUR\n   * @param {string=} parameters.currency - ISO-4217 3 character currency code\n   * @return {Promise} - the http request promise\n   */\n  withdrawMoneyFromSavingsGoal (parameters) {\n    parameters = Object.assign({}, { currency: 'GBP' }, this.options, parameters)\n    withdrawMoneyFromSavingsGoalParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, savingsGoalUid, transferUid, amount, currency } = parameters\n\n    const url = `${apiUrl}/api/v2/account/${accountUid}/savings-goals/${savingsGoalUid}/withdraw-money/${transferUid}`\n    log(`PUT ${url}`)\n\n    return axios({\n      method: 'PUT',\n      url,\n      headers: payloadHeaders(accessToken),\n      data: JSON.stringify({\n        amount: {\n          currency,\n          minorUnits: amount\n        }\n      })\n    })\n  }\n}\n\nconst getSavingsGoalsParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid'\n})\n\nconst getSavingsGoalParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  savingsGoalUid: 'uuid'\n})\n\nconst deleteSavingsGoalParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  savingsGoalUid: 'uuid'\n})\n\nconst createSavingsGoalParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  name: 'string',\n  currency: 'string',\n  targetAmount: 'number',\n  targetCurrency: 'string',\n  base64EncodedPhoto: 'string?'\n})\n\nconst addMoneyToSavingsGoalParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  savingsGoalUid: 'uuid',\n  transferUid: 'uuid',\n  amount: 'number',\n  currency: 'string'\n})\n\nconst withdrawMoneyFromSavingsGoalParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  savingsGoalUid: 'uuid',\n  transferUid: 'uuid',\n  amount: 'number',\n  currency: 'string'\n})\n\nmodule.exports = SavingsGoal\n"],"file":"savingsGoal.js"}