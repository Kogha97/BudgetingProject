(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["axios", "debug", "../utils/http", "../utils/validator"], factory);
  } else if (typeof exports !== "undefined") {
    factory(require("axios"), require("debug"), require("../utils/http"), require("../utils/validator"));
  } else {
    var mod = {
      exports: {}
    };
    factory(global.axios, global.debug, global.http, global.validator);
    global.accountHolder = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_axios, _debug, _http, _validator) {
  "use strict";

  _axios = _interopRequireDefault(_axios);
  _debug = _interopRequireDefault(_debug);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var log = (0, _debug["default"])('starling:account-holder-service');
  /**
   * Service to interact with an account holder
   */

  var AccountHolder = /*#__PURE__*/function () {
    /**
     * Creates an instance of the account holder client
     * @param {Object} options - application config
     */
    function AccountHolder(options) {
      _classCallCheck(this, AccountHolder);

      this.options = options;
    }
    /**
     * Get basic information about the account holder
     * @param {string} parameters.apiUrl - the API URL
     * @param {string} parameters.accessToken - the oauth bearer token
     * @return {Promise} - the http request promise
     */


    _createClass(AccountHolder, [{
      key: "getAccountHolder",
      value: function getAccountHolder(parameters) {
        parameters = Object.assign({}, this.options, parameters);
        (0, _validator.minAPIParameterValidator)(parameters);
        var _parameters = parameters,
            apiUrl = _parameters.apiUrl,
            accessToken = _parameters.accessToken;
        var url = "".concat(apiUrl, "/api/v2/account-holder");
        log("GET ".concat(url));
        return (0, _axios["default"])({
          method: 'GET',
          url: url,
          headers: (0, _http.defaultHeaders)(accessToken)
        });
      }
      /**
       * Get the name of the account holder
       * @param {string} parameters.apiUrl - the API URL
       * @param {string} parameters.accessToken - the oauth bearer token
       * @return {Promise} - the http request promise
       */

    }, {
      key: "getAccountHolderName",
      value: function getAccountHolderName(parameters) {
        parameters = Object.assign({}, this.options, parameters);
        (0, _validator.minAPIParameterValidator)(parameters);
        var _parameters2 = parameters,
            apiUrl = _parameters2.apiUrl,
            accessToken = _parameters2.accessToken;
        var url = "".concat(apiUrl, "/api/v2/account-holder/name");
        log("GET ".concat(url));
        return (0, _axios["default"])({
          method: 'GET',
          url: url,
          headers: (0, _http.defaultHeaders)(accessToken)
        });
      }
      /**
       * Get an individual account holder's details
       * @param {string} parameters.apiUrl - the API URL
       * @param {string} parameters.accessToken - the oauth bearer token
       * @return {Promise} - the http request promise
       */

    }, {
      key: "getAccountHolderIndividual",
      value: function getAccountHolderIndividual(parameters) {
        parameters = Object.assign({}, this.options, parameters);
        (0, _validator.minAPIParameterValidator)(parameters);
        var _parameters3 = parameters,
            apiUrl = _parameters3.apiUrl,
            accessToken = _parameters3.accessToken;
        var url = "".concat(apiUrl, "/api/v2/account-holder/individual");
        log("GET ".concat(url));
        return (0, _axios["default"])({
          method: 'GET',
          url: url,
          headers: (0, _http.defaultHeaders)(accessToken)
        });
      }
      /**
       * Get a joint account holder's details
       * @param {string} parameters.apiUrl - the API URL
       * @param {string} parameters.accessToken - the oauth bearer token
       * @return {Promise} - the http request promise
       */

    }, {
      key: "getAccountHolderJoint",
      value: function getAccountHolderJoint(parameters) {
        parameters = Object.assign({}, this.options, parameters);
        (0, _validator.minAPIParameterValidator)(parameters);
        var _parameters4 = parameters,
            apiUrl = _parameters4.apiUrl,
            accessToken = _parameters4.accessToken;
        var url = "".concat(apiUrl, "/api/v2/account-holder/joint");
        log("GET ".concat(url));
        return (0, _axios["default"])({
          method: 'GET',
          url: url,
          headers: (0, _http.defaultHeaders)(accessToken)
        });
      }
      /**
       * Get a business account holder's details
       * @param {string} parameters.apiUrl - the API URL
       * @param {string} parameters.accessToken - the oauth bearer token
       * @return {Promise} - the http request promise
       */

    }, {
      key: "getAccountHolderBusiness",
      value: function getAccountHolderBusiness(parameters) {
        parameters = Object.assign({}, this.options, parameters);
        (0, _validator.minAPIParameterValidator)(parameters);
        var _parameters5 = parameters,
            apiUrl = _parameters5.apiUrl,
            accessToken = _parameters5.accessToken;
        var url = "".concat(apiUrl, "/api/v2/account-holder/business");
        log("GET ".concat(url));
        return (0, _axios["default"])({
          method: 'GET',
          url: url,
          headers: (0, _http.defaultHeaders)(accessToken)
        });
      }
      /**
       * Get a business account holder's registered address
       * @param {string} parameters.apiUrl - the API URL
       * @param {string} parameters.accessToken - the oauth bearer token
       * @return {Promise} - the http request promise
       */

    }, {
      key: "getAccountHolderBusinessRegisteredAddress",
      value: function getAccountHolderBusinessRegisteredAddress(parameters) {
        parameters = Object.assign({}, this.options, parameters);
        (0, _validator.minAPIParameterValidator)(parameters);
        var _parameters6 = parameters,
            apiUrl = _parameters6.apiUrl,
            accessToken = _parameters6.accessToken;
        var url = "".concat(apiUrl, "/api/v2/account-holder/business/registered-address");
        log("GET ".concat(url));
        return (0, _axios["default"])({
          method: 'GET',
          url: url,
          headers: (0, _http.defaultHeaders)(accessToken)
        });
      }
      /**
       * Get a business account holder's correspondence address
       * @param {string} parameters.apiUrl - the API URL
       * @param {string} parameters.accessToken - the oauth bearer token
       * @return {Promise} - the http request promise
       */

    }, {
      key: "getAccountHolderBusinessCorrespondenceAddress",
      value: function getAccountHolderBusinessCorrespondenceAddress(parameters) {
        parameters = Object.assign({}, this.options, parameters);
        (0, _validator.minAPIParameterValidator)(parameters);
        var _parameters7 = parameters,
            apiUrl = _parameters7.apiUrl,
            accessToken = _parameters7.accessToken;
        var url = "".concat(apiUrl, "/api/v2/account-holder/business/correspondence-address");
        log("GET ".concat(url));
        return (0, _axios["default"])({
          method: 'GET',
          url: url,
          headers: (0, _http.defaultHeaders)(accessToken)
        });
      }
    }]);

    return AccountHolder;
  }();

  module.exports = AccountHolder;
});
//# sourceMappingURL=accountHolder.js.map
