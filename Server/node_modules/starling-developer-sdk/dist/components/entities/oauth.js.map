{"version":3,"sources":["entities/oauth.js"],"names":["ACCESS_TOKEN_GRANT_TYPE","REFRESH_TOKEN_GRANT_TYPE","log","OAuth","options","authorizationCode","getOAuthToken","queryParams","code","grant_type","client_id","clientId","client_secret","clientSecret","redirect_uri","redirectUri","refreshToken","refresh_token","parameters","Object","assign","getOAuthTokenParameterValidator","apiUrl","url","JSON","stringify","method","headers","Accept","params","struct","union","object","literal","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,MAAMA,uBAAuB,GAAG,oBAAhC;AACA,MAAMC,wBAAwB,GAAG,eAAjC;AAEA,MAAMC,GAAG,GAAG,uBAAM,wBAAN,CAAZ;AAEA;;;;MAGMC,K;AACJ;;;;AAIA,mBAAaC,OAAb,EAAsB;AAAA;;AACpB,WAAKA,OAAL,GAAeA,OAAf;AACD;AAED;;;;;;;;;qCAKgBC,iB,EAAmB;AACjC,eAAO,KAAKC,aAAL,CAAmB;AACxBC,UAAAA,WAAW,EAAE;AACXC,YAAAA,IAAI,EAAEH,iBADK;AAEXI,YAAAA,UAAU,EAAET,uBAFD;AAGXU,YAAAA,SAAS,EAAE,KAAKN,OAAL,CAAaO,QAHb;AAIXC,YAAAA,aAAa,EAAE,KAAKR,OAAL,CAAaS,YAJjB;AAKXC,YAAAA,YAAY,EAAE,KAAKV,OAAL,CAAaW;AALhB;AADW,SAAnB,CAAP;AASD;AAED;;;;;;;;yCAKoBC,Y,EAAc;AAChC,eAAO,KAAKV,aAAL,CAAmB;AACxBC,UAAAA,WAAW,EAAE;AACXU,YAAAA,aAAa,EAAED,YADJ;AAEXP,YAAAA,UAAU,EAAER,wBAFD;AAGXS,YAAAA,SAAS,EAAE,KAAKN,OAAL,CAAaO,QAHb;AAIXC,YAAAA,aAAa,EAAE,KAAKR,OAAL,CAAaS;AAJjB;AADW,SAAnB,CAAP;AAQD;AAED;;;;;;;;;oCAMeK,U,EAAY;AACzBA,QAAAA,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKhB,OAAvB,EAAgCc,UAAhC,CAAb;AACAG,QAAAA,+BAA+B,CAACH,UAAD,CAA/B;AAFyB,0BAGOA,UAHP;AAAA,YAGjBI,MAHiB,eAGjBA,MAHiB;AAAA,YAGTf,WAHS,eAGTA,WAHS;AAKzB,YAAMgB,GAAG,aAAMD,MAAN,wBAAT;AACApB,QAAAA,GAAG,gBAASqB,GAAT,0BAA4BC,IAAI,CAACC,SAAL,CAAelB,WAAf,CAA5B,EAAH;AAEA,eAAO,uBAAM;AACXgB,UAAAA,GAAG,EAAHA,GADW;AAEXG,UAAAA,MAAM,EAAE,MAFG;AAGXC,UAAAA,OAAO,EAAE;AACP,4BAAgB,mCADT;AAEPC,YAAAA,MAAM,EAAE;AAFD,WAHE;AAOXC,UAAAA,MAAM,EAAEtB;AAPG,SAAN,CAAP;AASD;;;;;;AAGH,MAAMc,+BAA+B,GAAGS,+BAAiB;AACvDR,IAAAA,MAAM,EAAE,QAD+C;AAEvDf,IAAAA,WAAW,EAAEuB,kBAAOC,KAAP,CAAa,CACxBD,kBAAOE,MAAP,CAAc;AACZtB,MAAAA,SAAS,EAAE,QADC;AAEZE,MAAAA,aAAa,EAAE,QAFH;AAGZH,MAAAA,UAAU,EAAEqB,kBAAOG,OAAP,CAAejC,uBAAf,CAHA;AAIZQ,MAAAA,IAAI,EAAE,QAJM;AAKZM,MAAAA,YAAY,EAAE;AALF,KAAd,CADwB,EAQxBgB,kBAAOE,MAAP,CAAc;AACZtB,MAAAA,SAAS,EAAE,QADC;AAEZE,MAAAA,aAAa,EAAE,QAFH;AAGZH,MAAAA,UAAU,EAAEqB,kBAAOG,OAAP,CAAehC,wBAAf,CAHA;AAIZgB,MAAAA,aAAa,EAAE;AAJH,KAAd,CARwB,CAAb;AAF0C,GAAjB,CAAxC;;AAmBAiB,EAAAA,MAAM,CAACC,OAAP,GAAiBhC,KAAjB","sourcesContent":["import axios from 'axios'\nimport debug from 'debug'\nimport { struct } from '../utils/validator'\n\nconst ACCESS_TOKEN_GRANT_TYPE = 'authorization_code'\nconst REFRESH_TOKEN_GRANT_TYPE = 'refresh_token'\n\nconst log = debug('starling:oauth-service')\n\n/**\n * Service to interact with a the oauth endpoint\n */\nclass OAuth {\n  /**\n   * Create a new oauth service\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options\n  }\n\n  /**\n   * Exchanges the authorization code for an access token\n   * @param {string} authorizationCode - the authorization code, acquired from the user agent after the user authenticates with starling\n   * @return {Promise} - the http request promise\n   */\n  getAccessToken (authorizationCode) {\n    return this.getOAuthToken({\n      queryParams: {\n        code: authorizationCode,\n        grant_type: ACCESS_TOKEN_GRANT_TYPE,\n        client_id: this.options.clientId,\n        client_secret: this.options.clientSecret,\n        redirect_uri: this.options.redirectUri\n      }\n    })\n  }\n\n  /**\n   * Exchanges the authorization code for an access token\n   * @param {string} refreshToken - the oauth refresh token, used when the access token expires to claim a new access token.\n   * @return {Promise} - the http request promise\n   */\n  refreshAccessToken (refreshToken) {\n    return this.getOAuthToken({\n      queryParams: {\n        refresh_token: refreshToken,\n        grant_type: REFRESH_TOKEN_GRANT_TYPE,\n        client_id: this.options.clientId,\n        client_secret: this.options.clientSecret\n      }\n    })\n  }\n\n  /**\n   * Gets the access token from the starling OAuth endpoint\n   * @param {string} parameters.apiUrl - the OAuth url\n   * @param {object} parameters.queryParams - the query params passed to the OAuth endpoint as per the OAuth spec\n   * @return {Promise} - the http request promise\n   */\n  getOAuthToken (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getOAuthTokenParameterValidator(parameters)\n    const { apiUrl, queryParams } = parameters\n\n    const url = `${apiUrl}/oauth/access-token`\n    log(`POST ${url} queryParams:${JSON.stringify(queryParams)}`)\n\n    return axios({\n      url,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Accept: 'application/json'\n      },\n      params: queryParams\n    })\n  }\n}\n\nconst getOAuthTokenParameterValidator = struct.interface({\n  apiUrl: 'string',\n  queryParams: struct.union([\n    struct.object({\n      client_id: 'string',\n      client_secret: 'string',\n      grant_type: struct.literal(ACCESS_TOKEN_GRANT_TYPE),\n      code: 'string',\n      redirect_uri: 'string'\n    }),\n    struct.object({\n      client_id: 'string',\n      client_secret: 'string',\n      grant_type: struct.literal(REFRESH_TOKEN_GRANT_TYPE),\n      refresh_token: 'string'\n    })\n  ])\n})\n\nmodule.exports = OAuth\n"],"file":"oauth.js"}