{"version":3,"sources":["entities/payment.js"],"names":["log","Payment","options","parameters","Object","assign","getPaymentOrderParameterValidator","apiUrl","accessToken","paymentOrderUid","url","method","headers","getPaymentOrderPaymentsParameterValidator","listStandingOrdersParameterValidator","accountUid","categoryUid","getStandingOrderParameterValidator","struct","minAPIParameterDefintion","module","exports"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport debug from 'debug'\nimport { defaultHeaders } from '../utils/http'\nimport { struct, minAPIParameterDefintion } from '../utils/validator'\n\nconst log = debug('starling:payment-service')\n\n/**\n * Service to interact with a customer's payments\n */\nclass Payment {\n  /**\n   * Create a new payment service\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options\n  }\n\n  /**\n   * Get a payment order\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.paymentOrderUid - the payment order uid\n   * @return {Promise} - the http request promise\n   */\n  getPaymentOrder (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getPaymentOrderParameterValidator(parameters)\n    const { apiUrl, accessToken, paymentOrderUid } = parameters\n\n    const url = `${apiUrl}/api/v2/payments/local/payment-order/${paymentOrderUid}`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get a payment order's payments\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.paymentOrderUid - the payment order uid\n   * @return {Promise} - the http request promise\n   */\n  getPaymentOrderPayments (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getPaymentOrderPaymentsParameterValidator(parameters)\n    const { apiUrl, accessToken, paymentOrderUid } = parameters\n\n    const url = `${apiUrl}/api/v2/payments/local/payment-order/${paymentOrderUid}/payments`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * List standing orders\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid of the account to get standing orders of\n   * @param {string} parameters.categoryUid - the category uid of the category to get standing orders of\n   * @return {Promise} - the http request promise\n   */\n  listStandingOrders (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    listStandingOrdersParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, categoryUid } = parameters\n\n    const url = `${apiUrl}/api/v2/payments/local/account/${accountUid}/category/${categoryUid}/standing-orders`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get a standing order\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid of the standing order\n   * @param {string} parameters.categoryUid - the category uid of the standing order\n   * @param {string} parameters.paymentOrderUid - the payment order uid of the standing order\n   * @return {Promise} - the http request promise\n   */\n  getStandingOrder (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getStandingOrderParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, categoryUid, paymentOrderUid } = parameters\n\n    const url = `${apiUrl}/api/v2/payments/local/account/${accountUid}/category/${categoryUid}/standing-orders/${paymentOrderUid}`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n}\n\nconst getPaymentOrderParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  paymentOrderUid: 'uuid'\n})\n\nconst getPaymentOrderPaymentsParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  paymentOrderUid: 'uuid'\n})\n\nconst listStandingOrdersParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  categoryUid: 'uuid'\n})\n\nconst getStandingOrderParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  categoryUid: 'uuid',\n  paymentOrderUid: 'uuid'\n})\n\nmodule.exports = Payment\n"],"file":"payment.js"}