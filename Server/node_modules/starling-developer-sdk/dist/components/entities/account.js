(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["axios", "debug", "../utils/http", "../utils/validator"], factory);
  } else if (typeof exports !== "undefined") {
    factory(require("axios"), require("debug"), require("../utils/http"), require("../utils/validator"));
  } else {
    var mod = {
      exports: {}
    };
    factory(global.axios, global.debug, global.http, global.validator);
    global.account = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_axios, _debug, _http, _validator) {
  "use strict";

  _axios = _interopRequireDefault(_axios);
  _debug = _interopRequireDefault(_debug);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var log = (0, _debug["default"])('starling:account-service');
  /**
   * Service to interact with a customer's account
   */

  var Account = /*#__PURE__*/function () {
    /**
     * Creates an instance of the account client
     * @param {Object} options - application config
     */
    function Account(options) {
      _classCallCheck(this, Account);

      this.options = options;
    }
    /**
     * Get an account holder's bank accounts
     * @param {string} parameters.apiUrl - the API URL
     * @param {string} parameters.accessToken - the oauth bearer token
     * @return {Promise} - the http request promise
     */


    _createClass(Account, [{
      key: "getAccounts",
      value: function getAccounts(parameters) {
        parameters = Object.assign({}, this.options, parameters);
        (0, _validator.minAPIParameterValidator)(parameters);
        var _parameters = parameters,
            apiUrl = _parameters.apiUrl,
            accessToken = _parameters.accessToken;
        var url = "".concat(apiUrl, "/api/v2/accounts");
        log("GET ".concat(url));
        return (0, _axios["default"])({
          method: 'GET',
          url: url,
          headers: (0, _http.defaultHeaders)(accessToken)
        });
      }
      /**
       * Get an account's bank identifiers
       * @param {string} parameters.apiUrl - the API URL
       * @param {string} parameters.accessToken - the oauth bearer token
       * @param {string} parameters.accountUid - the account uid
       * @return {Promise} - the http request promise
       */

    }, {
      key: "getAccountIdentifiers",
      value: function getAccountIdentifiers(parameters) {
        parameters = Object.assign({}, this.options, parameters);
        getAccountIdentifiersParameterValidator(parameters);
        var _parameters2 = parameters,
            apiUrl = _parameters2.apiUrl,
            accessToken = _parameters2.accessToken,
            accountUid = _parameters2.accountUid;
        var url = "".concat(apiUrl, "/api/v2/accounts/").concat(accountUid, "/identifiers");
        log("GET ".concat(url));
        return (0, _axios["default"])({
          method: 'GET',
          url: url,
          headers: (0, _http.defaultHeaders)(accessToken)
        });
      }
      /**
       * Get an account's balance
       * @param {string} parameters.apiUrl - the API URL
       * @param {string} parameters.accessToken - the oauth bearer token
       * @param {string} parameters.accountUid - the account uid
       * @return {Promise} - the http request promise
       */

    }, {
      key: "getAccountBalance",
      value: function getAccountBalance(parameters) {
        parameters = Object.assign({}, this.options, parameters);
        getAccountBalanceParameterValidator(parameters);
        var _parameters3 = parameters,
            apiUrl = _parameters3.apiUrl,
            accessToken = _parameters3.accessToken,
            accountUid = _parameters3.accountUid;
        var url = "".concat(apiUrl, "/api/v2/accounts/").concat(accountUid, "/balance");
        log("GET ".concat(url));
        return (0, _axios["default"])({
          method: 'GET',
          url: url,
          headers: (0, _http.defaultHeaders)(accessToken)
        });
      }
      /**
       * Get whether there are available funds for a requested amount
       * @param {string} parameters.apiUrl - the API URL
       * @param {string} parameters.accessToken - the oauth bearer token
       * @param {string} parameters.accountUid - the account uid
       * @param {number} parameters.targetAmountInMinorUnits - the target amount in minor units
       * @return {Promise} - the http request promise
       */

    }, {
      key: "getConfirmationOfFunds",
      value: function getConfirmationOfFunds(parameters) {
        parameters = Object.assign({}, this.options, parameters);
        getConfirmationOfFundsParameterValidator(parameters);
        var _parameters4 = parameters,
            apiUrl = _parameters4.apiUrl,
            accessToken = _parameters4.accessToken,
            accountUid = _parameters4.accountUid,
            targetAmountInMinorUnits = _parameters4.targetAmountInMinorUnits;
        var url = "".concat(apiUrl, "/api/v2/accounts/").concat(accountUid, "/confirmation-of-funds");
        log("GET ".concat(url));
        return (0, _axios["default"])({
          method: 'GET',
          url: url,
          headers: (0, _http.defaultHeaders)(accessToken),
          params: {
            targetAmountInMinorUnits: targetAmountInMinorUnits
          }
        });
      }
      /**
       * Get list of statement periods which are available for an account
       * @param {string} parameters.apiUrl - the API URL
       * @param {string} parameters.accessToken - the oauth bearer token
       * @param {string} parameters.accountUid - the account uid
       * @return {Promise} - the http request promise
       */

    }, {
      key: "getStatementPeriods",
      value: function getStatementPeriods(parameters) {
        parameters = Object.assign({}, this.options, parameters);
        getStatementPeriodsParameterValidator(parameters);
        var _parameters5 = parameters,
            apiUrl = _parameters5.apiUrl,
            accessToken = _parameters5.accessToken,
            accountUid = _parameters5.accountUid;
        var url = "".concat(apiUrl, "/api/v2/accounts/").concat(accountUid, "/statement/available-periods");
        log("GET ".concat(url));
        return (0, _axios["default"])({
          method: 'GET',
          url: url,
          headers: (0, _http.defaultHeaders)(accessToken)
        });
      }
      /**
       * Download a statement for a given statement period
       * @param {string} parameters.apiUrl - the API URL
       * @param {string} parameters.accessToken - the oauth bearer token
       * @param {string} parameters.accountUid - the account uid
       * @param {string=} parameters.yearMonth - the statement period's year month (yyyy-MM)
       * @param {string=} parameters.format - one of 'application/pdf' or 'text/csv'
       * @param {string=} parameters.responseType - the axios responseType for the request
       * @return {Promise} - the http request promise
       */

    }, {
      key: "getStatementForPeriod",
      value: function getStatementForPeriod(parameters) {
        parameters = Object.assign({}, {
          yearMonth: new Date().toISOString().slice(0, 7),
          format: 'text/csv',
          responseType: 'stream'
        }, this.options, parameters);
        getStatementForPeriodParameterValidator(parameters);
        var _parameters6 = parameters,
            apiUrl = _parameters6.apiUrl,
            accessToken = _parameters6.accessToken,
            accountUid = _parameters6.accountUid,
            format = _parameters6.format,
            yearMonth = _parameters6.yearMonth,
            responseType = _parameters6.responseType;
        var url = "".concat(apiUrl, "/api/v2/accounts/").concat(accountUid, "/statement/download");
        log("GET ".concat(url));
        return (0, _axios["default"])({
          method: 'GET',
          url: url,
          headers: _objectSpread(_objectSpread({}, (0, _http.defaultHeaders)(accessToken)), {}, {
            Accept: format
          }),
          params: {
            yearMonth: yearMonth
          },
          responseType: responseType
        });
      }
      /**
       * Download a statement for a given date range
       * @param {string} parameters.apiUrl - the API URL
       * @param {string} parameters.accessToken - the oauth bearer token
       * @param {string} parameters.accountUid - the account uid
       * @param {string} parameters.start - the beginning of the statement date range (yyyy-MM-dd)
       * @param {string=} parameters.end - the end of the statement date range (yyyy-MM-dd)
       * @param {string=} parameters.format - one of 'application/pdf' or 'text/csv'
       * @param {string=} parameters.responseType - the axios responseType for the request
       * @return {Promise} - the http request promise
       */

    }, {
      key: "getStatementForRange",
      value: function getStatementForRange(parameters) {
        parameters = Object.assign({}, {
          format: 'text/csv',
          responseType: 'stream'
        }, this.options, parameters);
        getStatementForRangeParameterValidator(parameters);
        var _parameters7 = parameters,
            apiUrl = _parameters7.apiUrl,
            accessToken = _parameters7.accessToken,
            accountUid = _parameters7.accountUid,
            start = _parameters7.start,
            end = _parameters7.end,
            format = _parameters7.format,
            responseType = _parameters7.responseType;
        var url = "".concat(apiUrl, "/api/v2/accounts/").concat(accountUid, "/statement/downloadForDateRange");
        log("GET ".concat(url));
        return (0, _axios["default"])({
          method: 'GET',
          url: url,
          headers: _objectSpread(_objectSpread({}, (0, _http.defaultHeaders)(accessToken)), {}, {
            Accept: format
          }),
          params: {
            start: start,
            end: end
          },
          responseType: responseType
        });
      }
    }]);

    return Account;
  }();

  var getAccountIdentifiersParameterValidator = _validator.struct["interface"](_objectSpread(_objectSpread({}, _validator.minAPIParameterDefintion), {}, {
    accountUid: 'uuid'
  }));

  var getAccountBalanceParameterValidator = _validator.struct["interface"](_objectSpread(_objectSpread({}, _validator.minAPIParameterDefintion), {}, {
    accountUid: 'uuid'
  }));

  var getConfirmationOfFundsParameterValidator = _validator.struct["interface"](_objectSpread(_objectSpread({}, _validator.minAPIParameterDefintion), {}, {
    accountUid: 'uuid',
    targetAmountInMinorUnits: 'number'
  }));

  var getStatementPeriodsParameterValidator = _validator.struct["interface"](_objectSpread(_objectSpread({}, _validator.minAPIParameterDefintion), {}, {
    accountUid: 'uuid'
  }));

  var getStatementForPeriodParameterValidator = _validator.struct["interface"](_objectSpread(_objectSpread({}, _validator.minAPIParameterDefintion), {}, {
    accountUid: 'uuid',
    yearMonth: 'yearMonth',
    format: _validator.struct["enum"](['application/pdf', 'text/csv']),
    responseType: 'string'
  }));

  var getStatementForRangeParameterValidator = _validator.struct["interface"](_objectSpread(_objectSpread({}, _validator.minAPIParameterDefintion), {}, {
    accountUid: 'uuid',
    start: 'date',
    end: 'date?',
    format: _validator.struct["enum"](['application/pdf', 'text/csv']),
    responseType: 'string'
  }));

  module.exports = Account;
});
//# sourceMappingURL=account.js.map
