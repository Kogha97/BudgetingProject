(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["axios", "debug", "../utils/http", "../utils/validator"], factory);
  } else if (typeof exports !== "undefined") {
    factory(require("axios"), require("debug"), require("../utils/http"), require("../utils/validator"));
  } else {
    var mod = {
      exports: {}
    };
    factory(global.axios, global.debug, global.http, global.validator);
    global.feedItem = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_axios, _debug, _http, _validator) {
  "use strict";

  _axios = _interopRequireDefault(_axios);
  _debug = _interopRequireDefault(_debug);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var log = (0, _debug["default"])('starling:feed-item-service');
  /**
   * Service to interact with a customer's feed items
   */

  var FeedItem = /*#__PURE__*/function () {
    /**
     * Create a new feed item service
     * @param {Object} options - configuration parameters
     */
    function FeedItem(options) {
      _classCallCheck(this, FeedItem);

      this.options = options;
    }
    /**
     * Get feed items created between two timestamps
     * @param {string} parameters.apiUrl - the API URL
     * @param {string} parameters.accessToken - the oauth bearer token
     * @param {string} parameters.accountUid - the account uid
     * @param {string} parameters.categoryUid - the category uid
     * @param {string} parameters.minTransactionTimestamp - timestamp e.g. '2019-10-25T12:34:56.789Z'
     * @param {string} parameters.maxTransactionTimestamp - timestamp e.g. '2019-10-26T12:34:56.789Z'
     * @return {Promise} - the http request promise
     */


    _createClass(FeedItem, [{
      key: "getFeedItemsBetween",
      value: function getFeedItemsBetween(parameters) {
        parameters = Object.assign({}, this.options, parameters);
        getFeedItemsBetweenParameterValidator(parameters);
        var _parameters = parameters,
            apiUrl = _parameters.apiUrl,
            accessToken = _parameters.accessToken,
            accountUid = _parameters.accountUid,
            categoryUid = _parameters.categoryUid,
            minTransactionTimestamp = _parameters.minTransactionTimestamp,
            maxTransactionTimestamp = _parameters.maxTransactionTimestamp;
        var url = "".concat(apiUrl, "/api/v2/feed/account/").concat(accountUid, "/category/").concat(categoryUid, "/transactions-between");
        log("GET ".concat(url));
        return (0, _axios["default"])({
          method: 'GET',
          url: url,
          params: {
            minTransactionTimestamp: minTransactionTimestamp,
            maxTransactionTimestamp: maxTransactionTimestamp
          },
          headers: (0, _http.defaultHeaders)(accessToken)
        });
      }
      /**
       * Get a feed item
       * @param {string} parameters.apiUrl - the API URL
       * @param {string} parameters.accessToken - the oauth bearer token
       * @param {string} parameters.accountUid - the account uid
       * @param {string} parameters.categoryUid - the category uid
       * @param {string} parameters.feedItemUid - the feed item uid
       * @return {Promise} - the http request promise
       */

    }, {
      key: "getFeedItem",
      value: function getFeedItem(parameters) {
        parameters = Object.assign({}, this.options, parameters);
        getFeedItemParameterValidator(parameters);
        var _parameters2 = parameters,
            apiUrl = _parameters2.apiUrl,
            accessToken = _parameters2.accessToken,
            accountUid = _parameters2.accountUid,
            categoryUid = _parameters2.categoryUid,
            feedItemUid = _parameters2.feedItemUid;
        var url = "".concat(apiUrl, "/api/v2/feed/account/").concat(accountUid, "/category/").concat(categoryUid, "/").concat(feedItemUid);
        log("GET ".concat(url));
        return (0, _axios["default"])({
          method: 'GET',
          url: url,
          headers: (0, _http.defaultHeaders)(accessToken)
        });
      }
      /**
       * Get feed items created or updated since a given timestamp
       * @param {string} parameters.apiUrl - the API URL
       * @param {string} parameters.accessToken - the oauth bearer token
       * @param {string} parameters.accountUid - the account uid
       * @param {string} parameters.categoryUid - the category uid
       * @param {string} parameters.changesSince - timestamp e.g. '2019-10-25T12:34:56.789Z'
       * @return {Promise} - the http request promise
       */

    }, {
      key: "getFeedItemsChangedSince",
      value: function getFeedItemsChangedSince(parameters) {
        parameters = Object.assign({}, this.options, parameters);
        getFeedItemsChangedSinceParameterValidator(parameters);
        var _parameters3 = parameters,
            apiUrl = _parameters3.apiUrl,
            accessToken = _parameters3.accessToken,
            accountUid = _parameters3.accountUid,
            categoryUid = _parameters3.categoryUid,
            changesSince = _parameters3.changesSince;
        var url = "".concat(apiUrl, "/api/v2/feed/account/").concat(accountUid, "/category/").concat(categoryUid);
        log("GET ".concat(url));
        return (0, _axios["default"])({
          method: 'GET',
          url: url,
          params: {
            changesSince: changesSince
          },
          headers: (0, _http.defaultHeaders)(accessToken)
        });
      }
    }]);

    return FeedItem;
  }();

  var getFeedItemsBetweenParameterValidator = _validator.struct["interface"](_objectSpread(_objectSpread({}, _validator.minAPIParameterDefintion), {}, {
    accountUid: 'uuid',
    categoryUid: 'uuid',
    minTransactionTimestamp: 'timestamp',
    maxTransactionTimestamp: 'timestamp'
  }));

  var getFeedItemParameterValidator = _validator.struct["interface"](_objectSpread(_objectSpread({}, _validator.minAPIParameterDefintion), {}, {
    accountUid: 'uuid',
    categoryUid: 'uuid',
    feedItemUid: 'uuid'
  }));

  var getFeedItemsChangedSinceParameterValidator = _validator.struct["interface"](_objectSpread(_objectSpread({}, _validator.minAPIParameterDefintion), {}, {
    accountUid: 'uuid',
    categoryUid: 'uuid',
    changesSince: 'timestamp'
  }));

  module.exports = FeedItem;
});
//# sourceMappingURL=feedItem.js.map
