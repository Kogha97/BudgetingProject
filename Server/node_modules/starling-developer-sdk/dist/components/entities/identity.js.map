{"version":3,"sources":["entities/identity.js"],"names":["log","Identity","options","parameters","Object","assign","apiUrl","accessToken","url","method","headers","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,MAAMA,GAAG,GAAG,uBAAM,2BAAN,CAAZ;AAEA;;;;MAGMC,Q;AACJ;;;;AAIA,sBAAaC,OAAb,EAAsB;AAAA;;AACpB,WAAKA,OAAL,GAAeA,OAAf;AACD;AAED;;;;;;;;;;uCAMkBC,U,EAAY;AAC5BA,QAAAA,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKH,OAAvB,EAAgCC,UAAhC,CAAb;AACA,iDAAyBA,UAAzB;AAF4B,0BAGIA,UAHJ;AAAA,YAGpBG,MAHoB,eAGpBA,MAHoB;AAAA,YAGZC,WAHY,eAGZA,WAHY;AAK5B,YAAMC,GAAG,aAAMF,MAAN,2BAAT;AACAN,QAAAA,GAAG,eAAQQ,GAAR,EAAH;AAEA,eAAO,uBAAM;AACXC,UAAAA,MAAM,EAAE,KADG;AAEXD,UAAAA,GAAG,EAAHA,GAFW;AAGXE,UAAAA,OAAO,EAAE,0BAAeH,WAAf;AAHE,SAAN,CAAP;AAKD;AAED;;;;;;;;;+CAM0BJ,U,EAAY;AACpCA,QAAAA,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKH,OAAvB,EAAgCC,UAAhC,CAAb;AACA,iDAAyBA,UAAzB;AAFoC,2BAGJA,UAHI;AAAA,YAG5BG,MAH4B,gBAG5BA,MAH4B;AAAA,YAGpBC,WAHoB,gBAGpBA,WAHoB;AAKpC,YAAMC,GAAG,aAAMF,MAAN,gCAAT;AACAN,QAAAA,GAAG,eAAQQ,GAAR,EAAH;AAEA,eAAO,uBAAM;AACXC,UAAAA,MAAM,EAAE,KADG;AAEXD,UAAAA,GAAG,EAAHA,GAFW;AAGXE,UAAAA,OAAO,EAAE,0BAAeH,WAAf;AAHE,SAAN,CAAP;AAKD;;;;;;AAGHI,EAAAA,MAAM,CAACC,OAAP,GAAiBX,QAAjB","sourcesContent":["import axios from 'axios'\nimport debug from 'debug'\nimport { defaultHeaders } from '../utils/http'\nimport { minAPIParameterValidator } from '../utils/validator'\n\nconst log = debug('starling:identity-service')\n\n/**\n * Service to interact with the API User identities endpoints\n */\nclass Identity {\n  /**\n   * Creates an instance of the identity client\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options\n  }\n\n  /**\n   * Get the current token identity\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token.\n   * @return {Promise} - the http request promise\n   */\n  getTokenIdentity (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/identity/token`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get the authorising individual's identity\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token.\n   * @return {Promise} - the http request promise\n   */\n  getAuthorisingIndividual (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/identity/individual`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n}\n\nmodule.exports = Identity\n"],"file":"identity.js"}