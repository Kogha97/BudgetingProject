(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["axios", "debug", "../utils/validator"], factory);
  } else if (typeof exports !== "undefined") {
    factory(require("axios"), require("debug"), require("../utils/validator"));
  } else {
    var mod = {
      exports: {}
    };
    factory(global.axios, global.debug, global.validator);
    global.oauth = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_axios, _debug, _validator) {
  "use strict";

  _axios = _interopRequireDefault(_axios);
  _debug = _interopRequireDefault(_debug);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var ACCESS_TOKEN_GRANT_TYPE = 'authorization_code';
  var REFRESH_TOKEN_GRANT_TYPE = 'refresh_token';
  var log = (0, _debug["default"])('starling:oauth-service');
  /**
   * Service to interact with a the oauth endpoint
   */

  var OAuth = /*#__PURE__*/function () {
    /**
     * Create a new oauth service
     * @param {Object} options - configuration parameters
     */
    function OAuth(options) {
      _classCallCheck(this, OAuth);

      this.options = options;
    }
    /**
     * Exchanges the authorization code for an access token
     * @param {string} authorizationCode - the authorization code, acquired from the user agent after the user authenticates with starling
     * @return {Promise} - the http request promise
     */


    _createClass(OAuth, [{
      key: "getAccessToken",
      value: function getAccessToken(authorizationCode) {
        return this.getOAuthToken({
          queryParams: {
            code: authorizationCode,
            grant_type: ACCESS_TOKEN_GRANT_TYPE,
            client_id: this.options.clientId,
            client_secret: this.options.clientSecret,
            redirect_uri: this.options.redirectUri
          }
        });
      }
      /**
       * Exchanges the authorization code for an access token
       * @param {string} refreshToken - the oauth refresh token, used when the access token expires to claim a new access token.
       * @return {Promise} - the http request promise
       */

    }, {
      key: "refreshAccessToken",
      value: function refreshAccessToken(refreshToken) {
        return this.getOAuthToken({
          queryParams: {
            refresh_token: refreshToken,
            grant_type: REFRESH_TOKEN_GRANT_TYPE,
            client_id: this.options.clientId,
            client_secret: this.options.clientSecret
          }
        });
      }
      /**
       * Gets the access token from the starling OAuth endpoint
       * @param {string} parameters.apiUrl - the OAuth url
       * @param {object} parameters.queryParams - the query params passed to the OAuth endpoint as per the OAuth spec
       * @return {Promise} - the http request promise
       */

    }, {
      key: "getOAuthToken",
      value: function getOAuthToken(parameters) {
        parameters = Object.assign({}, this.options, parameters);
        getOAuthTokenParameterValidator(parameters);
        var _parameters = parameters,
            apiUrl = _parameters.apiUrl,
            queryParams = _parameters.queryParams;
        var url = "".concat(apiUrl, "/oauth/access-token");
        log("POST ".concat(url, " queryParams:").concat(JSON.stringify(queryParams)));
        return (0, _axios["default"])({
          url: url,
          method: 'POST',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            Accept: 'application/json'
          },
          params: queryParams
        });
      }
    }]);

    return OAuth;
  }();

  var getOAuthTokenParameterValidator = _validator.struct["interface"]({
    apiUrl: 'string',
    queryParams: _validator.struct.union([_validator.struct.object({
      client_id: 'string',
      client_secret: 'string',
      grant_type: _validator.struct.literal(ACCESS_TOKEN_GRANT_TYPE),
      code: 'string',
      redirect_uri: 'string'
    }), _validator.struct.object({
      client_id: 'string',
      client_secret: 'string',
      grant_type: _validator.struct.literal(REFRESH_TOKEN_GRANT_TYPE),
      refresh_token: 'string'
    })])
  });

  module.exports = OAuth;
});
//# sourceMappingURL=oauth.js.map
