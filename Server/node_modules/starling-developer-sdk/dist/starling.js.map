{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/entities/account.js","src/entities/accountHolder.js","src/entities/address.js","src/entities/card.js","src/entities/feedItem.js","src/entities/identity.js","src/entities/mandate.js","src/entities/oauth.js","src/entities/payee.js","src/entities/payment.js","src/entities/savingsGoal.js","src/starling.js","src/utils/http.js","src/utils/validator.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACKA,MAAM,GAAG,GAAG,uBAAM,0BAAN,CAAZ;AAEA;;;;MAGM,O;AACJ;;;;AAIA,qBAAa,OAAb,EAAsB;AAAA;;AACpB,WAAK,OAAL,GAAe,OAAf;AACD;AAED;;;;;;;;;;kCAMa,U,EAAY;AACvB,QAAA,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,OAAvB,EAAgC,UAAhC,CAAb;AACA,iDAAyB,UAAzB;AAFuB,0BAGS,UAHT;AAAA,YAGf,MAHe,eAGf,MAHe;AAAA,YAGP,WAHO,eAGP,WAHO;AAKvB,YAAM,GAAG,aAAM,MAAN,qBAAT;AACA,QAAA,GAAG,eAAQ,GAAR,EAAH;AAEA,eAAO,uBAAM;AACX,UAAA,MAAM,EAAE,KADG;AAEX,UAAA,GAAG,EAAH,GAFW;AAGX,UAAA,OAAO,EAAE,0BAAe,WAAf;AAHE,SAAN,CAAP;AAKD;AAED;;;;;;;;;;4CAOuB,U,EAAY;AACjC,QAAA,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,OAAvB,EAAgC,UAAhC,CAAb;AACA,QAAA,uCAAuC,CAAC,UAAD,CAAvC;AAFiC,2BAGW,UAHX;AAAA,YAGzB,MAHyB,gBAGzB,MAHyB;AAAA,YAGjB,WAHiB,gBAGjB,WAHiB;AAAA,YAGJ,UAHI,gBAGJ,UAHI;AAKjC,YAAM,GAAG,aAAM,MAAN,8BAAgC,UAAhC,iBAAT;AACA,QAAA,GAAG,eAAQ,GAAR,EAAH;AAEA,eAAO,uBAAM;AACX,UAAA,MAAM,EAAE,KADG;AAEX,UAAA,GAAG,EAAH,GAFW;AAGX,UAAA,OAAO,EAAE,0BAAe,WAAf;AAHE,SAAN,CAAP;AAKD;AAED;;;;;;;;;;wCAOmB,U,EAAY;AAC7B,QAAA,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,OAAvB,EAAgC,UAAhC,CAAb;AACA,QAAA,mCAAmC,CAAC,UAAD,CAAnC;AAF6B,2BAGe,UAHf;AAAA,YAGrB,MAHqB,gBAGrB,MAHqB;AAAA,YAGb,WAHa,gBAGb,WAHa;AAAA,YAGA,UAHA,gBAGA,UAHA;AAK7B,YAAM,GAAG,aAAM,MAAN,8BAAgC,UAAhC,aAAT;AACA,QAAA,GAAG,eAAQ,GAAR,EAAH;AAEA,eAAO,uBAAM;AACX,UAAA,MAAM,EAAE,KADG;AAEX,UAAA,GAAG,EAAH,GAFW;AAGX,UAAA,OAAO,EAAE,0BAAe,WAAf;AAHE,SAAN,CAAP;AAKD;AAED;;;;;;;;;;;6CAQwB,U,EAAY;AAClC,QAAA,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,OAAvB,EAAgC,UAAhC,CAAb;AACA,QAAA,wCAAwC,CAAC,UAAD,CAAxC;AAFkC,2BAGoC,UAHpC;AAAA,YAG1B,MAH0B,gBAG1B,MAH0B;AAAA,YAGlB,WAHkB,gBAGlB,WAHkB;AAAA,YAGL,UAHK,gBAGL,UAHK;AAAA,YAGO,wBAHP,gBAGO,wBAHP;AAKlC,YAAM,GAAG,aAAM,MAAN,8BAAgC,UAAhC,2BAAT;AACA,QAAA,GAAG,eAAQ,GAAR,EAAH;AAEA,eAAO,uBAAM;AACX,UAAA,MAAM,EAAE,KADG;AAEX,UAAA,GAAG,EAAH,GAFW;AAGX,UAAA,OAAO,EAAE,0BAAe,WAAf,CAHE;AAIX,UAAA,MAAM,EAAE;AACN,YAAA,wBAAwB,EAAxB;AADM;AAJG,SAAN,CAAP;AAQD;AAED;;;;;;;;;;0CAOqB,U,EAAY;AAC/B,QAAA,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,OAAvB,EAAgC,UAAhC,CAAb;AACA,QAAA,qCAAqC,CAAC,UAAD,CAArC;AAF+B,2BAGa,UAHb;AAAA,YAGvB,MAHuB,gBAGvB,MAHuB;AAAA,YAGf,WAHe,gBAGf,WAHe;AAAA,YAGF,UAHE,gBAGF,UAHE;AAK/B,YAAM,GAAG,aAAM,MAAN,8BAAgC,UAAhC,iCAAT;AACA,QAAA,GAAG,eAAQ,GAAR,EAAH;AAEA,eAAO,uBAAM;AACX,UAAA,MAAM,EAAE,KADG;AAEX,UAAA,GAAG,EAAH,GAFW;AAGX,UAAA,OAAO,EAAE,0BAAe,WAAf;AAHE,SAAN,CAAP;AAKD;AAED;;;;;;;;;;;;;4CAUuB,U,EAAY;AACjC,QAAA,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB;AAAE,UAAA,SAAS,EAAE,IAAI,IAAJ,GAAW,WAAX,GAAyB,KAAzB,CAA+B,CAA/B,EAAkC,CAAlC,CAAb;AAAmD,UAAA,MAAM,EAAE,UAA3D;AAAuE,UAAA,YAAY,EAAE;AAArF,SAAlB,EAAmH,KAAK,OAAxH,EAAiI,UAAjI,CAAb;AACA,QAAA,uCAAuC,CAAC,UAAD,CAAvC;AAFiC,2BAG4C,UAH5C;AAAA,YAGzB,MAHyB,gBAGzB,MAHyB;AAAA,YAGjB,WAHiB,gBAGjB,WAHiB;AAAA,YAGJ,UAHI,gBAGJ,UAHI;AAAA,YAGQ,MAHR,gBAGQ,MAHR;AAAA,YAGgB,SAHhB,gBAGgB,SAHhB;AAAA,YAG2B,YAH3B,gBAG2B,YAH3B;AAKjC,YAAM,GAAG,aAAM,MAAN,8BAAgC,UAAhC,wBAAT;AACA,QAAA,GAAG,eAAQ,GAAR,EAAH;AAEA,eAAO,uBAAM;AACX,UAAA,MAAM,EAAE,KADG;AAEX,UAAA,GAAG,EAAH,GAFW;AAGX,UAAA,OAAO,kCACF,0BAAe,WAAf,CADE;AAEL,YAAA,MAAM,EAAE;AAFH,YAHI;AAOX,UAAA,MAAM,EAAE;AACN,YAAA,SAAS,EAAT;AADM,WAPG;AAUX,UAAA,YAAY,EAAZ;AAVW,SAAN,CAAP;AAYD;AAED;;;;;;;;;;;;;;2CAWsB,U,EAAY;AAChC,QAAA,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB;AAAE,UAAA,MAAM,EAAE,UAAV;AAAsB,UAAA,YAAY,EAAE;AAApC,SAAlB,EAAkE,KAAK,OAAvE,EAAgF,UAAhF,CAAb;AACA,QAAA,sCAAsC,CAAC,UAAD,CAAtC;AAFgC,2BAG8C,UAH9C;AAAA,YAGxB,MAHwB,gBAGxB,MAHwB;AAAA,YAGhB,WAHgB,gBAGhB,WAHgB;AAAA,YAGH,UAHG,gBAGH,UAHG;AAAA,YAGS,KAHT,gBAGS,KAHT;AAAA,YAGgB,GAHhB,gBAGgB,GAHhB;AAAA,YAGqB,MAHrB,gBAGqB,MAHrB;AAAA,YAG6B,YAH7B,gBAG6B,YAH7B;AAKhC,YAAM,GAAG,aAAM,MAAN,8BAAgC,UAAhC,oCAAT;AACA,QAAA,GAAG,eAAQ,GAAR,EAAH;AAEA,eAAO,uBAAM;AACX,UAAA,MAAM,EAAE,KADG;AAEX,UAAA,GAAG,EAAH,GAFW;AAGX,UAAA,OAAO,kCACF,0BAAe,WAAf,CADE;AAEL,YAAA,MAAM,EAAE;AAFH,YAHI;AAOX,UAAA,MAAM,EAAE;AACN,YAAA,KAAK,EAAL,KADM;AAEN,YAAA,GAAG,EAAH;AAFM,WAPG;AAWX,UAAA,YAAY,EAAZ;AAXW,SAAN,CAAP;AAaD;;;;;;AAGH,MAAM,uCAAuC,GAAG,+DAAsB,mCAAtB;AAAgD,IAAA,UAAU,EAAE;AAA5D,KAAhD;;AAEA,MAAM,mCAAmC,GAAG,+DAAsB,mCAAtB;AAAgD,IAAA,UAAU,EAAE;AAA5D,KAA5C;;AAEA,MAAM,wCAAwC,GAAG,+DAAsB,mCAAtB;AAAgD,IAAA,UAAU,EAAE,MAA5D;AAAoE,IAAA,wBAAwB,EAAE;AAA9F,KAAjD;;AAEA,MAAM,qCAAqC,GAAG,+DAAsB,mCAAtB;AAAgD,IAAA,UAAU,EAAE;AAA5D,KAA9C;;AAEA,MAAM,uCAAuC,GAAG,+DAC3C,mCAD2C;AAE9C,IAAA,UAAU,EAAE,MAFkC;AAG9C,IAAA,SAAS,EAAE,WAHmC;AAI9C,IAAA,MAAM,EAAE,0BAAY,CAAC,iBAAD,EAAoB,UAApB,CAAZ,CAJsC;AAK9C,IAAA,YAAY,EAAE;AALgC,KAAhD;;AAQA,MAAM,sCAAsC,GAAG,+DAC1C,mCAD0C;AAE7C,IAAA,UAAU,EAAE,MAFiC;AAG7C,IAAA,KAAK,EAAE,MAHsC;AAI7C,IAAA,GAAG,EAAE,OAJwC;AAK7C,IAAA,MAAM,EAAE,0BAAY,CAAC,iBAAD,EAAoB,UAApB,CAAZ,CALqC;AAM7C,IAAA,YAAY,EAAE;AAN+B,KAA/C;;AASA,EAAA,MAAM,CAAC,OAAP,GAAiB,OAAjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3NA,MAAM,GAAG,GAAG,uBAAM,iCAAN,CAAZ;AAEA;;;;MAGM,a;AACJ;;;;AAIA,2BAAa,OAAb,EAAsB;AAAA;;AACpB,WAAK,OAAL,GAAe,OAAf;AACD;AAED;;;;;;;;;;uCAMkB,U,EAAY;AAC5B,QAAA,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,OAAvB,EAAgC,UAAhC,CAAb;AACA,iDAAyB,UAAzB;AAF4B,0BAGI,UAHJ;AAAA,YAGpB,MAHoB,eAGpB,MAHoB;AAAA,YAGZ,WAHY,eAGZ,WAHY;AAK5B,YAAM,GAAG,aAAM,MAAN,2BAAT;AACA,QAAA,GAAG,eAAQ,GAAR,EAAH;AAEA,eAAO,uBAAM;AACX,UAAA,MAAM,EAAE,KADG;AAEX,UAAA,GAAG,EAAH,GAFW;AAGX,UAAA,OAAO,EAAE,0BAAe,WAAf;AAHE,SAAN,CAAP;AAKD;AAED;;;;;;;;;2CAMsB,U,EAAY;AAChC,QAAA,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,OAAvB,EAAgC,UAAhC,CAAb;AACA,iDAAyB,UAAzB;AAFgC,2BAGA,UAHA;AAAA,YAGxB,MAHwB,gBAGxB,MAHwB;AAAA,YAGhB,WAHgB,gBAGhB,WAHgB;AAKhC,YAAM,GAAG,aAAM,MAAN,gCAAT;AACA,QAAA,GAAG,eAAQ,GAAR,EAAH;AAEA,eAAO,uBAAM;AACX,UAAA,MAAM,EAAE,KADG;AAEX,UAAA,GAAG,EAAH,GAFW;AAGX,UAAA,OAAO,EAAE,0BAAe,WAAf;AAHE,SAAN,CAAP;AAKD;AAED;;;;;;;;;iDAM4B,U,EAAY;AACtC,QAAA,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,OAAvB,EAAgC,UAAhC,CAAb;AACA,iDAAyB,UAAzB;AAFsC,2BAGN,UAHM;AAAA,YAG9B,MAH8B,gBAG9B,MAH8B;AAAA,YAGtB,WAHsB,gBAGtB,WAHsB;AAKtC,YAAM,GAAG,aAAM,MAAN,sCAAT;AACA,QAAA,GAAG,eAAQ,GAAR,EAAH;AAEA,eAAO,uBAAM;AACX,UAAA,MAAM,EAAE,KADG;AAEX,UAAA,GAAG,EAAH,GAFW;AAGX,UAAA,OAAO,EAAE,0BAAe,WAAf;AAHE,SAAN,CAAP;AAKD;AAED;;;;;;;;;4CAMuB,U,EAAY;AACjC,QAAA,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,OAAvB,EAAgC,UAAhC,CAAb;AACA,iDAAyB,UAAzB;AAFiC,2BAGD,UAHC;AAAA,YAGzB,MAHyB,gBAGzB,MAHyB;AAAA,YAGjB,WAHiB,gBAGjB,WAHiB;AAKjC,YAAM,GAAG,aAAM,MAAN,iCAAT;AACA,QAAA,GAAG,eAAQ,GAAR,EAAH;AAEA,eAAO,uBAAM;AACX,UAAA,MAAM,EAAE,KADG;AAEX,UAAA,GAAG,EAAH,GAFW;AAGX,UAAA,OAAO,EAAE,0BAAe,WAAf;AAHE,SAAN,CAAP;AAKD;AAED;;;;;;;;;+CAM0B,U,EAAY;AACpC,QAAA,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,OAAvB,EAAgC,UAAhC,CAAb;AACA,iDAAyB,UAAzB;AAFoC,2BAGJ,UAHI;AAAA,YAG5B,MAH4B,gBAG5B,MAH4B;AAAA,YAGpB,WAHoB,gBAGpB,WAHoB;AAKpC,YAAM,GAAG,aAAM,MAAN,oCAAT;AACA,QAAA,GAAG,eAAQ,GAAR,EAAH;AAEA,eAAO,uBAAM;AACX,UAAA,MAAM,EAAE,KADG;AAEX,UAAA,GAAG,EAAH,GAFW;AAGX,UAAA,OAAO,EAAE,0BAAe,WAAf;AAHE,SAAN,CAAP;AAKD;AAED;;;;;;;;;gEAM2C,U,EAAY;AACrD,QAAA,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,OAAvB,EAAgC,UAAhC,CAAb;AACA,iDAAyB,UAAzB;AAFqD,2BAGrB,UAHqB;AAAA,YAG7C,MAH6C,gBAG7C,MAH6C;AAAA,YAGrC,WAHqC,gBAGrC,WAHqC;AAKrD,YAAM,GAAG,aAAM,MAAN,uDAAT;AACA,QAAA,GAAG,eAAQ,GAAR,EAAH;AAEA,eAAO,uBAAM;AACX,UAAA,MAAM,EAAE,KADG;AAEX,UAAA,GAAG,EAAH,GAFW;AAGX,UAAA,OAAO,EAAE,0BAAe,WAAf;AAHE,SAAN,CAAP;AAKD;AAED;;;;;;;;;oEAM+C,U,EAAY;AACzD,QAAA,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,OAAvB,EAAgC,UAAhC,CAAb;AACA,iDAAyB,UAAzB;AAFyD,2BAGzB,UAHyB;AAAA,YAGjD,MAHiD,gBAGjD,MAHiD;AAAA,YAGzC,WAHyC,gBAGzC,WAHyC;AAKzD,YAAM,GAAG,aAAM,MAAN,2DAAT;AACA,QAAA,GAAG,eAAQ,GAAR,EAAH;AAEA,eAAO,uBAAM;AACX,UAAA,MAAM,EAAE,KADG;AAEX,UAAA,GAAG,EAAH,GAFW;AAGX,UAAA,OAAO,EAAE,0BAAe,WAAf;AAHE,SAAN,CAAP;AAKD;;;;;;AAGH,EAAA,MAAM,CAAC,OAAP,GAAiB,aAAjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClKA,MAAM,GAAG,GAAG,uBAAM,0BAAN,CAAZ;AAEA;;;;MAGM,O;AACJ;;;;AAIA,qBAAa,OAAb,EAAsB;AAAA;;AACpB,WAAK,OAAL,GAAe,OAAf;AACD;AAED;;;;;;;;;;mCAMc,U,EAAY;AACxB,QAAA,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,OAAvB,EAAgC,UAAhC,CAAb;AACA,iDAAyB,UAAzB;AAFwB,0BAGQ,UAHR;AAAA,YAGhB,MAHgB,eAGhB,MAHgB;AAAA,YAGR,WAHQ,eAGR,WAHQ;AAKxB,YAAM,GAAG,aAAM,MAAN,sBAAT;AACA,QAAA,GAAG,eAAQ,GAAR,EAAH;AAEA,eAAO,uBAAM;AACX,UAAA,MAAM,EAAE,KADG;AAEX,UAAA,GAAG,EAAH,GAFW;AAGX,UAAA,OAAO,EAAE,0BAAe,WAAf;AAHE,SAAN,CAAP;AAKD;;;;;;AAGH,EAAA,MAAM,CAAC,OAAP,GAAiB,OAAjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpCA,MAAM,GAAG,GAAG,uBAAM,uBAAN,CAAZ;AAEA;;;;MAGM,I;AACJ;;;;AAIA,kBAAa,OAAb,EAAsB;AAAA;;AACpB,WAAK,OAAL,GAAe,OAAf;AACD;AAED;;;;;;;;;;+BAMU,U,EAAY;AACpB,QAAA,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,OAAvB,EAAgC,UAAhC,CAAb;AACA,iDAAyB,UAAzB;AAFoB,0BAGY,UAHZ;AAAA,YAGZ,MAHY,eAGZ,MAHY;AAAA,YAGJ,WAHI,eAGJ,WAHI;AAKpB,YAAM,GAAG,aAAM,MAAN,kBAAT;AACA,QAAA,GAAG,eAAQ,GAAR,EAAH;AAEA,eAAO,uBAAM;AACX,UAAA,MAAM,EAAE,KADG;AAEX,UAAA,GAAG,EAAH,GAFW;AAGX,UAAA,OAAO,EAAE,0BAAe,WAAf;AAHE,SAAN,CAAP;AAKD;AAED;;;;;;;;;;;qCAQgB,U,EAAY;AAC1B,eAAO,KAAK,iBAAL,iCAA4B,UAA5B;AAAwC,UAAA,QAAQ,EAAE;AAAlD,WAAP;AACD;AAED;;;;;;;;;;;2CAQsB,U,EAAY;AAChC,eAAO,KAAK,iBAAL,iCAA4B,UAA5B;AAAwC,UAAA,QAAQ,EAAE;AAAlD,WAAP;AACD;AAED;;;;;;;;;;;8CAQyB,U,EAAY;AACnC,eAAO,KAAK,iBAAL,iCAA4B,UAA5B;AAAwC,UAAA,QAAQ,EAAE;AAAlD,WAAP;AACD;AAED;;;;;;;;;;;oDAQ+B,U,EAAY;AACzC,eAAO,KAAK,iBAAL,iCAA4B,UAA5B;AAAwC,UAAA,QAAQ,EAAE;AAAlD,WAAP;AACD;AAED;;;;;;;;;;;gDAQ2B,U,EAAY;AACrC,eAAO,KAAK,iBAAL,iCAA4B,UAA5B;AAAwC,UAAA,QAAQ,EAAE;AAAlD,WAAP;AACD;AAED;;;;;;;;;;;+CAQ0B,U,EAAY;AACpC,eAAO,KAAK,iBAAL,iCAA4B,UAA5B;AAAwC,UAAA,QAAQ,EAAE;AAAlD,WAAP;AACD;AAED;;;;;;;;;;;iDAQ4B,U,EAAY;AACtC,eAAO,KAAK,iBAAL,iCAA4B,UAA5B;AAAwC,UAAA,QAAQ,EAAE;AAAlD,WAAP;AACD;AAED;;;;;;;;;;;;wCASmB,U,EAAY;AAC7B,QAAA,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,OAAvB,EAAgC,UAAhC,CAAb;AACA,QAAA,mCAAmC,CAAC,UAAD,CAAnC;AAF6B,2BAG+B,UAH/B;AAAA,YAGrB,MAHqB,gBAGrB,MAHqB;AAAA,YAGb,WAHa,gBAGb,WAHa;AAAA,YAGA,OAHA,gBAGA,OAHA;AAAA,YAGS,OAHT,gBAGS,OAHT;AAAA,YAGkB,QAHlB,gBAGkB,QAHlB;AAK7B,YAAM,GAAG,aAAM,MAAN,2BAA6B,OAA7B,uBAAiD,QAAjD,CAAT;AACA,QAAA,GAAG,eAAQ,GAAR,EAAH;AAEA,eAAO,uBAAM;AACX,UAAA,MAAM,EAAE,KADG;AAEX,UAAA,GAAG,EAAH,GAFW;AAGX,UAAA,OAAO,EAAE,0BAAe,WAAf,CAHE;AAIX,UAAA,IAAI,EAAE,IAAI,CAAC,SAAL,CAAe;AAAE,YAAA,OAAO,EAAP;AAAF,WAAf;AAJK,SAAN,CAAP;AAMD;;;;;;AAGH,MAAM,mCAAmC,GAAG,+DACvC,mCADuC;AAE1C,IAAA,OAAO,EAAE,MAFiC;AAG1C,IAAA,OAAO,EAAE;AAHiC,KAA5C;;AAMA,EAAA,MAAM,CAAC,OAAP,GAAiB,IAAjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvJA,MAAM,GAAG,GAAG,uBAAM,4BAAN,CAAZ;AAEA;;;;MAGM,Q;AACJ;;;;AAIA,sBAAa,OAAb,EAAsB;AAAA;;AACpB,WAAK,OAAL,GAAe,OAAf;AACD;AAED;;;;;;;;;;;;;;0CAUqB,U,EAAY;AAC/B,QAAA,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,OAAvB,EAAgC,UAAhC,CAAb;AACA,QAAA,qCAAqC,CAAC,UAAD,CAArC;AAF+B,0BAG4E,UAH5E;AAAA,YAGvB,MAHuB,eAGvB,MAHuB;AAAA,YAGf,WAHe,eAGf,WAHe;AAAA,YAGF,UAHE,eAGF,UAHE;AAAA,YAGU,WAHV,eAGU,WAHV;AAAA,YAGuB,uBAHvB,eAGuB,uBAHvB;AAAA,YAGgD,uBAHhD,eAGgD,uBAHhD;AAK/B,YAAM,GAAG,aAAM,MAAN,kCAAoC,UAApC,uBAA2D,WAA3D,0BAAT;AACA,QAAA,GAAG,eAAQ,GAAR,EAAH;AAEA,eAAO,uBAAM;AACX,UAAA,MAAM,EAAE,KADG;AAEX,UAAA,GAAG,EAAH,GAFW;AAGX,UAAA,MAAM,EAAE;AACN,YAAA,uBAAuB,EAAvB,uBADM;AAEN,YAAA,uBAAuB,EAAvB;AAFM,WAHG;AAOX,UAAA,OAAO,EAAE,0BAAe,WAAf;AAPE,SAAN,CAAP;AASD;AAED;;;;;;;;;;;;kCASa,U,EAAY;AACvB,QAAA,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,OAAvB,EAAgC,UAAhC,CAAb;AACA,QAAA,6BAA6B,CAAC,UAAD,CAA7B;AAFuB,2BAG+C,UAH/C;AAAA,YAGf,MAHe,gBAGf,MAHe;AAAA,YAGP,WAHO,gBAGP,WAHO;AAAA,YAGM,UAHN,gBAGM,UAHN;AAAA,YAGkB,WAHlB,gBAGkB,WAHlB;AAAA,YAG+B,WAH/B,gBAG+B,WAH/B;AAKvB,YAAM,GAAG,aAAM,MAAN,kCAAoC,UAApC,uBAA2D,WAA3D,cAA0E,WAA1E,CAAT;AACA,QAAA,GAAG,eAAQ,GAAR,EAAH;AAEA,eAAO,uBAAM;AACX,UAAA,MAAM,EAAE,KADG;AAEX,UAAA,GAAG,EAAH,GAFW;AAGX,UAAA,OAAO,EAAE,0BAAe,WAAf;AAHE,SAAN,CAAP;AAKD;AAED;;;;;;;;;;;;+CAS0B,U,EAAY;AACpC,QAAA,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,OAAvB,EAAgC,UAAhC,CAAb;AACA,QAAA,0CAA0C,CAAC,UAAD,CAA1C;AAFoC,2BAGmC,UAHnC;AAAA,YAG5B,MAH4B,gBAG5B,MAH4B;AAAA,YAGpB,WAHoB,gBAGpB,WAHoB;AAAA,YAGP,UAHO,gBAGP,UAHO;AAAA,YAGK,WAHL,gBAGK,WAHL;AAAA,YAGkB,YAHlB,gBAGkB,YAHlB;AAKpC,YAAM,GAAG,aAAM,MAAN,kCAAoC,UAApC,uBAA2D,WAA3D,CAAT;AACA,QAAA,GAAG,eAAQ,GAAR,EAAH;AAEA,eAAO,uBAAM;AACX,UAAA,MAAM,EAAE,KADG;AAEX,UAAA,GAAG,EAAH,GAFW;AAGX,UAAA,MAAM,EAAE;AACN,YAAA,YAAY,EAAZ;AADM,WAHG;AAMX,UAAA,OAAO,EAAE,0BAAe,WAAf;AANE,SAAN,CAAP;AAQD;;;;;;AAGH,MAAM,qCAAqC,GAAG,+DACzC,mCADyC;AAE5C,IAAA,UAAU,EAAE,MAFgC;AAG5C,IAAA,WAAW,EAAE,MAH+B;AAI5C,IAAA,uBAAuB,EAAE,WAJmB;AAK5C,IAAA,uBAAuB,EAAE;AALmB,KAA9C;;AAQA,MAAM,6BAA6B,GAAG,+DACjC,mCADiC;AAEpC,IAAA,UAAU,EAAE,MAFwB;AAGpC,IAAA,WAAW,EAAE,MAHuB;AAIpC,IAAA,WAAW,EAAE;AAJuB,KAAtC;;AAOA,MAAM,0CAA0C,GAAG,+DAC9C,mCAD8C;AAEjD,IAAA,UAAU,EAAE,MAFqC;AAGjD,IAAA,WAAW,EAAE,MAHoC;AAIjD,IAAA,YAAY,EAAE;AAJmC,KAAnD;;AAOA,EAAA,MAAM,CAAC,OAAP,GAAiB,QAAjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrHA,MAAM,GAAG,GAAG,uBAAM,2BAAN,CAAZ;AAEA;;;;MAGM,Q;AACJ;;;;AAIA,sBAAa,OAAb,EAAsB;AAAA;;AACpB,WAAK,OAAL,GAAe,OAAf;AACD;AAED;;;;;;;;;;uCAMkB,U,EAAY;AAC5B,QAAA,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,OAAvB,EAAgC,UAAhC,CAAb;AACA,iDAAyB,UAAzB;AAF4B,0BAGI,UAHJ;AAAA,YAGpB,MAHoB,eAGpB,MAHoB;AAAA,YAGZ,WAHY,eAGZ,WAHY;AAK5B,YAAM,GAAG,aAAM,MAAN,2BAAT;AACA,QAAA,GAAG,eAAQ,GAAR,EAAH;AAEA,eAAO,uBAAM;AACX,UAAA,MAAM,EAAE,KADG;AAEX,UAAA,GAAG,EAAH,GAFW;AAGX,UAAA,OAAO,EAAE,0BAAe,WAAf;AAHE,SAAN,CAAP;AAKD;AAED;;;;;;;;;+CAM0B,U,EAAY;AACpC,QAAA,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,OAAvB,EAAgC,UAAhC,CAAb;AACA,iDAAyB,UAAzB;AAFoC,2BAGJ,UAHI;AAAA,YAG5B,MAH4B,gBAG5B,MAH4B;AAAA,YAGpB,WAHoB,gBAGpB,WAHoB;AAKpC,YAAM,GAAG,aAAM,MAAN,gCAAT;AACA,QAAA,GAAG,eAAQ,GAAR,EAAH;AAEA,eAAO,uBAAM;AACX,UAAA,MAAM,EAAE,KADG;AAEX,UAAA,GAAG,EAAH,GAFW;AAGX,UAAA,OAAO,EAAE,0BAAe,WAAf;AAHE,SAAN,CAAP;AAKD;;;;;;AAGH,EAAA,MAAM,CAAC,OAAP,GAAiB,QAAjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzDA,MAAM,GAAG,GAAG,uBAAM,0BAAN,CAAZ;AAEA;;;;MAGM,O;AACJ;;;;AAIA,qBAAa,OAAb,EAAsB;AAAA;;AACpB,WAAK,OAAL,GAAe,OAAf;AACD;AAED;;;;;;;;;;mCAMc,U,EAAY;AACxB,QAAA,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,OAAvB,EAAgC,UAAhC,CAAb;AACA,iDAAyB,UAAzB;AAFwB,0BAGQ,UAHR;AAAA,YAGhB,MAHgB,eAGhB,MAHgB;AAAA,YAGR,WAHQ,eAGR,WAHQ;AAKxB,YAAM,GAAG,aAAM,MAAN,kCAAT;AACA,QAAA,GAAG,eAAQ,GAAR,EAAH;AAEA,eAAO,uBAAM;AACX,UAAA,MAAM,EAAE,KADG;AAEX,UAAA,GAAG,EAAH,GAFW;AAGX,UAAA,OAAO,EAAE,0BAAe,WAAf;AAHE,SAAN,CAAP;AAKD;AAED;;;;;;;;;;iCAOY,U,EAAY;AACtB,QAAA,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,OAAvB,EAAgC,UAAhC,CAAb;AACA,QAAA,4BAA4B,CAAC,UAAD,CAA5B;AAFsB,2BAGsB,UAHtB;AAAA,YAGd,MAHc,gBAGd,MAHc;AAAA,YAGN,WAHM,gBAGN,WAHM;AAAA,YAGO,UAHP,gBAGO,UAHP;AAKtB,YAAM,GAAG,aAAM,MAAN,2CAA6C,UAA7C,CAAT;AACA,QAAA,GAAG,eAAQ,GAAR,EAAH;AAEA,eAAO,uBAAM;AACX,UAAA,MAAM,EAAE,KADG;AAEX,UAAA,GAAG,EAAH,GAFW;AAGX,UAAA,OAAO,EAAE,0BAAe,WAAf;AAHE,SAAN,CAAP;AAKD;AAED;;;;;;;;;;oCAOe,U,EAAY;AACzB,QAAA,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,OAAvB,EAAgC,UAAhC,CAAb;AACA,QAAA,+BAA+B,CAAC,UAAD,CAA/B;AAFyB,2BAGmB,UAHnB;AAAA,YAGjB,MAHiB,gBAGjB,MAHiB;AAAA,YAGT,WAHS,gBAGT,WAHS;AAAA,YAGI,UAHJ,gBAGI,UAHJ;AAKzB,YAAM,GAAG,aAAM,MAAN,2CAA6C,UAA7C,CAAT;AACA,QAAA,GAAG,kBAAW,GAAX,EAAH;AAEA,eAAO,uBAAM;AACX,UAAA,MAAM,EAAE,QADG;AAEX,UAAA,GAAG,EAAH,GAFW;AAGX,UAAA,OAAO,EAAE,0BAAe,WAAf;AAHE,SAAN,CAAP;AAKD;;;;;;AAGH,MAAM,4BAA4B,GAAG,+DAChC,mCADgC;AAEnC,IAAA,UAAU,EAAE;AAFuB,KAArC;;AAKA,MAAM,+BAA+B,GAAG,+DACnC,mCADmC;AAEtC,IAAA,UAAU,EAAE;AAF0B,KAAxC;;AAKA,EAAA,MAAM,CAAC,OAAP,GAAiB,OAAjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3FA,MAAM,uBAAuB,GAAG,oBAAhC;AACA,MAAM,wBAAwB,GAAG,eAAjC;AAEA,MAAM,GAAG,GAAG,uBAAM,wBAAN,CAAZ;AAEA;;;;MAGM,K;AACJ;;;;AAIA,mBAAa,OAAb,EAAsB;AAAA;;AACpB,WAAK,OAAL,GAAe,OAAf;AACD;AAED;;;;;;;;;qCAKgB,iB,EAAmB;AACjC,eAAO,KAAK,aAAL,CAAmB;AACxB,UAAA,WAAW,EAAE;AACX,YAAA,IAAI,EAAE,iBADK;AAEX,YAAA,UAAU,EAAE,uBAFD;AAGX,YAAA,SAAS,EAAE,KAAK,OAAL,CAAa,QAHb;AAIX,YAAA,aAAa,EAAE,KAAK,OAAL,CAAa,YAJjB;AAKX,YAAA,YAAY,EAAE,KAAK,OAAL,CAAa;AALhB;AADW,SAAnB,CAAP;AASD;AAED;;;;;;;;yCAKoB,Y,EAAc;AAChC,eAAO,KAAK,aAAL,CAAmB;AACxB,UAAA,WAAW,EAAE;AACX,YAAA,aAAa,EAAE,YADJ;AAEX,YAAA,UAAU,EAAE,wBAFD;AAGX,YAAA,SAAS,EAAE,KAAK,OAAL,CAAa,QAHb;AAIX,YAAA,aAAa,EAAE,KAAK,OAAL,CAAa;AAJjB;AADW,SAAnB,CAAP;AAQD;AAED;;;;;;;;;oCAMe,U,EAAY;AACzB,QAAA,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,OAAvB,EAAgC,UAAhC,CAAb;AACA,QAAA,+BAA+B,CAAC,UAAD,CAA/B;AAFyB,0BAGO,UAHP;AAAA,YAGjB,MAHiB,eAGjB,MAHiB;AAAA,YAGT,WAHS,eAGT,WAHS;AAKzB,YAAM,GAAG,aAAM,MAAN,wBAAT;AACA,QAAA,GAAG,gBAAS,GAAT,0BAA4B,IAAI,CAAC,SAAL,CAAe,WAAf,CAA5B,EAAH;AAEA,eAAO,uBAAM;AACX,UAAA,GAAG,EAAH,GADW;AAEX,UAAA,MAAM,EAAE,MAFG;AAGX,UAAA,OAAO,EAAE;AACP,4BAAgB,mCADT;AAEP,YAAA,MAAM,EAAE;AAFD,WAHE;AAOX,UAAA,MAAM,EAAE;AAPG,SAAN,CAAP;AASD;;;;;;AAGH,MAAM,+BAA+B,GAAG,+BAAiB;AACvD,IAAA,MAAM,EAAE,QAD+C;AAEvD,IAAA,WAAW,EAAE,kBAAO,KAAP,CAAa,CACxB,kBAAO,MAAP,CAAc;AACZ,MAAA,SAAS,EAAE,QADC;AAEZ,MAAA,aAAa,EAAE,QAFH;AAGZ,MAAA,UAAU,EAAE,kBAAO,OAAP,CAAe,uBAAf,CAHA;AAIZ,MAAA,IAAI,EAAE,QAJM;AAKZ,MAAA,YAAY,EAAE;AALF,KAAd,CADwB,EAQxB,kBAAO,MAAP,CAAc;AACZ,MAAA,SAAS,EAAE,QADC;AAEZ,MAAA,aAAa,EAAE,QAFH;AAGZ,MAAA,UAAU,EAAE,kBAAO,OAAP,CAAe,wBAAf,CAHA;AAIZ,MAAA,aAAa,EAAE;AAJH,KAAd,CARwB,CAAb;AAF0C,GAAjB,CAAxC;;AAmBA,EAAA,MAAM,CAAC,OAAP,GAAiB,KAAjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9FA,MAAM,GAAG,GAAG,uBAAM,wBAAN,CAAZ;AAEA;;;;MAGM,K;AACJ;;;;AAIA,mBAAa,OAAb,EAAsB;AAAA;;AACpB,WAAK,OAAL,GAAe,OAAf;AACD;AAED;;;;;;;;;;gCAMW,U,EAAY;AACrB,QAAA,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,OAAvB,EAAgC,UAAhC,CAAb;AACA,iDAAyB,UAAzB;AAFqB,0BAGW,UAHX;AAAA,YAGb,MAHa,eAGb,MAHa;AAAA,YAGL,WAHK,eAGL,WAHK;AAKrB,YAAM,GAAG,aAAM,MAAN,mBAAT;AACA,QAAA,GAAG,eAAQ,GAAR,EAAH;AAEA,eAAO,uBAAM;AACX,UAAA,MAAM,EAAE,KADG;AAEX,UAAA,GAAG,EAAH,GAFW;AAGX,UAAA,OAAO,EAAE,0BAAe,WAAf;AAHE,SAAN,CAAP;AAKD;AAED;;;;;;;;;;kCAOa,U,EAAY;AACvB,QAAA,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,OAAvB,EAAgC,UAAhC,CAAb;AACA,QAAA,6BAA6B,CAAC,UAAD,CAA7B;AAFuB,2BAG+B,UAH/B;AAAA,YAGf,MAHe,gBAGf,MAHe;AAAA,YAGP,WAHO,gBAGP,WAHO;AAAA,YAGM,oBAHN,gBAGM,oBAHN;AAKvB,YAAM,GAAG,aAAM,MAAN,mBAAT;AACA,QAAA,GAAG,eAAQ,GAAR,EAAH;AACA,eAAO,uBAAM;AACX,UAAA,MAAM,EAAE,KADG;AAEX,UAAA,GAAG,EAAH,GAFW;AAGX,UAAA,OAAO,EAAE,0BAAe,WAAf,CAHE;AAIX,UAAA,IAAI,EAAE,IAAI,CAAC,SAAL,CAAe,oBAAf;AAJK,SAAN,CAAP;AAMD;AAED;;;;;;;;;;kCAOa,U,EAAY;AACvB,QAAA,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,OAAvB,EAAgC,UAAhC,CAAb;AACA,QAAA,6BAA6B,CAAC,UAAD,CAA7B;AAFuB,2BAGmB,UAHnB;AAAA,YAGf,MAHe,gBAGf,MAHe;AAAA,YAGP,WAHO,gBAGP,WAHO;AAAA,YAGM,QAHN,gBAGM,QAHN;AAKvB,YAAM,GAAG,aAAM,MAAN,4BAA8B,QAA9B,CAAT;AACA,QAAA,GAAG,kBAAW,GAAX,EAAH;AACA,eAAO,uBAAM;AACX,UAAA,MAAM,EAAE,QADG;AAEX,UAAA,GAAG,EAAH,GAFW;AAGX,UAAA,OAAO,EAAE,0BAAe,WAAf;AAHE,SAAN,CAAP;AAKD;;;;;;AAGH,MAAM,6BAA6B,GAAG,+DACjC,mCADiC;AAEpC,IAAA,oBAAoB,EAAE,kBAAO,MAAP,CAAc;AAClC,MAAA,SAAS,EAAE,QADuB;AAElC,MAAA,WAAW,EAAE,SAFqB;AAGlC,MAAA,SAAS,EAAE,0BAAY,CAAC,YAAD,EAAe,UAAf,CAAZ,CAHuB;AAIlC,MAAA,SAAS,EAAE,SAJuB;AAKlC,MAAA,UAAU,EAAE,SALsB;AAMlC,MAAA,QAAQ,EAAE,SANwB;AAOlC,MAAA,YAAY,EAAE,SAPoB;AAQlC,MAAA,WAAW,EAAE,OARqB;AASlC,MAAA,QAAQ,EAAE,kBAAO,QAAP,CAAgB,CAAC,kBAAO,MAAP,CAAc;AACvC,QAAA,WAAW,EAAE,QAD0B;AAEvC,QAAA,cAAc,EAAE,SAFuB;AAGvC,QAAA,WAAW,EAAE,QAH0B;AAIvC,QAAA,iBAAiB,EAAE,QAJoB;AAKvC,QAAA,cAAc,EAAE,QALuB;AAMvC,QAAA,kBAAkB,EAAE,0BAAY,CAAC,WAAD,EAAc,OAAd,EAAuB,MAAvB,EAA+B,KAA/B,EAAsC,UAAtC,EAAkD,SAAlD,CAAZ;AANmB,OAAd,CAAD,CAAhB;AATwB,KAAd;AAFc,KAAtC;;AAsBA,MAAM,6BAA6B,GAAG,+DACjC,mCADiC;AAEpC,IAAA,QAAQ,EAAE;AAF0B,KAAtC;;AAKA,EAAA,MAAM,CAAC,OAAP,GAAiB,KAAjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1GA,MAAM,GAAG,GAAG,uBAAM,0BAAN,CAAZ;AAEA;;;;MAGM,O;AACJ;;;;AAIA,qBAAa,OAAb,EAAsB;AAAA;;AACpB,WAAK,OAAL,GAAe,OAAf;AACD;AAED;;;;;;;;;;;sCAOiB,U,EAAY;AAC3B,QAAA,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,OAAvB,EAAgC,UAAhC,CAAb;AACA,QAAA,iCAAiC,CAAC,UAAD,CAAjC;AAF2B,0BAGsB,UAHtB;AAAA,YAGnB,MAHmB,eAGnB,MAHmB;AAAA,YAGX,WAHW,eAGX,WAHW;AAAA,YAGE,eAHF,eAGE,eAHF;AAK3B,YAAM,GAAG,aAAM,MAAN,kDAAoD,eAApD,CAAT;AACA,QAAA,GAAG,eAAQ,GAAR,EAAH;AAEA,eAAO,uBAAM;AACX,UAAA,MAAM,EAAE,KADG;AAEX,UAAA,GAAG,EAAH,GAFW;AAGX,UAAA,OAAO,EAAE,0BAAe,WAAf;AAHE,SAAN,CAAP;AAKD;AAED;;;;;;;;;;8CAOyB,U,EAAY;AACnC,QAAA,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,OAAvB,EAAgC,UAAhC,CAAb;AACA,QAAA,yCAAyC,CAAC,UAAD,CAAzC;AAFmC,2BAGc,UAHd;AAAA,YAG3B,MAH2B,gBAG3B,MAH2B;AAAA,YAGnB,WAHmB,gBAGnB,WAHmB;AAAA,YAGN,eAHM,gBAGN,eAHM;AAKnC,YAAM,GAAG,aAAM,MAAN,kDAAoD,eAApD,cAAT;AACA,QAAA,GAAG,eAAQ,GAAR,EAAH;AAEA,eAAO,uBAAM;AACX,UAAA,MAAM,EAAE,KADG;AAEX,UAAA,GAAG,EAAH,GAFW;AAGX,UAAA,OAAO,EAAE,0BAAe,WAAf;AAHE,SAAN,CAAP;AAKD;AAED;;;;;;;;;;;yCAQoB,U,EAAY;AAC9B,QAAA,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,OAAvB,EAAgC,UAAhC,CAAb;AACA,QAAA,oCAAoC,CAAC,UAAD,CAApC;AAF8B,2BAG2B,UAH3B;AAAA,YAGtB,MAHsB,gBAGtB,MAHsB;AAAA,YAGd,WAHc,gBAGd,WAHc;AAAA,YAGD,UAHC,gBAGD,UAHC;AAAA,YAGW,WAHX,gBAGW,WAHX;AAK9B,YAAM,GAAG,aAAM,MAAN,4CAA8C,UAA9C,uBAAqE,WAArE,qBAAT;AACA,QAAA,GAAG,eAAQ,GAAR,EAAH;AAEA,eAAO,uBAAM;AACX,UAAA,MAAM,EAAE,KADG;AAEX,UAAA,GAAG,EAAH,GAFW;AAGX,UAAA,OAAO,EAAE,0BAAe,WAAf;AAHE,SAAN,CAAP;AAKD;AAED;;;;;;;;;;;;uCASkB,U,EAAY;AAC5B,QAAA,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,OAAvB,EAAgC,UAAhC,CAAb;AACA,QAAA,kCAAkC,CAAC,UAAD,CAAlC;AAF4B,2BAG8C,UAH9C;AAAA,YAGpB,MAHoB,gBAGpB,MAHoB;AAAA,YAGZ,WAHY,gBAGZ,WAHY;AAAA,YAGC,UAHD,gBAGC,UAHD;AAAA,YAGa,WAHb,gBAGa,WAHb;AAAA,YAG0B,eAH1B,gBAG0B,eAH1B;AAK5B,YAAM,GAAG,aAAM,MAAN,4CAA8C,UAA9C,uBAAqE,WAArE,8BAAoG,eAApG,CAAT;AACA,QAAA,GAAG,eAAQ,GAAR,EAAH;AAEA,eAAO,uBAAM;AACX,UAAA,MAAM,EAAE,KADG;AAEX,UAAA,GAAG,EAAH,GAFW;AAGX,UAAA,OAAO,EAAE,0BAAe,WAAf;AAHE,SAAN,CAAP;AAKD;;;;;;AAGH,MAAM,iCAAiC,GAAG,+DACrC,mCADqC;AAExC,IAAA,eAAe,EAAE;AAFuB,KAA1C;;AAKA,MAAM,yCAAyC,GAAG,+DAC7C,mCAD6C;AAEhD,IAAA,eAAe,EAAE;AAF+B,KAAlD;;AAKA,MAAM,oCAAoC,GAAG,+DACxC,mCADwC;AAE3C,IAAA,UAAU,EAAE,MAF+B;AAG3C,IAAA,WAAW,EAAE;AAH8B,KAA7C;;AAMA,MAAM,kCAAkC,GAAG,+DACtC,mCADsC;AAEzC,IAAA,UAAU,EAAE,MAF6B;AAGzC,IAAA,WAAW,EAAE,MAH4B;AAIzC,IAAA,eAAe,EAAE;AAJwB,KAA3C;;AAOA,EAAA,MAAM,CAAC,OAAP,GAAiB,OAAjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjIA,MAAM,GAAG,GAAG,uBAAM,+BAAN,CAAZ;AAEA;;;;MAGM,W;AACJ;;;;AAIA,yBAAa,OAAb,EAAsB;AAAA;;AACpB,WAAK,OAAL,GAAe,OAAf;AACD;AAED;;;;;;;;;;;sCAOiB,U,EAAY;AAC3B,QAAA,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,OAAvB,EAAgC,UAAhC,CAAb;AACA,QAAA,iCAAiC,CAAC,UAAD,CAAjC;AAF2B,0BAGiB,UAHjB;AAAA,YAGnB,MAHmB,eAGnB,MAHmB;AAAA,YAGX,WAHW,eAGX,WAHW;AAAA,YAGE,UAHF,eAGE,UAHF;AAK3B,YAAM,GAAG,aAAM,MAAN,6BAA+B,UAA/B,mBAAT;AACA,QAAA,GAAG,eAAQ,GAAR,EAAH;AAEA,eAAO,uBAAM;AACX,UAAA,MAAM,EAAE,KADG;AAEX,UAAA,GAAG,EAAH,GAFW;AAGX,UAAA,OAAO,EAAE,0BAAe,WAAf;AAHE,SAAN,CAAP;AAKD;AAED;;;;;;;;;;;qCAQgB,U,EAAY;AAC1B,QAAA,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,OAAvB,EAAgC,UAAhC,CAAb;AACA,QAAA,gCAAgC,CAAC,UAAD,CAAhC;AAF0B,2BAGkC,UAHlC;AAAA,YAGlB,MAHkB,gBAGlB,MAHkB;AAAA,YAGV,WAHU,gBAGV,WAHU;AAAA,YAGG,UAHH,gBAGG,UAHH;AAAA,YAGe,cAHf,gBAGe,cAHf;AAK1B,YAAM,GAAG,aAAM,MAAN,6BAA+B,UAA/B,4BAA2D,cAA3D,CAAT;AACA,QAAA,GAAG,eAAQ,GAAR,EAAH;AAEA,eAAO,uBAAM;AACX,UAAA,MAAM,EAAE,KADG;AAEX,UAAA,GAAG,EAAH,GAFW;AAGX,UAAA,OAAO,EAAE,0BAAe,WAAf;AAHE,SAAN,CAAP;AAKD;AAED;;;;;;;;;;;;;;;wCAYmB,U,EAAY;AAC7B,QAAA,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB;AAAE,UAAA,QAAQ,EAAE,KAAZ;AAAmB,UAAA,YAAY,EAAE,CAAjC;AAAoC,UAAA,cAAc,EAAE;AAApD,SAAlB,EAA+E,KAAK,OAApF,EAA6F,UAA7F,CAAb;AACA,QAAA,mCAAmC,CAAC,UAAD,CAAnC;AAF6B,2BAGiF,UAHjF;AAAA,YAGrB,MAHqB,gBAGrB,MAHqB;AAAA,YAGb,WAHa,gBAGb,WAHa;AAAA,YAGA,UAHA,gBAGA,UAHA;AAAA,YAGY,IAHZ,gBAGY,IAHZ;AAAA,YAGkB,QAHlB,gBAGkB,QAHlB;AAAA,YAG4B,YAH5B,gBAG4B,YAH5B;AAAA,YAG0C,cAH1C,gBAG0C,cAH1C;AAAA,YAG0D,kBAH1D,gBAG0D,kBAH1D;AAK7B,YAAM,GAAG,aAAM,MAAN,6BAA+B,UAA/B,mBAAT;AACA,QAAA,GAAG,eAAQ,GAAR,EAAH;AAEA,eAAO,uBAAM;AACX,UAAA,MAAM,EAAE,KADG;AAEX,UAAA,GAAG,EAAH,GAFW;AAGX,UAAA,OAAO,EAAE,0BAAe,WAAf,CAHE;AAIX,UAAA,IAAI,EAAE,IAAI,CAAC,SAAL,CAAe;AACnB,YAAA,IAAI,EAAJ,IADmB;AAEnB,YAAA,QAAQ,EAAR,QAFmB;AAGnB,YAAA,MAAM,EAAE;AACN,cAAA,UAAU,EAAE,YADN;AAEN,cAAA,QAAQ,EAAE;AAFJ,aAHW;AAOnB,YAAA,kBAAkB,EAAlB;AAPmB,WAAf;AAJK,SAAN,CAAP;AAcD;AAED;;;;;;;;;;;wCAQmB,U,EAAY;AAC7B,QAAA,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,OAAvB,EAAgC,UAAhC,CAAb;AACA,QAAA,mCAAmC,CAAC,UAAD,CAAnC;AAF6B,2BAG+B,UAH/B;AAAA,YAGrB,MAHqB,gBAGrB,MAHqB;AAAA,YAGb,WAHa,gBAGb,WAHa;AAAA,YAGA,UAHA,gBAGA,UAHA;AAAA,YAGY,cAHZ,gBAGY,cAHZ;AAK7B,YAAM,GAAG,aAAM,MAAN,6BAA+B,UAA/B,4BAA2D,cAA3D,CAAT;AACA,QAAA,GAAG,kBAAW,GAAX,EAAH;AAEA,eAAO,uBAAM;AACX,UAAA,MAAM,EAAE,QADG;AAEX,UAAA,GAAG,EAAH,GAFW;AAGX,UAAA,OAAO,EAAE,0BAAe,WAAf;AAHE,SAAN,CAAP;AAKD;AAED;;;;;;;;;;;;;;4CAWuB,U,EAAY;AACjC,QAAA,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB;AAAE,UAAA,QAAQ,EAAE;AAAZ,SAAlB,EAAuC,KAAK,OAA5C,EAAqD,UAArD,CAAb;AACA,QAAA,uCAAuC,CAAC,UAAD,CAAvC;AAFiC,2BAG0D,UAH1D;AAAA,YAGzB,MAHyB,gBAGzB,MAHyB;AAAA,YAGjB,WAHiB,gBAGjB,WAHiB;AAAA,YAGJ,UAHI,gBAGJ,UAHI;AAAA,YAGQ,cAHR,gBAGQ,cAHR;AAAA,YAGwB,WAHxB,gBAGwB,WAHxB;AAAA,YAGqC,MAHrC,gBAGqC,MAHrC;AAAA,YAG6C,QAH7C,gBAG6C,QAH7C;AAKjC,YAAM,GAAG,aAAM,MAAN,6BAA+B,UAA/B,4BAA2D,cAA3D,wBAAuF,WAAvF,CAAT;AACA,QAAA,GAAG,eAAQ,GAAR,EAAH;AAEA,eAAO,uBAAM;AACX,UAAA,MAAM,EAAE,KADG;AAEX,UAAA,GAAG,EAAH,GAFW;AAGX,UAAA,OAAO,EAAE,0BAAe,WAAf,CAHE;AAIX,UAAA,IAAI,EAAE,IAAI,CAAC,SAAL,CAAe;AACnB,YAAA,MAAM,EAAE;AACN,cAAA,QAAQ,EAAR,QADM;AAEN,cAAA,UAAU,EAAE;AAFN;AADW,WAAf;AAJK,SAAN,CAAP;AAWD;AAED;;;;;;;;;;;;;;mDAW8B,U,EAAY;AACxC,QAAA,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB;AAAE,UAAA,QAAQ,EAAE;AAAZ,SAAlB,EAAuC,KAAK,OAA5C,EAAqD,UAArD,CAAb;AACA,QAAA,8CAA8C,CAAC,UAAD,CAA9C;AAFwC,2BAGmD,UAHnD;AAAA,YAGhC,MAHgC,gBAGhC,MAHgC;AAAA,YAGxB,WAHwB,gBAGxB,WAHwB;AAAA,YAGX,UAHW,gBAGX,UAHW;AAAA,YAGC,cAHD,gBAGC,cAHD;AAAA,YAGiB,WAHjB,gBAGiB,WAHjB;AAAA,YAG8B,MAH9B,gBAG8B,MAH9B;AAAA,YAGsC,QAHtC,gBAGsC,QAHtC;AAKxC,YAAM,GAAG,aAAM,MAAN,6BAA+B,UAA/B,4BAA2D,cAA3D,6BAA4F,WAA5F,CAAT;AACA,QAAA,GAAG,eAAQ,GAAR,EAAH;AAEA,eAAO,uBAAM;AACX,UAAA,MAAM,EAAE,KADG;AAEX,UAAA,GAAG,EAAH,GAFW;AAGX,UAAA,OAAO,EAAE,0BAAe,WAAf,CAHE;AAIX,UAAA,IAAI,EAAE,IAAI,CAAC,SAAL,CAAe;AACnB,YAAA,MAAM,EAAE;AACN,cAAA,QAAQ,EAAR,QADM;AAEN,cAAA,UAAU,EAAE;AAFN;AADW,WAAf;AAJK,SAAN,CAAP;AAWD;;;;;;AAGH,MAAM,iCAAiC,GAAG,+DACrC,mCADqC;AAExC,IAAA,UAAU,EAAE;AAF4B,KAA1C;;AAKA,MAAM,gCAAgC,GAAG,+DACpC,mCADoC;AAEvC,IAAA,UAAU,EAAE,MAF2B;AAGvC,IAAA,cAAc,EAAE;AAHuB,KAAzC;;AAMA,MAAM,mCAAmC,GAAG,+DACvC,mCADuC;AAE1C,IAAA,UAAU,EAAE,MAF8B;AAG1C,IAAA,cAAc,EAAE;AAH0B,KAA5C;;AAMA,MAAM,mCAAmC,GAAG,+DACvC,mCADuC;AAE1C,IAAA,UAAU,EAAE,MAF8B;AAG1C,IAAA,IAAI,EAAE,QAHoC;AAI1C,IAAA,QAAQ,EAAE,QAJgC;AAK1C,IAAA,YAAY,EAAE,QAL4B;AAM1C,IAAA,cAAc,EAAE,QAN0B;AAO1C,IAAA,kBAAkB,EAAE;AAPsB,KAA5C;;AAUA,MAAM,uCAAuC,GAAG,+DAC3C,mCAD2C;AAE9C,IAAA,UAAU,EAAE,MAFkC;AAG9C,IAAA,cAAc,EAAE,MAH8B;AAI9C,IAAA,WAAW,EAAE,MAJiC;AAK9C,IAAA,MAAM,EAAE,QALsC;AAM9C,IAAA,QAAQ,EAAE;AANoC,KAAhD;;AASA,MAAM,8CAA8C,GAAG,+DAClD,mCADkD;AAErD,IAAA,UAAU,EAAE,MAFyC;AAGrD,IAAA,cAAc,EAAE,MAHqC;AAIrD,IAAA,WAAW,EAAE,MAJwC;AAKrD,IAAA,MAAM,EAAE,QAL6C;AAMrD,IAAA,QAAQ,EAAE;AAN2C,KAAvD;;AASA,EAAA,MAAM,CAAC,OAAP,GAAiB,WAAjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7NA;;;;;;;;;;;;;MAaM,Q;AACJ;;;;AAIA,oBAAa,OAAb,EAAsB;AAAA;;AACpB,QAAM,QAAQ,GAAG;AACf,MAAA,MAAM,EAAE,8BADO;AAEf,MAAA,QAAQ,EAAE,EAFK;AAGf,MAAA,YAAY,EAAE;AAHC,KAAjB;AAMA,SAAK,MAAL,GAAc,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,QAAlB,EAA4B,OAA5B,CAAd;AAEA,SAAK,QAAL,GAAgB,IAAI,oBAAJ,CAAa,KAAK,MAAlB,CAAhB;AACA,SAAK,aAAL,GAAqB,IAAI,yBAAJ,CAAkB,KAAK,MAAvB,CAArB;AACA,SAAK,OAAL,GAAe,IAAI,mBAAJ,CAAY,KAAK,MAAjB,CAAf;AACA,SAAK,OAAL,GAAe,IAAI,mBAAJ,CAAY,KAAK,MAAjB,CAAf;AACA,SAAK,QAAL,GAAgB,IAAI,oBAAJ,CAAa,KAAK,MAAlB,CAAhB;AACA,SAAK,OAAL,GAAe,IAAI,mBAAJ,CAAY,KAAK,MAAjB,CAAf;AACA,SAAK,OAAL,GAAe,IAAI,mBAAJ,CAAY,KAAK,MAAjB,CAAf;AACA,SAAK,KAAL,GAAa,IAAI,iBAAJ,CAAU,KAAK,MAAf,CAAb;AACA,SAAK,IAAL,GAAY,IAAI,gBAAJ,CAAS,KAAK,MAAd,CAAZ;AACA,SAAK,WAAL,GAAmB,IAAI,uBAAJ,CAAgB,KAAK,MAArB,CAAnB;AACA,SAAK,KAAL,GAAa,IAAI,iBAAJ,CAAU,KAAK,MAAf,CAAb;AACD,G;;AAGH,EAAA,MAAM,CAAC,OAAP,GAAiB,QAAjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrDO,MAAM,cAAc,GAAG,SAAjB,cAAiB,CAAC,WAAD;AAAA,WAAkB;AAC9C,MAAA,MAAM,EAAE,kBADsC;AAE9C,MAAA,aAAa,mBAAY,WAAZ;AAFiC,KAAlB;AAAA,GAAvB;;;;AAKA,MAAM,cAAc,GAAG,SAAjB,cAAiB,CAAC,WAAD;AAAA,2CACzB,cAAc,CAAC,WAAD,CADW;AAE5B,sBAAgB;AAFY;AAAA,GAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;ACLP,MAAM,WAAW,GAAG,OAAO,CAAC,aAAD,CAAP,CAAuB,WAA3C;;AACO,MAAM,MAAM,GAAG,WAAW,CAAC;AAChC,IAAA,KAAK,EAAE;AACL,MAAA,IAAI,EAAE,cAAA,KAAK;AAAA,eAAI,2EAA2E,IAA3E,CAAgF,KAAhF,CAAJ;AAAA,OADN;AAEL,MAAA,SAAS,EAAE,mBAAA,KAAK;AAAA,eAAI,+BAA+B,IAA/B,CAAoC,KAApC,CAAJ;AAAA,OAFX;AAGL,MAAA,IAAI,EAAE,cAAA,KAAK;AAAA,eAAI,uDAAuD,IAAvD,CAA4D,KAA5D,CAAJ;AAAA,OAHN;AAIL,MAAA,SAAS,EAAE,mBAAA,KAAK;AAAA,eAAI,oIAAoI,IAApI,CAAyI,KAAzI,CAAJ;AAAA;AAJX;AADyB,GAAD,CAA1B;;AAQA,MAAM,wBAAwB,GAAG;AAAE,IAAA,WAAW,EAAE,QAAf;AAAyB,IAAA,MAAM,EAAE;AAAjC,GAAjC;;AACA,MAAM,wBAAwB,GAAG,MAAM,aAAN,CAAiB,wBAAjB,CAAjC","file":"starling.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import axios from 'axios'\nimport debug from 'debug'\nimport { defaultHeaders } from '../utils/http'\nimport { struct, minAPIParameterDefintion, minAPIParameterValidator } from '../utils/validator'\n\nconst log = debug('starling:account-service')\n\n/**\n * Service to interact with a customer's account\n */\nclass Account {\n  /**\n   * Creates an instance of the account client\n   * @param {Object} options - application config\n   */\n  constructor (options) {\n    this.options = options\n  }\n\n  /**\n   * Get an account holder's bank accounts\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @return {Promise} - the http request promise\n   */\n  getAccounts (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/accounts`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get an account's bank identifiers\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @return {Promise} - the http request promise\n   */\n  getAccountIdentifiers (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getAccountIdentifiersParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid } = parameters\n\n    const url = `${apiUrl}/api/v2/accounts/${accountUid}/identifiers`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get an account's balance\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @return {Promise} - the http request promise\n   */\n  getAccountBalance (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getAccountBalanceParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid } = parameters\n\n    const url = `${apiUrl}/api/v2/accounts/${accountUid}/balance`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get whether there are available funds for a requested amount\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @param {number} parameters.targetAmountInMinorUnits - the target amount in minor units\n   * @return {Promise} - the http request promise\n   */\n  getConfirmationOfFunds (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getConfirmationOfFundsParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, targetAmountInMinorUnits } = parameters\n\n    const url = `${apiUrl}/api/v2/accounts/${accountUid}/confirmation-of-funds`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken),\n      params: {\n        targetAmountInMinorUnits\n      }\n    })\n  }\n\n  /**\n   * Get list of statement periods which are available for an account\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @return {Promise} - the http request promise\n   */\n  getStatementPeriods (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getStatementPeriodsParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid } = parameters\n\n    const url = `${apiUrl}/api/v2/accounts/${accountUid}/statement/available-periods`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Download a statement for a given statement period\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @param {string=} parameters.yearMonth - the statement period's year month (yyyy-MM)\n   * @param {string=} parameters.format - one of 'application/pdf' or 'text/csv'\n   * @param {string=} parameters.responseType - the axios responseType for the request\n   * @return {Promise} - the http request promise\n   */\n  getStatementForPeriod (parameters) {\n    parameters = Object.assign({}, { yearMonth: new Date().toISOString().slice(0, 7), format: 'text/csv', responseType: 'stream' }, this.options, parameters)\n    getStatementForPeriodParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, format, yearMonth, responseType } = parameters\n\n    const url = `${apiUrl}/api/v2/accounts/${accountUid}/statement/download`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: {\n        ...defaultHeaders(accessToken),\n        Accept: format\n      },\n      params: {\n        yearMonth\n      },\n      responseType\n    })\n  }\n\n  /**\n   * Download a statement for a given date range\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @param {string} parameters.start - the beginning of the statement date range (yyyy-MM-dd)\n   * @param {string=} parameters.end - the end of the statement date range (yyyy-MM-dd)\n   * @param {string=} parameters.format - one of 'application/pdf' or 'text/csv'\n   * @param {string=} parameters.responseType - the axios responseType for the request\n   * @return {Promise} - the http request promise\n   */\n  getStatementForRange (parameters) {\n    parameters = Object.assign({}, { format: 'text/csv', responseType: 'stream' }, this.options, parameters)\n    getStatementForRangeParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, start, end, format, responseType } = parameters\n\n    const url = `${apiUrl}/api/v2/accounts/${accountUid}/statement/downloadForDateRange`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: {\n        ...defaultHeaders(accessToken),\n        Accept: format\n      },\n      params: {\n        start,\n        end\n      },\n      responseType\n    })\n  }\n}\n\nconst getAccountIdentifiersParameterValidator = struct.interface({ ...minAPIParameterDefintion, accountUid: 'uuid' })\n\nconst getAccountBalanceParameterValidator = struct.interface({ ...minAPIParameterDefintion, accountUid: 'uuid' })\n\nconst getConfirmationOfFundsParameterValidator = struct.interface({ ...minAPIParameterDefintion, accountUid: 'uuid', targetAmountInMinorUnits: 'number' })\n\nconst getStatementPeriodsParameterValidator = struct.interface({ ...minAPIParameterDefintion, accountUid: 'uuid' })\n\nconst getStatementForPeriodParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  yearMonth: 'yearMonth',\n  format: struct.enum(['application/pdf', 'text/csv']),\n  responseType: 'string'\n})\n\nconst getStatementForRangeParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  start: 'date',\n  end: 'date?',\n  format: struct.enum(['application/pdf', 'text/csv']),\n  responseType: 'string'\n})\n\nmodule.exports = Account\n","import axios from 'axios'\nimport debug from 'debug'\nimport { defaultHeaders } from '../utils/http'\nimport { minAPIParameterValidator } from '../utils/validator'\n\nconst log = debug('starling:account-holder-service')\n\n/**\n * Service to interact with an account holder\n */\nclass AccountHolder {\n  /**\n   * Creates an instance of the account holder client\n   * @param {Object} options - application config\n   */\n  constructor (options) {\n    this.options = options\n  }\n\n  /**\n   * Get basic information about the account holder\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @return {Promise} - the http request promise\n   */\n  getAccountHolder (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/account-holder`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get the name of the account holder\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @return {Promise} - the http request promise\n   */\n  getAccountHolderName (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/account-holder/name`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get an individual account holder's details\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @return {Promise} - the http request promise\n   */\n  getAccountHolderIndividual (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/account-holder/individual`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get a joint account holder's details\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @return {Promise} - the http request promise\n   */\n  getAccountHolderJoint (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/account-holder/joint`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get a business account holder's details\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @return {Promise} - the http request promise\n   */\n  getAccountHolderBusiness (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/account-holder/business`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get a business account holder's registered address\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @return {Promise} - the http request promise\n   */\n  getAccountHolderBusinessRegisteredAddress (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/account-holder/business/registered-address`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get a business account holder's correspondence address\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @return {Promise} - the http request promise\n   */\n  getAccountHolderBusinessCorrespondenceAddress (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/account-holder/business/correspondence-address`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n}\n\nmodule.exports = AccountHolder\n","import axios from 'axios'\nimport debug from 'debug'\nimport { defaultHeaders } from '../utils/http'\nimport { minAPIParameterValidator } from '../utils/validator'\n\nconst log = debug('starling:address-service')\n\n/**\n * Service to interact with a customer address\n */\nclass Address {\n  /**\n   * Creates an instance of the address client\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options\n  }\n\n  /**\n   * Retrieves a customer's address\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token.\n   * @return {Promise} - the http request promise\n   */\n  getAddresses (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/addresses`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n}\n\nmodule.exports = Address\n","import axios from 'axios'\nimport debug from 'debug'\nimport { defaultHeaders, payloadHeaders } from '../utils/http'\nimport { struct, minAPIParameterDefintion, minAPIParameterValidator } from '../utils/validator'\n\nconst log = debug('starling:card-service')\n\n/**\n * Service to interact with a customer card\n */\nclass Card {\n  /**\n   * Creates an instance of the client's card\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options\n  }\n\n  /**\n   * Get all the cards for an account holder\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @return {Promise} - the http request promise\n   */\n  getCards (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/cards`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Update card lock\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.cardUid - the card uid\n   * @param {boolean} parameters.enabled - Whether the card should be locked. Set to false to lock, true to unlock.\n   * @return {Promise} - the http request promise\n   */\n  updateCardLock (parameters) {\n    return this.updateCardControl({ ...parameters, endpoint: 'enabled' })\n  }\n\n  /**\n   * Update ATM withdrawal control\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.cardUid - the card uid\n   * @param {boolean} parameters.enabled - Whether ATM withdrawals should be allowed. Set to false to block, true to allow.\n   * @return {Promise} - the http request promise\n   */\n  updateCardATMControl (parameters) {\n    return this.updateCardControl({ ...parameters, endpoint: 'atm-enabled' })\n  }\n\n  /**\n   * Update online payments control\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.cardUid - the card uid\n   * @param {boolean} parameters.enabled - Whether online payments should be allowed. Set to false to block, true to allow.\n   * @return {Promise} - the http request promise\n   */\n  updateCardOnlineControl (parameters) {\n    return this.updateCardControl({ ...parameters, endpoint: 'online-enabled' })\n  }\n\n  /**\n   * Update mobile wallet payments control\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.cardUid - the card uid\n   * @param {boolean} parameters.enabled - Whether mobile wallet payments should be allowed. Set to false to block, true to allow.\n   * @return {Promise} - the http request promise\n   */\n  updateCardMobileWalletControl (parameters) {\n    return this.updateCardControl({ ...parameters, endpoint: 'mobile-wallet-enabled' })\n  }\n\n  /**\n   * Update gambling payments control\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.cardUid - the card uid\n   * @param {boolean} parameters.enabled - Whether gambling payments should be allowed. Set to false to block, true to allow.\n   * @return {Promise} - the http request promise\n   */\n  updateCardGamblingControl (parameters) {\n    return this.updateCardControl({ ...parameters, endpoint: 'gambling-enabled' })\n  }\n\n  /**\n   * Update card present payments (contactless and chip and pin) control\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.cardUid - the card uid\n   * @param {boolean} parameters.enabled - Whether card present payments (contactless and chip and pin) should be allowed. Set to false to block, true to allow.\n   * @return {Promise} - the http request promise\n   */\n  updateCardPresentControl (parameters) {\n    return this.updateCardControl({ ...parameters, endpoint: 'pos-enabled' })\n  }\n\n  /**\n   * Update magstripe payments control\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.cardUid - the card uid\n   * @param {boolean} parameters.enabled - Whether magstripe payments should be allowed. Set to false to block, true to allow.\n   * @return {Promise} - the http request promise\n   */\n  updateCardMagstripeControl (parameters) {\n    return this.updateCardControl({ ...parameters, endpoint: 'mag-stripe-enabled' })\n  }\n\n  /**\n   * Update a card control\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.cardUid - the card uid\n   * @param {boolean} parameters.enabled - Whether the control should be should be locked. Set to false to lock, true to unlock.\n   * @param {string} parameters.endpoint - the last segment of the endpoint name\n   * @return {Promise} - the http request promise\n   */\n  updateCardControl (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    updateCardControlParameterValidator(parameters)\n    const { apiUrl, accessToken, cardUid, enabled, endpoint } = parameters\n\n    const url = `${apiUrl}/api/v2/cards/${cardUid}/controls/${endpoint}`\n    log(`PUT ${url}`)\n\n    return axios({\n      method: 'PUT',\n      url,\n      headers: payloadHeaders(accessToken),\n      data: JSON.stringify({ enabled })\n    })\n  }\n}\n\nconst updateCardControlParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  cardUid: 'uuid',\n  enabled: 'boolean'\n})\n\nmodule.exports = Card\n","import axios from 'axios'\nimport debug from 'debug'\nimport { defaultHeaders } from '../utils/http'\nimport { struct, minAPIParameterDefintion } from '../utils/validator'\n\nconst log = debug('starling:feed-item-service')\n\n/**\n * Service to interact with a customer's feed items\n */\nclass FeedItem {\n  /**\n   * Create a new feed item service\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options\n  }\n\n  /**\n   * Get feed items created between two timestamps\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @param {string} parameters.categoryUid - the category uid\n   * @param {string} parameters.minTransactionTimestamp - timestamp e.g. '2019-10-25T12:34:56.789Z'\n   * @param {string} parameters.maxTransactionTimestamp - timestamp e.g. '2019-10-26T12:34:56.789Z'\n   * @return {Promise} - the http request promise\n   */\n  getFeedItemsBetween (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getFeedItemsBetweenParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, categoryUid, minTransactionTimestamp, maxTransactionTimestamp } = parameters\n\n    const url = `${apiUrl}/api/v2/feed/account/${accountUid}/category/${categoryUid}/transactions-between`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      params: {\n        minTransactionTimestamp,\n        maxTransactionTimestamp\n      },\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get a feed item\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @param {string} parameters.categoryUid - the category uid\n   * @param {string} parameters.feedItemUid - the feed item uid\n   * @return {Promise} - the http request promise\n   */\n  getFeedItem (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getFeedItemParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, categoryUid, feedItemUid } = parameters\n\n    const url = `${apiUrl}/api/v2/feed/account/${accountUid}/category/${categoryUid}/${feedItemUid}`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get feed items created or updated since a given timestamp\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @param {string} parameters.categoryUid - the category uid\n   * @param {string} parameters.changesSince - timestamp e.g. '2019-10-25T12:34:56.789Z'\n   * @return {Promise} - the http request promise\n   */\n  getFeedItemsChangedSince (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getFeedItemsChangedSinceParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, categoryUid, changesSince } = parameters\n\n    const url = `${apiUrl}/api/v2/feed/account/${accountUid}/category/${categoryUid}`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      params: {\n        changesSince\n      },\n      headers: defaultHeaders(accessToken)\n    })\n  }\n}\n\nconst getFeedItemsBetweenParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  categoryUid: 'uuid',\n  minTransactionTimestamp: 'timestamp',\n  maxTransactionTimestamp: 'timestamp'\n})\n\nconst getFeedItemParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  categoryUid: 'uuid',\n  feedItemUid: 'uuid'\n})\n\nconst getFeedItemsChangedSinceParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  categoryUid: 'uuid',\n  changesSince: 'timestamp'\n})\n\nmodule.exports = FeedItem\n","import axios from 'axios'\nimport debug from 'debug'\nimport { defaultHeaders } from '../utils/http'\nimport { minAPIParameterValidator } from '../utils/validator'\n\nconst log = debug('starling:identity-service')\n\n/**\n * Service to interact with the API User identities endpoints\n */\nclass Identity {\n  /**\n   * Creates an instance of the identity client\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options\n  }\n\n  /**\n   * Get the current token identity\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token.\n   * @return {Promise} - the http request promise\n   */\n  getTokenIdentity (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/identity/token`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get the authorising individual's identity\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token.\n   * @return {Promise} - the http request promise\n   */\n  getAuthorisingIndividual (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/identity/individual`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n}\n\nmodule.exports = Identity\n","import axios from 'axios'\nimport debug from 'debug'\nimport { defaultHeaders } from '../utils/http'\nimport { struct, minAPIParameterDefintion, minAPIParameterValidator } from '../utils/validator'\n\nconst log = debug('starling:mandate-service')\n\n/**\n * Service to interact with a customer's mandates\n */\nclass Mandate {\n  /**\n   * Create a new mandate service\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options\n  }\n\n  /**\n   * Gets a list of the customer's current direct debit mandates\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @return {Promise} - the http request promise\n   */\n  listMandates (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/direct-debit/mandates`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Gets a specific direct debit mandate\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.mandateUid - unique identifier of the mandate\n   * @return {Promise} - the http request promise\n   */\n  getMandate (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getMandateParameterValidator(parameters)\n    const { apiUrl, accessToken, mandateUid } = parameters\n\n    const url = `${apiUrl}/api/v2/direct-debit/mandates/${mandateUid}`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Deletes specific direct debit mandate\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token.\n   * @param {string} parameters.mandateUid - the unique mandate ID\n   * @return {Promise} - the http request promise\n   */\n  deleteMandate (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    deleteMandateParameterValidator(parameters)\n    const { apiUrl, accessToken, mandateUid } = parameters\n\n    const url = `${apiUrl}/api/v2/direct-debit/mandates/${mandateUid}`\n    log(`DELETE ${url}`)\n\n    return axios({\n      method: 'DELETE',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n}\n\nconst getMandateParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  mandateUid: 'uuid'\n})\n\nconst deleteMandateParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  mandateUid: 'uuid'\n})\n\nmodule.exports = Mandate\n","import axios from 'axios'\nimport debug from 'debug'\nimport { struct } from '../utils/validator'\n\nconst ACCESS_TOKEN_GRANT_TYPE = 'authorization_code'\nconst REFRESH_TOKEN_GRANT_TYPE = 'refresh_token'\n\nconst log = debug('starling:oauth-service')\n\n/**\n * Service to interact with a the oauth endpoint\n */\nclass OAuth {\n  /**\n   * Create a new oauth service\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options\n  }\n\n  /**\n   * Exchanges the authorization code for an access token\n   * @param {string} authorizationCode - the authorization code, acquired from the user agent after the user authenticates with starling\n   * @return {Promise} - the http request promise\n   */\n  getAccessToken (authorizationCode) {\n    return this.getOAuthToken({\n      queryParams: {\n        code: authorizationCode,\n        grant_type: ACCESS_TOKEN_GRANT_TYPE,\n        client_id: this.options.clientId,\n        client_secret: this.options.clientSecret,\n        redirect_uri: this.options.redirectUri\n      }\n    })\n  }\n\n  /**\n   * Exchanges the authorization code for an access token\n   * @param {string} refreshToken - the oauth refresh token, used when the access token expires to claim a new access token.\n   * @return {Promise} - the http request promise\n   */\n  refreshAccessToken (refreshToken) {\n    return this.getOAuthToken({\n      queryParams: {\n        refresh_token: refreshToken,\n        grant_type: REFRESH_TOKEN_GRANT_TYPE,\n        client_id: this.options.clientId,\n        client_secret: this.options.clientSecret\n      }\n    })\n  }\n\n  /**\n   * Gets the access token from the starling OAuth endpoint\n   * @param {string} parameters.apiUrl - the OAuth url\n   * @param {object} parameters.queryParams - the query params passed to the OAuth endpoint as per the OAuth spec\n   * @return {Promise} - the http request promise\n   */\n  getOAuthToken (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getOAuthTokenParameterValidator(parameters)\n    const { apiUrl, queryParams } = parameters\n\n    const url = `${apiUrl}/oauth/access-token`\n    log(`POST ${url} queryParams:${JSON.stringify(queryParams)}`)\n\n    return axios({\n      url,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Accept: 'application/json'\n      },\n      params: queryParams\n    })\n  }\n}\n\nconst getOAuthTokenParameterValidator = struct.interface({\n  apiUrl: 'string',\n  queryParams: struct.union([\n    struct.object({\n      client_id: 'string',\n      client_secret: 'string',\n      grant_type: struct.literal(ACCESS_TOKEN_GRANT_TYPE),\n      code: 'string',\n      redirect_uri: 'string'\n    }),\n    struct.object({\n      client_id: 'string',\n      client_secret: 'string',\n      grant_type: struct.literal(REFRESH_TOKEN_GRANT_TYPE),\n      refresh_token: 'string'\n    })\n  ])\n})\n\nmodule.exports = OAuth\n","import axios from 'axios'\nimport debug from 'debug'\nimport { defaultHeaders, payloadHeaders } from '../utils/http'\nimport { struct, minAPIParameterDefintion, minAPIParameterValidator } from '../utils/validator'\n\nconst log = debug('starling:payee-service')\n\n/**\n * Service to interact with an account holder's payees\n */\nclass Payee {\n  /**\n   * Create a new payee service\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options\n  }\n\n  /**\n   * Get an account holder's payees\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token.\n   * @return {Promise} - the http request promise\n   */\n  getPayees (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/payees`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Create a new payee\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token.\n   * @param {Object} parameters.payeeCreationRequest - the payee creation request.\n   * @return {Promise} - the http request promise\n   */\n  createPayee (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    createPayeeParameterValidator(parameters)\n    const { apiUrl, accessToken, payeeCreationRequest } = parameters\n\n    const url = `${apiUrl}/api/v2/payees`\n    log(`PUT ${url}`)\n    return axios({\n      method: 'PUT',\n      url,\n      headers: payloadHeaders(accessToken),\n      data: JSON.stringify(payeeCreationRequest)\n    })\n  }\n\n  /**\n   * Delete an account holder's payee\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token.\n   * @param {string} parameters.payeeUid - the payeeUid of the payee to be deleted.\n   * @return {Promise} - the http request promise\n   */\n  deletePayee (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    deletePayeeParameterValidator(parameters)\n    const { apiUrl, accessToken, payeeUid } = parameters\n\n    const url = `${apiUrl}/api/v2/payees/${payeeUid}`\n    log(`DELETE ${url}`)\n    return axios({\n      method: 'DELETE',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n}\n\nconst createPayeeParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  payeeCreationRequest: struct.object({\n    payeeName: 'string',\n    phoneNumber: 'string?',\n    payeeType: struct.enum(['INDIVIDUAL', 'BUSINESS']),\n    firstName: 'string?',\n    middleName: 'string?',\n    lastName: 'string?',\n    businessName: 'string?',\n    dateOfBirth: 'date?',\n    accounts: struct.optional([struct.object({\n      description: 'string',\n      defaultAccount: 'boolean',\n      countryCode: 'string',\n      accountIdentifier: 'string',\n      bankIdentifier: 'string',\n      bankIdentifierType: struct.enum(['SORT_CODE', 'SWIFT', 'IBAN', 'ABA', 'ABA_WIRE', 'ABA_ACH'])\n    })])\n  })\n})\n\nconst deletePayeeParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  payeeUid: 'uuid'\n})\n\nmodule.exports = Payee\n","import axios from 'axios'\nimport debug from 'debug'\nimport { defaultHeaders } from '../utils/http'\nimport { struct, minAPIParameterDefintion } from '../utils/validator'\n\nconst log = debug('starling:payment-service')\n\n/**\n * Service to interact with a customer's payments\n */\nclass Payment {\n  /**\n   * Create a new payment service\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options\n  }\n\n  /**\n   * Get a payment order\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.paymentOrderUid - the payment order uid\n   * @return {Promise} - the http request promise\n   */\n  getPaymentOrder (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getPaymentOrderParameterValidator(parameters)\n    const { apiUrl, accessToken, paymentOrderUid } = parameters\n\n    const url = `${apiUrl}/api/v2/payments/local/payment-order/${paymentOrderUid}`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get a payment order's payments\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.paymentOrderUid - the payment order uid\n   * @return {Promise} - the http request promise\n   */\n  getPaymentOrderPayments (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getPaymentOrderPaymentsParameterValidator(parameters)\n    const { apiUrl, accessToken, paymentOrderUid } = parameters\n\n    const url = `${apiUrl}/api/v2/payments/local/payment-order/${paymentOrderUid}/payments`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * List standing orders\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid of the account to get standing orders of\n   * @param {string} parameters.categoryUid - the category uid of the category to get standing orders of\n   * @return {Promise} - the http request promise\n   */\n  listStandingOrders (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    listStandingOrdersParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, categoryUid } = parameters\n\n    const url = `${apiUrl}/api/v2/payments/local/account/${accountUid}/category/${categoryUid}/standing-orders`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get a standing order\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid of the standing order\n   * @param {string} parameters.categoryUid - the category uid of the standing order\n   * @param {string} parameters.paymentOrderUid - the payment order uid of the standing order\n   * @return {Promise} - the http request promise\n   */\n  getStandingOrder (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getStandingOrderParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, categoryUid, paymentOrderUid } = parameters\n\n    const url = `${apiUrl}/api/v2/payments/local/account/${accountUid}/category/${categoryUid}/standing-orders/${paymentOrderUid}`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n}\n\nconst getPaymentOrderParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  paymentOrderUid: 'uuid'\n})\n\nconst getPaymentOrderPaymentsParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  paymentOrderUid: 'uuid'\n})\n\nconst listStandingOrdersParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  categoryUid: 'uuid'\n})\n\nconst getStandingOrderParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  categoryUid: 'uuid',\n  paymentOrderUid: 'uuid'\n})\n\nmodule.exports = Payment\n","import axios from 'axios'\nimport debug from 'debug'\nimport { defaultHeaders, payloadHeaders } from '../utils/http'\nimport { struct, minAPIParameterDefintion } from '../utils/validator'\n\nconst log = debug('starling:savings-goal-service')\n\n/**\n * Service to interact with a customer's savings goals\n */\nclass SavingsGoal {\n  /**\n   * Create a new savings goal service\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options\n  }\n\n  /**\n   * Get all savings goals\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @return {Promise} - the http request promise\n   */\n  getSavingsGoals (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getSavingsGoalsParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid } = parameters\n\n    const url = `${apiUrl}/api/v2/account/${accountUid}/savings-goals`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get a savings goal\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @param {string} parameters.savingsGoalUid - the savings goal's uid\n   * @return {Promise} - the http request promise\n   */\n  getSavingsGoal (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getSavingsGoalParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, savingsGoalUid } = parameters\n\n    const url = `${apiUrl}/api/v2/account/${accountUid}/savings-goals/${savingsGoalUid}`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Create a savings goal\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid of the account to create the savings goal in\n   * @param {string} parameters.name - the name of the new savings goal\n   * @param {string=} parameters.currency - ISO-4217 3 character currency code\n   * @param {number=} parameters.targetAmount - the target amount in minor units (e.g. 1234 => £12.34)\n   * @param {string=} parameters.targetCurrency - ISO-4217 3 character currency code\n   * @param {string=} parameters.base64EncodedPhoto - base64 encoded image to associate with the goal\n   * @return {Promise} - the http request promise\n   */\n  createSavingsGoal (parameters) {\n    parameters = Object.assign({}, { currency: 'GBP', targetAmount: 0, targetCurrency: 'GBP' }, this.options, parameters)\n    createSavingsGoalParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, name, currency, targetAmount, targetCurrency, base64EncodedPhoto } = parameters\n\n    const url = `${apiUrl}/api/v2/account/${accountUid}/savings-goals`\n    log(`PUT ${url}`)\n\n    return axios({\n      method: 'PUT',\n      url,\n      headers: payloadHeaders(accessToken),\n      data: JSON.stringify({\n        name,\n        currency,\n        target: {\n          minorUnits: targetAmount,\n          currency: targetCurrency\n        },\n        base64EncodedPhoto\n      })\n    })\n  }\n\n  /**\n   * Delete a savings goal\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @param {string} parameters.savingsGoalUid - the savings goal's uid\n   * @return {Promise} - the http request promise\n   */\n  deleteSavingsGoal (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    deleteSavingsGoalParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, savingsGoalUid } = parameters\n\n    const url = `${apiUrl}/api/v2/account/${accountUid}/savings-goals/${savingsGoalUid}`\n    log(`DELETE ${url}`)\n\n    return axios({\n      method: 'DELETE',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Add money to a savings goal\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @param {string} parameters.savingsGoalUid - the savings goal's uid\n   * @param {string} parameters.transferUid - a transaction ID for this transaction\n   * @param {number} parameters.amount - amount in the minor units of the given currency; eg pence in GBP, cents in EUR\n   * @param {string=} parameters.currency - ISO-4217 3 character currency code\n   * @return {Promise} - the http request promise\n   */\n  addMoneyToSavingsGoal (parameters) {\n    parameters = Object.assign({}, { currency: 'GBP' }, this.options, parameters)\n    addMoneyToSavingsGoalParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, savingsGoalUid, transferUid, amount, currency } = parameters\n\n    const url = `${apiUrl}/api/v2/account/${accountUid}/savings-goals/${savingsGoalUid}/add-money/${transferUid}`\n    log(`PUT ${url}`)\n\n    return axios({\n      method: 'PUT',\n      url,\n      headers: payloadHeaders(accessToken),\n      data: JSON.stringify({\n        amount: {\n          currency,\n          minorUnits: amount\n        }\n      })\n    })\n  }\n\n  /**\n   * Withdraw money from a savings goal\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @param {string} parameters.savingsGoalUid - the savings goal's uid\n   * @param {string} parameters.transferUid - a transaction ID for this transaction\n   * @param {number} parameters.amount - amount in the minor units of the given currency; eg pence in GBP, cents in EUR\n   * @param {string=} parameters.currency - ISO-4217 3 character currency code\n   * @return {Promise} - the http request promise\n   */\n  withdrawMoneyFromSavingsGoal (parameters) {\n    parameters = Object.assign({}, { currency: 'GBP' }, this.options, parameters)\n    withdrawMoneyFromSavingsGoalParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, savingsGoalUid, transferUid, amount, currency } = parameters\n\n    const url = `${apiUrl}/api/v2/account/${accountUid}/savings-goals/${savingsGoalUid}/withdraw-money/${transferUid}`\n    log(`PUT ${url}`)\n\n    return axios({\n      method: 'PUT',\n      url,\n      headers: payloadHeaders(accessToken),\n      data: JSON.stringify({\n        amount: {\n          currency,\n          minorUnits: amount\n        }\n      })\n    })\n  }\n}\n\nconst getSavingsGoalsParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid'\n})\n\nconst getSavingsGoalParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  savingsGoalUid: 'uuid'\n})\n\nconst deleteSavingsGoalParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  savingsGoalUid: 'uuid'\n})\n\nconst createSavingsGoalParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  name: 'string',\n  currency: 'string',\n  targetAmount: 'number',\n  targetCurrency: 'string',\n  base64EncodedPhoto: 'string?'\n})\n\nconst addMoneyToSavingsGoalParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  savingsGoalUid: 'uuid',\n  transferUid: 'uuid',\n  amount: 'number',\n  currency: 'string'\n})\n\nconst withdrawMoneyFromSavingsGoalParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  savingsGoalUid: 'uuid',\n  transferUid: 'uuid',\n  amount: 'number',\n  currency: 'string'\n})\n\nmodule.exports = SavingsGoal\n","import Account from './entities/account'\nimport AccountHolder from './entities/accountHolder'\nimport Address from './entities/address'\nimport FeedItem from './entities/feedItem'\nimport Card from './entities/card'\nimport OAuth from './entities/oauth'\nimport Payee from './entities/payee'\nimport Payment from './entities/payment'\nimport Mandate from './entities/mandate'\nimport SavingsGoal from './entities/savingsGoal'\nimport Identity from './entities/identity'\n\n/**\n * @property {Identity} identity\n * @property {AccountHolder} accountHolder\n * @property {Account} account\n * @property {Address} address\n * @property {FeedItem} feedItem\n * @property {Payment} payment\n * @property {Mandate} mandate\n * @property {Payee} payee\n * @property {Card} card\n * @property {SavingsGoal} savingsGoal\n * @property {OAuth} oAuth\n */\nclass Starling {\n  /**\n   * Create an instance of the starling client\n   * @param {Object=} options - configuration parameters\n   */\n  constructor (options) {\n    const defaults = {\n      apiUrl: 'https://api.starlingbank.com',\n      clientId: '',\n      clientSecret: ''\n    }\n\n    this.config = Object.assign({}, defaults, options)\n\n    this.identity = new Identity(this.config)\n    this.accountHolder = new AccountHolder(this.config)\n    this.account = new Account(this.config)\n    this.address = new Address(this.config)\n    this.feedItem = new FeedItem(this.config)\n    this.payment = new Payment(this.config)\n    this.mandate = new Mandate(this.config)\n    this.payee = new Payee(this.config)\n    this.card = new Card(this.config)\n    this.savingsGoal = new SavingsGoal(this.config)\n    this.oAuth = new OAuth(this.config)\n  }\n}\n\nmodule.exports = Starling\n","export const defaultHeaders = (accessToken) => ({\n  Accept: 'application/json',\n  Authorization: `Bearer ${accessToken}`\n})\n\nexport const payloadHeaders = (accessToken) => ({\n  ...defaultHeaders(accessToken),\n  'Content-Type': 'application/json'\n})\n","const superstruct = require('superstruct').superstruct\nexport const struct = superstruct({\n  types: {\n    uuid: value => /^[0-9a-f]{8}-[0-9a-f]{4}-[4][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(value),\n    yearMonth: value => /^[0-9]{4}-(?:1[0-2]|0[1-9])$/.test(value),\n    date: value => /^[0-9]{4}-(?:1[0-2]|0[1-9])-(?:3[01]|[12]\\d|0[1-9])$/.test(value),\n    timestamp: value => /^((?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z)?$/.test(value)\n  }\n})\nexport const minAPIParameterDefintion = { accessToken: 'string', apiUrl: 'string' }\nexport const minAPIParameterValidator = struct.interface(minAPIParameterDefintion)\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}