{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/entities/account.js","src/entities/accountHolder.js","src/entities/address.js","src/entities/card.js","src/entities/feedItem.js","src/entities/identity.js","src/entities/mandate.js","src/entities/oauth.js","src/entities/payee.js","src/entities/payment.js","src/entities/savingsGoal.js","src/starling.js","src/utils/http.js","src/utils/validator.js"],"names":["f","exports","module","define","amd","window","global","self","this","starling","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","log","Account","options","_classCallCheck","parameters","Object","assign","_validator","minAPIParameterValidator","_parameters","apiUrl","accessToken","url","concat","_axios","method","headers","_http","defaultHeaders","getAccountIdentifiersParameterValidator","_parameters2","accountUid","getAccountBalanceParameterValidator","_parameters3","getConfirmationOfFundsParameterValidator","_parameters4","targetAmountInMinorUnits","params","getStatementPeriodsParameterValidator","_parameters5","yearMonth","Date","toISOString","slice","format","responseType","getStatementForPeriodParameterValidator","_parameters6","_objectSpread","Accept","getStatementForRangeParameterValidator","_parameters7","start","end","struct","minAPIParameterDefintion","AccountHolder","Address","Card","updateCardControl","endpoint","updateCardControlParameterValidator","cardUid","enabled","payloadHeaders","data","JSON","stringify","FeedItem","getFeedItemsBetweenParameterValidator","categoryUid","minTransactionTimestamp","maxTransactionTimestamp","getFeedItemParameterValidator","feedItemUid","getFeedItemsChangedSinceParameterValidator","changesSince","Identity","Mandate","getMandateParameterValidator","mandateUid","deleteMandateParameterValidator","ACCESS_TOKEN_GRANT_TYPE","REFRESH_TOKEN_GRANT_TYPE","_debug","OAuth","authorizationCode","getOAuthToken","queryParams","grant_type","client_id","clientId","client_secret","clientSecret","redirect_uri","redirectUri","refreshToken","refresh_token","getOAuthTokenParameterValidator","Content-Type","union","object","literal","Payee","createPayeeParameterValidator","payeeCreationRequest","deletePayeeParameterValidator","payeeUid","payeeName","phoneNumber","payeeType","firstName","middleName","lastName","businessName","dateOfBirth","accounts","optional","description","defaultAccount","countryCode","accountIdentifier","bankIdentifier","bankIdentifierType","Payment","getPaymentOrderParameterValidator","paymentOrderUid","getPaymentOrderPaymentsParameterValidator","listStandingOrdersParameterValidator","getStandingOrderParameterValidator","SavingsGoal","getSavingsGoalsParameterValidator","getSavingsGoalParameterValidator","savingsGoalUid","currency","targetAmount","targetCurrency","createSavingsGoalParameterValidator","name","base64EncodedPhoto","target","minorUnits","deleteSavingsGoalParameterValidator","addMoneyToSavingsGoalParameterValidator","transferUid","amount","withdrawMoneyFromSavingsGoalParameterValidator","Starling","config","identity","_identity","accountHolder","_accountHolder","account","_account","address","_address","feedItem","_feedItem","payment","_payment","mandate","_mandate","payee","_payee","card","_card","savingsGoal","_savingsGoal","oAuth","_oauth","Authorization","superstruct","types","uuid","value","test","date","timestamp"],"mappings":"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","file":"starling.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import axios from 'axios'\nimport debug from 'debug'\nimport { defaultHeaders } from '../utils/http'\nimport { struct, minAPIParameterDefintion, minAPIParameterValidator } from '../utils/validator'\n\nconst log = debug('starling:account-service')\n\n/**\n * Service to interact with a customer's account\n */\nclass Account {\n  /**\n   * Creates an instance of the account client\n   * @param {Object} options - application config\n   */\n  constructor (options) {\n    this.options = options\n  }\n\n  /**\n   * Get an account holder's bank accounts\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @return {Promise} - the http request promise\n   */\n  getAccounts (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/accounts`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get an account's bank identifiers\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @return {Promise} - the http request promise\n   */\n  getAccountIdentifiers (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getAccountIdentifiersParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid } = parameters\n\n    const url = `${apiUrl}/api/v2/accounts/${accountUid}/identifiers`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get an account's balance\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @return {Promise} - the http request promise\n   */\n  getAccountBalance (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getAccountBalanceParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid } = parameters\n\n    const url = `${apiUrl}/api/v2/accounts/${accountUid}/balance`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get whether there are available funds for a requested amount\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @param {number} parameters.targetAmountInMinorUnits - the target amount in minor units\n   * @return {Promise} - the http request promise\n   */\n  getConfirmationOfFunds (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getConfirmationOfFundsParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, targetAmountInMinorUnits } = parameters\n\n    const url = `${apiUrl}/api/v2/accounts/${accountUid}/confirmation-of-funds`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken),\n      params: {\n        targetAmountInMinorUnits\n      }\n    })\n  }\n\n  /**\n   * Get list of statement periods which are available for an account\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @return {Promise} - the http request promise\n   */\n  getStatementPeriods (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getStatementPeriodsParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid } = parameters\n\n    const url = `${apiUrl}/api/v2/accounts/${accountUid}/statement/available-periods`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Download a statement for a given statement period\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @param {string=} parameters.yearMonth - the statement period's year month (yyyy-MM)\n   * @param {string=} parameters.format - one of 'application/pdf' or 'text/csv'\n   * @param {string=} parameters.responseType - the axios responseType for the request\n   * @return {Promise} - the http request promise\n   */\n  getStatementForPeriod (parameters) {\n    parameters = Object.assign({}, { yearMonth: new Date().toISOString().slice(0, 7), format: 'text/csv', responseType: 'stream' }, this.options, parameters)\n    getStatementForPeriodParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, format, yearMonth, responseType } = parameters\n\n    const url = `${apiUrl}/api/v2/accounts/${accountUid}/statement/download`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: {\n        ...defaultHeaders(accessToken),\n        Accept: format\n      },\n      params: {\n        yearMonth\n      },\n      responseType\n    })\n  }\n\n  /**\n   * Download a statement for a given date range\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @param {string} parameters.start - the beginning of the statement date range (yyyy-MM-dd)\n   * @param {string=} parameters.end - the end of the statement date range (yyyy-MM-dd)\n   * @param {string=} parameters.format - one of 'application/pdf' or 'text/csv'\n   * @param {string=} parameters.responseType - the axios responseType for the request\n   * @return {Promise} - the http request promise\n   */\n  getStatementForRange (parameters) {\n    parameters = Object.assign({}, { format: 'text/csv', responseType: 'stream' }, this.options, parameters)\n    getStatementForRangeParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, start, end, format, responseType } = parameters\n\n    const url = `${apiUrl}/api/v2/accounts/${accountUid}/statement/downloadForDateRange`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: {\n        ...defaultHeaders(accessToken),\n        Accept: format\n      },\n      params: {\n        start,\n        end\n      },\n      responseType\n    })\n  }\n}\n\nconst getAccountIdentifiersParameterValidator = struct.interface({ ...minAPIParameterDefintion, accountUid: 'uuid' })\n\nconst getAccountBalanceParameterValidator = struct.interface({ ...minAPIParameterDefintion, accountUid: 'uuid' })\n\nconst getConfirmationOfFundsParameterValidator = struct.interface({ ...minAPIParameterDefintion, accountUid: 'uuid', targetAmountInMinorUnits: 'number' })\n\nconst getStatementPeriodsParameterValidator = struct.interface({ ...minAPIParameterDefintion, accountUid: 'uuid' })\n\nconst getStatementForPeriodParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  yearMonth: 'yearMonth',\n  format: struct.enum(['application/pdf', 'text/csv']),\n  responseType: 'string'\n})\n\nconst getStatementForRangeParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  start: 'date',\n  end: 'date?',\n  format: struct.enum(['application/pdf', 'text/csv']),\n  responseType: 'string'\n})\n\nmodule.exports = Account\n","import axios from 'axios'\nimport debug from 'debug'\nimport { defaultHeaders } from '../utils/http'\nimport { minAPIParameterValidator } from '../utils/validator'\n\nconst log = debug('starling:account-holder-service')\n\n/**\n * Service to interact with an account holder\n */\nclass AccountHolder {\n  /**\n   * Creates an instance of the account holder client\n   * @param {Object} options - application config\n   */\n  constructor (options) {\n    this.options = options\n  }\n\n  /**\n   * Get basic information about the account holder\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @return {Promise} - the http request promise\n   */\n  getAccountHolder (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/account-holder`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get the name of the account holder\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @return {Promise} - the http request promise\n   */\n  getAccountHolderName (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/account-holder/name`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get an individual account holder's details\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @return {Promise} - the http request promise\n   */\n  getAccountHolderIndividual (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/account-holder/individual`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get a joint account holder's details\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @return {Promise} - the http request promise\n   */\n  getAccountHolderJoint (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/account-holder/joint`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get a business account holder's details\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @return {Promise} - the http request promise\n   */\n  getAccountHolderBusiness (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/account-holder/business`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get a business account holder's registered address\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @return {Promise} - the http request promise\n   */\n  getAccountHolderBusinessRegisteredAddress (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/account-holder/business/registered-address`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get a business account holder's correspondence address\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @return {Promise} - the http request promise\n   */\n  getAccountHolderBusinessCorrespondenceAddress (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/account-holder/business/correspondence-address`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n}\n\nmodule.exports = AccountHolder\n","import axios from 'axios'\nimport debug from 'debug'\nimport { defaultHeaders } from '../utils/http'\nimport { minAPIParameterValidator } from '../utils/validator'\n\nconst log = debug('starling:address-service')\n\n/**\n * Service to interact with a customer address\n */\nclass Address {\n  /**\n   * Creates an instance of the address client\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options\n  }\n\n  /**\n   * Retrieves a customer's address\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token.\n   * @return {Promise} - the http request promise\n   */\n  getAddresses (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/addresses`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n}\n\nmodule.exports = Address\n","import axios from 'axios'\nimport debug from 'debug'\nimport { defaultHeaders, payloadHeaders } from '../utils/http'\nimport { struct, minAPIParameterDefintion, minAPIParameterValidator } from '../utils/validator'\n\nconst log = debug('starling:card-service')\n\n/**\n * Service to interact with a customer card\n */\nclass Card {\n  /**\n   * Creates an instance of the client's card\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options\n  }\n\n  /**\n   * Get all the cards for an account holder\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @return {Promise} - the http request promise\n   */\n  getCards (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/cards`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Update card lock\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.cardUid - the card uid\n   * @param {boolean} parameters.enabled - Whether the card should be locked. Set to false to lock, true to unlock.\n   * @return {Promise} - the http request promise\n   */\n  updateCardLock (parameters) {\n    return this.updateCardControl({ ...parameters, endpoint: 'enabled' })\n  }\n\n  /**\n   * Update ATM withdrawal control\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.cardUid - the card uid\n   * @param {boolean} parameters.enabled - Whether ATM withdrawals should be allowed. Set to false to block, true to allow.\n   * @return {Promise} - the http request promise\n   */\n  updateCardATMControl (parameters) {\n    return this.updateCardControl({ ...parameters, endpoint: 'atm-enabled' })\n  }\n\n  /**\n   * Update online payments control\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.cardUid - the card uid\n   * @param {boolean} parameters.enabled - Whether online payments should be allowed. Set to false to block, true to allow.\n   * @return {Promise} - the http request promise\n   */\n  updateCardOnlineControl (parameters) {\n    return this.updateCardControl({ ...parameters, endpoint: 'online-enabled' })\n  }\n\n  /**\n   * Update mobile wallet payments control\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.cardUid - the card uid\n   * @param {boolean} parameters.enabled - Whether mobile wallet payments should be allowed. Set to false to block, true to allow.\n   * @return {Promise} - the http request promise\n   */\n  updateCardMobileWalletControl (parameters) {\n    return this.updateCardControl({ ...parameters, endpoint: 'mobile-wallet-enabled' })\n  }\n\n  /**\n   * Update gambling payments control\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.cardUid - the card uid\n   * @param {boolean} parameters.enabled - Whether gambling payments should be allowed. Set to false to block, true to allow.\n   * @return {Promise} - the http request promise\n   */\n  updateCardGamblingControl (parameters) {\n    return this.updateCardControl({ ...parameters, endpoint: 'gambling-enabled' })\n  }\n\n  /**\n   * Update card present payments (contactless and chip and pin) control\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.cardUid - the card uid\n   * @param {boolean} parameters.enabled - Whether card present payments (contactless and chip and pin) should be allowed. Set to false to block, true to allow.\n   * @return {Promise} - the http request promise\n   */\n  updateCardPresentControl (parameters) {\n    return this.updateCardControl({ ...parameters, endpoint: 'pos-enabled' })\n  }\n\n  /**\n   * Update magstripe payments control\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.cardUid - the card uid\n   * @param {boolean} parameters.enabled - Whether magstripe payments should be allowed. Set to false to block, true to allow.\n   * @return {Promise} - the http request promise\n   */\n  updateCardMagstripeControl (parameters) {\n    return this.updateCardControl({ ...parameters, endpoint: 'mag-stripe-enabled' })\n  }\n\n  /**\n   * Update a card control\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.cardUid - the card uid\n   * @param {boolean} parameters.enabled - Whether the control should be should be locked. Set to false to lock, true to unlock.\n   * @param {string} parameters.endpoint - the last segment of the endpoint name\n   * @return {Promise} - the http request promise\n   */\n  updateCardControl (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    updateCardControlParameterValidator(parameters)\n    const { apiUrl, accessToken, cardUid, enabled, endpoint } = parameters\n\n    const url = `${apiUrl}/api/v2/cards/${cardUid}/controls/${endpoint}`\n    log(`PUT ${url}`)\n\n    return axios({\n      method: 'PUT',\n      url,\n      headers: payloadHeaders(accessToken),\n      data: JSON.stringify({ enabled })\n    })\n  }\n}\n\nconst updateCardControlParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  cardUid: 'uuid',\n  enabled: 'boolean'\n})\n\nmodule.exports = Card\n","import axios from 'axios'\nimport debug from 'debug'\nimport { defaultHeaders } from '../utils/http'\nimport { struct, minAPIParameterDefintion } from '../utils/validator'\n\nconst log = debug('starling:feed-item-service')\n\n/**\n * Service to interact with a customer's feed items\n */\nclass FeedItem {\n  /**\n   * Create a new feed item service\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options\n  }\n\n  /**\n   * Get feed items created between two timestamps\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @param {string} parameters.categoryUid - the category uid\n   * @param {string} parameters.minTransactionTimestamp - timestamp e.g. '2019-10-25T12:34:56.789Z'\n   * @param {string} parameters.maxTransactionTimestamp - timestamp e.g. '2019-10-26T12:34:56.789Z'\n   * @return {Promise} - the http request promise\n   */\n  getFeedItemsBetween (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getFeedItemsBetweenParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, categoryUid, minTransactionTimestamp, maxTransactionTimestamp } = parameters\n\n    const url = `${apiUrl}/api/v2/feed/account/${accountUid}/category/${categoryUid}/transactions-between`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      params: {\n        minTransactionTimestamp,\n        maxTransactionTimestamp\n      },\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get a feed item\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @param {string} parameters.categoryUid - the category uid\n   * @param {string} parameters.feedItemUid - the feed item uid\n   * @return {Promise} - the http request promise\n   */\n  getFeedItem (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getFeedItemParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, categoryUid, feedItemUid } = parameters\n\n    const url = `${apiUrl}/api/v2/feed/account/${accountUid}/category/${categoryUid}/${feedItemUid}`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get feed items created or updated since a given timestamp\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @param {string} parameters.categoryUid - the category uid\n   * @param {string} parameters.changesSince - timestamp e.g. '2019-10-25T12:34:56.789Z'\n   * @return {Promise} - the http request promise\n   */\n  getFeedItemsChangedSince (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getFeedItemsChangedSinceParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, categoryUid, changesSince } = parameters\n\n    const url = `${apiUrl}/api/v2/feed/account/${accountUid}/category/${categoryUid}`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      params: {\n        changesSince\n      },\n      headers: defaultHeaders(accessToken)\n    })\n  }\n}\n\nconst getFeedItemsBetweenParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  categoryUid: 'uuid',\n  minTransactionTimestamp: 'timestamp',\n  maxTransactionTimestamp: 'timestamp'\n})\n\nconst getFeedItemParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  categoryUid: 'uuid',\n  feedItemUid: 'uuid'\n})\n\nconst getFeedItemsChangedSinceParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  categoryUid: 'uuid',\n  changesSince: 'timestamp'\n})\n\nmodule.exports = FeedItem\n","import axios from 'axios'\nimport debug from 'debug'\nimport { defaultHeaders } from '../utils/http'\nimport { minAPIParameterValidator } from '../utils/validator'\n\nconst log = debug('starling:identity-service')\n\n/**\n * Service to interact with the API User identities endpoints\n */\nclass Identity {\n  /**\n   * Creates an instance of the identity client\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options\n  }\n\n  /**\n   * Get the current token identity\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token.\n   * @return {Promise} - the http request promise\n   */\n  getTokenIdentity (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/identity/token`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get the authorising individual's identity\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token.\n   * @return {Promise} - the http request promise\n   */\n  getAuthorisingIndividual (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/identity/individual`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n}\n\nmodule.exports = Identity\n","import axios from 'axios'\nimport debug from 'debug'\nimport { defaultHeaders } from '../utils/http'\nimport { struct, minAPIParameterDefintion, minAPIParameterValidator } from '../utils/validator'\n\nconst log = debug('starling:mandate-service')\n\n/**\n * Service to interact with a customer's mandates\n */\nclass Mandate {\n  /**\n   * Create a new mandate service\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options\n  }\n\n  /**\n   * Gets a list of the customer's current direct debit mandates\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @return {Promise} - the http request promise\n   */\n  listMandates (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/direct-debit/mandates`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Gets a specific direct debit mandate\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.mandateUid - unique identifier of the mandate\n   * @return {Promise} - the http request promise\n   */\n  getMandate (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getMandateParameterValidator(parameters)\n    const { apiUrl, accessToken, mandateUid } = parameters\n\n    const url = `${apiUrl}/api/v2/direct-debit/mandates/${mandateUid}`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Deletes specific direct debit mandate\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token.\n   * @param {string} parameters.mandateUid - the unique mandate ID\n   * @return {Promise} - the http request promise\n   */\n  deleteMandate (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    deleteMandateParameterValidator(parameters)\n    const { apiUrl, accessToken, mandateUid } = parameters\n\n    const url = `${apiUrl}/api/v2/direct-debit/mandates/${mandateUid}`\n    log(`DELETE ${url}`)\n\n    return axios({\n      method: 'DELETE',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n}\n\nconst getMandateParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  mandateUid: 'uuid'\n})\n\nconst deleteMandateParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  mandateUid: 'uuid'\n})\n\nmodule.exports = Mandate\n","import axios from 'axios'\nimport debug from 'debug'\nimport { struct } from '../utils/validator'\n\nconst ACCESS_TOKEN_GRANT_TYPE = 'authorization_code'\nconst REFRESH_TOKEN_GRANT_TYPE = 'refresh_token'\n\nconst log = debug('starling:oauth-service')\n\n/**\n * Service to interact with a the oauth endpoint\n */\nclass OAuth {\n  /**\n   * Create a new oauth service\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options\n  }\n\n  /**\n   * Exchanges the authorization code for an access token\n   * @param {string} authorizationCode - the authorization code, acquired from the user agent after the user authenticates with starling\n   * @return {Promise} - the http request promise\n   */\n  getAccessToken (authorizationCode) {\n    return this.getOAuthToken({\n      queryParams: {\n        code: authorizationCode,\n        grant_type: ACCESS_TOKEN_GRANT_TYPE,\n        client_id: this.options.clientId,\n        client_secret: this.options.clientSecret,\n        redirect_uri: this.options.redirectUri\n      }\n    })\n  }\n\n  /**\n   * Exchanges the authorization code for an access token\n   * @param {string} refreshToken - the oauth refresh token, used when the access token expires to claim a new access token.\n   * @return {Promise} - the http request promise\n   */\n  refreshAccessToken (refreshToken) {\n    return this.getOAuthToken({\n      queryParams: {\n        refresh_token: refreshToken,\n        grant_type: REFRESH_TOKEN_GRANT_TYPE,\n        client_id: this.options.clientId,\n        client_secret: this.options.clientSecret\n      }\n    })\n  }\n\n  /**\n   * Gets the access token from the starling OAuth endpoint\n   * @param {string} parameters.apiUrl - the OAuth url\n   * @param {object} parameters.queryParams - the query params passed to the OAuth endpoint as per the OAuth spec\n   * @return {Promise} - the http request promise\n   */\n  getOAuthToken (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getOAuthTokenParameterValidator(parameters)\n    const { apiUrl, queryParams } = parameters\n\n    const url = `${apiUrl}/oauth/access-token`\n    log(`POST ${url} queryParams:${JSON.stringify(queryParams)}`)\n\n    return axios({\n      url,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Accept: 'application/json'\n      },\n      params: queryParams\n    })\n  }\n}\n\nconst getOAuthTokenParameterValidator = struct.interface({\n  apiUrl: 'string',\n  queryParams: struct.union([\n    struct.object({\n      client_id: 'string',\n      client_secret: 'string',\n      grant_type: struct.literal(ACCESS_TOKEN_GRANT_TYPE),\n      code: 'string',\n      redirect_uri: 'string'\n    }),\n    struct.object({\n      client_id: 'string',\n      client_secret: 'string',\n      grant_type: struct.literal(REFRESH_TOKEN_GRANT_TYPE),\n      refresh_token: 'string'\n    })\n  ])\n})\n\nmodule.exports = OAuth\n","import axios from 'axios'\nimport debug from 'debug'\nimport { defaultHeaders, payloadHeaders } from '../utils/http'\nimport { struct, minAPIParameterDefintion, minAPIParameterValidator } from '../utils/validator'\n\nconst log = debug('starling:payee-service')\n\n/**\n * Service to interact with an account holder's payees\n */\nclass Payee {\n  /**\n   * Create a new payee service\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options\n  }\n\n  /**\n   * Get an account holder's payees\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token.\n   * @return {Promise} - the http request promise\n   */\n  getPayees (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    minAPIParameterValidator(parameters)\n    const { apiUrl, accessToken } = parameters\n\n    const url = `${apiUrl}/api/v2/payees`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Create a new payee\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token.\n   * @param {Object} parameters.payeeCreationRequest - the payee creation request.\n   * @return {Promise} - the http request promise\n   */\n  createPayee (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    createPayeeParameterValidator(parameters)\n    const { apiUrl, accessToken, payeeCreationRequest } = parameters\n\n    const url = `${apiUrl}/api/v2/payees`\n    log(`PUT ${url}`)\n    return axios({\n      method: 'PUT',\n      url,\n      headers: payloadHeaders(accessToken),\n      data: JSON.stringify(payeeCreationRequest)\n    })\n  }\n\n  /**\n   * Delete an account holder's payee\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token.\n   * @param {string} parameters.payeeUid - the payeeUid of the payee to be deleted.\n   * @return {Promise} - the http request promise\n   */\n  deletePayee (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    deletePayeeParameterValidator(parameters)\n    const { apiUrl, accessToken, payeeUid } = parameters\n\n    const url = `${apiUrl}/api/v2/payees/${payeeUid}`\n    log(`DELETE ${url}`)\n    return axios({\n      method: 'DELETE',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n}\n\nconst createPayeeParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  payeeCreationRequest: struct.object({\n    payeeName: 'string',\n    phoneNumber: 'string?',\n    payeeType: struct.enum(['INDIVIDUAL', 'BUSINESS']),\n    firstName: 'string?',\n    middleName: 'string?',\n    lastName: 'string?',\n    businessName: 'string?',\n    dateOfBirth: 'date?',\n    accounts: struct.optional([struct.object({\n      description: 'string',\n      defaultAccount: 'boolean',\n      countryCode: 'string',\n      accountIdentifier: 'string',\n      bankIdentifier: 'string',\n      bankIdentifierType: struct.enum(['SORT_CODE', 'SWIFT', 'IBAN', 'ABA', 'ABA_WIRE', 'ABA_ACH'])\n    })])\n  })\n})\n\nconst deletePayeeParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  payeeUid: 'uuid'\n})\n\nmodule.exports = Payee\n","import axios from 'axios'\nimport debug from 'debug'\nimport { defaultHeaders } from '../utils/http'\nimport { struct, minAPIParameterDefintion } from '../utils/validator'\n\nconst log = debug('starling:payment-service')\n\n/**\n * Service to interact with a customer's payments\n */\nclass Payment {\n  /**\n   * Create a new payment service\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options\n  }\n\n  /**\n   * Get a payment order\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.paymentOrderUid - the payment order uid\n   * @return {Promise} - the http request promise\n   */\n  getPaymentOrder (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getPaymentOrderParameterValidator(parameters)\n    const { apiUrl, accessToken, paymentOrderUid } = parameters\n\n    const url = `${apiUrl}/api/v2/payments/local/payment-order/${paymentOrderUid}`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get a payment order's payments\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.paymentOrderUid - the payment order uid\n   * @return {Promise} - the http request promise\n   */\n  getPaymentOrderPayments (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getPaymentOrderPaymentsParameterValidator(parameters)\n    const { apiUrl, accessToken, paymentOrderUid } = parameters\n\n    const url = `${apiUrl}/api/v2/payments/local/payment-order/${paymentOrderUid}/payments`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * List standing orders\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid of the account to get standing orders of\n   * @param {string} parameters.categoryUid - the category uid of the category to get standing orders of\n   * @return {Promise} - the http request promise\n   */\n  listStandingOrders (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    listStandingOrdersParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, categoryUid } = parameters\n\n    const url = `${apiUrl}/api/v2/payments/local/account/${accountUid}/category/${categoryUid}/standing-orders`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get a standing order\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid of the standing order\n   * @param {string} parameters.categoryUid - the category uid of the standing order\n   * @param {string} parameters.paymentOrderUid - the payment order uid of the standing order\n   * @return {Promise} - the http request promise\n   */\n  getStandingOrder (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getStandingOrderParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, categoryUid, paymentOrderUid } = parameters\n\n    const url = `${apiUrl}/api/v2/payments/local/account/${accountUid}/category/${categoryUid}/standing-orders/${paymentOrderUid}`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n}\n\nconst getPaymentOrderParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  paymentOrderUid: 'uuid'\n})\n\nconst getPaymentOrderPaymentsParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  paymentOrderUid: 'uuid'\n})\n\nconst listStandingOrdersParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  categoryUid: 'uuid'\n})\n\nconst getStandingOrderParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  categoryUid: 'uuid',\n  paymentOrderUid: 'uuid'\n})\n\nmodule.exports = Payment\n","import axios from 'axios'\nimport debug from 'debug'\nimport { defaultHeaders, payloadHeaders } from '../utils/http'\nimport { struct, minAPIParameterDefintion } from '../utils/validator'\n\nconst log = debug('starling:savings-goal-service')\n\n/**\n * Service to interact with a customer's savings goals\n */\nclass SavingsGoal {\n  /**\n   * Create a new savings goal service\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options\n  }\n\n  /**\n   * Get all savings goals\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @return {Promise} - the http request promise\n   */\n  getSavingsGoals (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getSavingsGoalsParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid } = parameters\n\n    const url = `${apiUrl}/api/v2/account/${accountUid}/savings-goals`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Get a savings goal\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @param {string} parameters.savingsGoalUid - the savings goal's uid\n   * @return {Promise} - the http request promise\n   */\n  getSavingsGoal (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    getSavingsGoalParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, savingsGoalUid } = parameters\n\n    const url = `${apiUrl}/api/v2/account/${accountUid}/savings-goals/${savingsGoalUid}`\n    log(`GET ${url}`)\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Create a savings goal\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid of the account to create the savings goal in\n   * @param {string} parameters.name - the name of the new savings goal\n   * @param {string=} parameters.currency - ISO-4217 3 character currency code\n   * @param {number=} parameters.targetAmount - the target amount in minor units (e.g. 1234 => £12.34)\n   * @param {string=} parameters.targetCurrency - ISO-4217 3 character currency code\n   * @param {string=} parameters.base64EncodedPhoto - base64 encoded image to associate with the goal\n   * @return {Promise} - the http request promise\n   */\n  createSavingsGoal (parameters) {\n    parameters = Object.assign({}, { currency: 'GBP', targetAmount: 0, targetCurrency: 'GBP' }, this.options, parameters)\n    createSavingsGoalParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, name, currency, targetAmount, targetCurrency, base64EncodedPhoto } = parameters\n\n    const url = `${apiUrl}/api/v2/account/${accountUid}/savings-goals`\n    log(`PUT ${url}`)\n\n    return axios({\n      method: 'PUT',\n      url,\n      headers: payloadHeaders(accessToken),\n      data: JSON.stringify({\n        name,\n        currency,\n        target: {\n          minorUnits: targetAmount,\n          currency: targetCurrency\n        },\n        base64EncodedPhoto\n      })\n    })\n  }\n\n  /**\n   * Delete a savings goal\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @param {string} parameters.savingsGoalUid - the savings goal's uid\n   * @return {Promise} - the http request promise\n   */\n  deleteSavingsGoal (parameters) {\n    parameters = Object.assign({}, this.options, parameters)\n    deleteSavingsGoalParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, savingsGoalUid } = parameters\n\n    const url = `${apiUrl}/api/v2/account/${accountUid}/savings-goals/${savingsGoalUid}`\n    log(`DELETE ${url}`)\n\n    return axios({\n      method: 'DELETE',\n      url,\n      headers: defaultHeaders(accessToken)\n    })\n  }\n\n  /**\n   * Add money to a savings goal\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @param {string} parameters.savingsGoalUid - the savings goal's uid\n   * @param {string} parameters.transferUid - a transaction ID for this transaction\n   * @param {number} parameters.amount - amount in the minor units of the given currency; eg pence in GBP, cents in EUR\n   * @param {string=} parameters.currency - ISO-4217 3 character currency code\n   * @return {Promise} - the http request promise\n   */\n  addMoneyToSavingsGoal (parameters) {\n    parameters = Object.assign({}, { currency: 'GBP' }, this.options, parameters)\n    addMoneyToSavingsGoalParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, savingsGoalUid, transferUid, amount, currency } = parameters\n\n    const url = `${apiUrl}/api/v2/account/${accountUid}/savings-goals/${savingsGoalUid}/add-money/${transferUid}`\n    log(`PUT ${url}`)\n\n    return axios({\n      method: 'PUT',\n      url,\n      headers: payloadHeaders(accessToken),\n      data: JSON.stringify({\n        amount: {\n          currency,\n          minorUnits: amount\n        }\n      })\n    })\n  }\n\n  /**\n   * Withdraw money from a savings goal\n   * @param {string} parameters.apiUrl - the API URL\n   * @param {string} parameters.accessToken - the oauth bearer token\n   * @param {string} parameters.accountUid - the account uid\n   * @param {string} parameters.savingsGoalUid - the savings goal's uid\n   * @param {string} parameters.transferUid - a transaction ID for this transaction\n   * @param {number} parameters.amount - amount in the minor units of the given currency; eg pence in GBP, cents in EUR\n   * @param {string=} parameters.currency - ISO-4217 3 character currency code\n   * @return {Promise} - the http request promise\n   */\n  withdrawMoneyFromSavingsGoal (parameters) {\n    parameters = Object.assign({}, { currency: 'GBP' }, this.options, parameters)\n    withdrawMoneyFromSavingsGoalParameterValidator(parameters)\n    const { apiUrl, accessToken, accountUid, savingsGoalUid, transferUid, amount, currency } = parameters\n\n    const url = `${apiUrl}/api/v2/account/${accountUid}/savings-goals/${savingsGoalUid}/withdraw-money/${transferUid}`\n    log(`PUT ${url}`)\n\n    return axios({\n      method: 'PUT',\n      url,\n      headers: payloadHeaders(accessToken),\n      data: JSON.stringify({\n        amount: {\n          currency,\n          minorUnits: amount\n        }\n      })\n    })\n  }\n}\n\nconst getSavingsGoalsParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid'\n})\n\nconst getSavingsGoalParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  savingsGoalUid: 'uuid'\n})\n\nconst deleteSavingsGoalParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  savingsGoalUid: 'uuid'\n})\n\nconst createSavingsGoalParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  name: 'string',\n  currency: 'string',\n  targetAmount: 'number',\n  targetCurrency: 'string',\n  base64EncodedPhoto: 'string?'\n})\n\nconst addMoneyToSavingsGoalParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  savingsGoalUid: 'uuid',\n  transferUid: 'uuid',\n  amount: 'number',\n  currency: 'string'\n})\n\nconst withdrawMoneyFromSavingsGoalParameterValidator = struct.interface({\n  ...minAPIParameterDefintion,\n  accountUid: 'uuid',\n  savingsGoalUid: 'uuid',\n  transferUid: 'uuid',\n  amount: 'number',\n  currency: 'string'\n})\n\nmodule.exports = SavingsGoal\n","import Account from './entities/account'\nimport AccountHolder from './entities/accountHolder'\nimport Address from './entities/address'\nimport FeedItem from './entities/feedItem'\nimport Card from './entities/card'\nimport OAuth from './entities/oauth'\nimport Payee from './entities/payee'\nimport Payment from './entities/payment'\nimport Mandate from './entities/mandate'\nimport SavingsGoal from './entities/savingsGoal'\nimport Identity from './entities/identity'\n\n/**\n * @property {Identity} identity\n * @property {AccountHolder} accountHolder\n * @property {Account} account\n * @property {Address} address\n * @property {FeedItem} feedItem\n * @property {Payment} payment\n * @property {Mandate} mandate\n * @property {Payee} payee\n * @property {Card} card\n * @property {SavingsGoal} savingsGoal\n * @property {OAuth} oAuth\n */\nclass Starling {\n  /**\n   * Create an instance of the starling client\n   * @param {Object=} options - configuration parameters\n   */\n  constructor (options) {\n    const defaults = {\n      apiUrl: 'https://api.starlingbank.com',\n      clientId: '',\n      clientSecret: ''\n    }\n\n    this.config = Object.assign({}, defaults, options)\n\n    this.identity = new Identity(this.config)\n    this.accountHolder = new AccountHolder(this.config)\n    this.account = new Account(this.config)\n    this.address = new Address(this.config)\n    this.feedItem = new FeedItem(this.config)\n    this.payment = new Payment(this.config)\n    this.mandate = new Mandate(this.config)\n    this.payee = new Payee(this.config)\n    this.card = new Card(this.config)\n    this.savingsGoal = new SavingsGoal(this.config)\n    this.oAuth = new OAuth(this.config)\n  }\n}\n\nmodule.exports = Starling\n","export const defaultHeaders = (accessToken) => ({\n  Accept: 'application/json',\n  Authorization: `Bearer ${accessToken}`\n})\n\nexport const payloadHeaders = (accessToken) => ({\n  ...defaultHeaders(accessToken),\n  'Content-Type': 'application/json'\n})\n","const superstruct = require('superstruct').superstruct\nexport const struct = superstruct({\n  types: {\n    uuid: value => /^[0-9a-f]{8}-[0-9a-f]{4}-[4][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(value),\n    yearMonth: value => /^[0-9]{4}-(?:1[0-2]|0[1-9])$/.test(value),\n    date: value => /^[0-9]{4}-(?:1[0-2]|0[1-9])-(?:3[01]|[12]\\d|0[1-9])$/.test(value),\n    timestamp: value => /^((?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z)?$/.test(value)\n  }\n})\nexport const minAPIParameterDefintion = { accessToken: 'string', apiUrl: 'string' }\nexport const minAPIParameterValidator = struct.interface(minAPIParameterDefintion)\n"]}